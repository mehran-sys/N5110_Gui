
N5110_GUI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009844  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001540  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae94  0800ae94  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae94  0800ae94  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae94  0800ae94  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae94  0800ae94  0001ae94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae98  0800ae98  0001ae98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800ae9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ef8  20000080  0800af1c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f78  0800af1c  00021f78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019d6f  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e8a  00000000  00000000  00039e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  0003dce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000123f  00000000  00000000  0003f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000496b  00000000  00000000  000406bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ca0b  00000000  00000000  0004502a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bce1  00000000  00000000  00061a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000685c  00000000  00000000  000fd718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00103f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	0800993c 	.word	0x0800993c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	0800993c 	.word	0x0800993c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000942:	f002 f82f 	bl	80029a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000946:	f000 f871 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f000 fa79 	bl	8000e40 <MX_GPIO_Init>
  MX_ADC1_Init();
 800094e:	f000 f8cf 	bl	8000af0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000952:	f000 f9b1 	bl	8000cb8 <MX_TIM2_Init>
  MX_IWDG_Init();
 8000956:	f000 f909 	bl	8000b6c <MX_IWDG_Init>
  MX_RTC_Init();
 800095a:	f000 f921 	bl	8000ba0 <MX_RTC_Init>
  MX_SPI1_Init();
 800095e:	f000 f973 	bl	8000c48 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000962:	f000 fa1f 	bl	8000da4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
/*-------------------------Show Start Prompt---------------------------*/
  PCD8544_init(PCD8544_DEFAULT_CONTRAST);
 8000966:	203c      	movs	r0, #60	; 0x3c
 8000968:	f001 f9a4 	bl	8001cb4 <PCD8544_init>
  PCD8544_setFont(1);
 800096c:	2001      	movs	r0, #1
 800096e:	f001 fa1f 	bl	8001db0 <PCD8544_setFont>
  PCD8544_clearScreen();
 8000972:	f001 fbe9 	bl	8002148 <PCD8544_clearScreen>
  PCD8544_printStringAlign("LOADING...", 10, ALIGNMETN_CENTER);
 8000976:	2202      	movs	r2, #2
 8000978:	210a      	movs	r1, #10
 800097a:	4820      	ldr	r0, [pc, #128]	; (80009fc <main+0xc0>)
 800097c:	f001 fb90 	bl	80020a0 <PCD8544_printStringAlign>
  PCD8544_refreshScreen();
 8000980:	f001 fc16 	bl	80021b0 <PCD8544_refreshScreen>
  HAL_Delay(500);
 8000984:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000988:	f002 f83e 	bl	8002a08 <HAL_Delay>
  PCD8544_clearScreen();
 800098c:	f001 fbdc 	bl	8002148 <PCD8544_clearScreen>
  PCD8544_refreshScreen();
 8000990:	f001 fc0e 	bl	80021b0 <PCD8544_refreshScreen>

  /*---------------------Set Contrast And BackLight--------------------*/
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, DEFAULT_BACKLIGHT_VALUE);
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <main+0xc4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f240 32e7 	movw	r2, #999	; 0x3e7
 800099c:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800099e:	210c      	movs	r1, #12
 80009a0:	4817      	ldr	r0, [pc, #92]	; (8000a00 <main+0xc4>)
 80009a2:	f004 fe5f 	bl	8005664 <HAL_TIM_PWM_Start>

  /*-------------------------Create Basic Tasks------------------------*/

  xTaskCreate(showMainMenu,
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <main+0xc8>)
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	2301      	movs	r3, #1
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2300      	movs	r3, #0
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	4915      	ldr	r1, [pc, #84]	; (8000a08 <main+0xcc>)
 80009b4:	4815      	ldr	r0, [pc, #84]	; (8000a0c <main+0xd0>)
 80009b6:	f006 fb2d 	bl	8007014 <xTaskCreate>
							128,
							NULL,
							1,
							&mainMenu_handle);

  xTaskCreate(handleButtonPressed,
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <main+0xd4>)
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	2301      	movs	r3, #1
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2300      	movs	r3, #0
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	4913      	ldr	r1, [pc, #76]	; (8000a14 <main+0xd8>)
 80009c8:	4813      	ldr	r0, [pc, #76]	; (8000a18 <main+0xdc>)
 80009ca:	f006 fb23 	bl	8007014 <xTaskCreate>
							NULL,
							1,
							&handleButtonPressed_handle);

  /*---------------------------Create Mics--------------------------*/
  pressedButtonQueue = xQueueCreate(5,sizeof(Buttons_e));
 80009ce:	2200      	movs	r2, #0
 80009d0:	2101      	movs	r1, #1
 80009d2:	2005      	movs	r0, #5
 80009d4:	f005 fe7f 	bl	80066d6 <xQueueGenericCreate>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <main+0xe0>)
 80009dc:	6013      	str	r3, [r2, #0]

  iwdgReloadTimer_handle = xTimerCreate("IWDG Handle Timer",
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <main+0xe4>)
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2300      	movs	r3, #0
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80009ea:	480e      	ldr	r0, [pc, #56]	; (8000a24 <main+0xe8>)
 80009ec:	f007 fba4 	bl	8008138 <xTimerCreate>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <main+0xec>)
 80009f4:	6013      	str	r3, [r2, #0]
  																			IWDG_REFRESH_TIME,
																				pdTRUE,
																				0,
																				refreshIwdg);
  /*-------------------------Start The Scheduler----------------------*/
  vTaskStartScheduler();
 80009f6:	f006 fe15 	bl	8007624 <vTaskStartScheduler>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <main+0xbe>
 80009fc:	080099dc 	.word	0x080099dc
 8000a00:	20000144 	.word	0x20000144
 8000a04:	200001d8 	.word	0x200001d8
 8000a08:	080099e8 	.word	0x080099e8
 8000a0c:	08000fd5 	.word	0x08000fd5
 8000a10:	200001f4 	.word	0x200001f4
 8000a14:	080099f4 	.word	0x080099f4
 8000a18:	08000f31 	.word	0x08000f31
 8000a1c:	200001fc 	.word	0x200001fc
 8000a20:	08001b91 	.word	0x08001b91
 8000a24:	08009a00 	.word	0x08009a00
 8000a28:	200001f8 	.word	0x200001f8

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a36:	2228      	movs	r2, #40	; 0x28
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f008 fa86 	bl	8008f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a5c:	2309      	movs	r3, #9
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a72:	2302      	movs	r3, #2
 8000a74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 ff44 	bl	8003914 <HAL_RCC_OscConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a92:	f001 f8bb 	bl	8001c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a96:	230f      	movs	r3, #15
 8000a98:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f003 f9b0 	bl	8003e18 <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000abe:	f001 f8a5 	bl	8001c0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aca:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000acc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ad0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 fb6f 	bl	80041b8 <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000ae0:	f001 f894 	bl	8001c0c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000ae4:	f003 fa82 	bl	8003fec <HAL_RCC_EnableCSS>
}
 8000ae8:	bf00      	nop
 8000aea:	3750      	adds	r7, #80	; 0x50
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_ADC1_Init+0x74>)
 8000b02:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <MX_ADC1_Init+0x78>)
 8000b04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_ADC1_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_ADC1_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_ADC1_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_ADC1_Init+0x74>)
 8000b1a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <MX_ADC1_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_ADC1_Init+0x74>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <MX_ADC1_Init+0x74>)
 8000b2e:	f001 ff8f 	bl	8002a50 <HAL_ADC_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b38:	f001 f868 	bl	8001c0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_ADC1_Init+0x74>)
 8000b4e:	f002 fa43 	bl	8002fd8 <HAL_ADC_ConfigChannel>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b58:	f001 f858 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2000009c 	.word	0x2000009c
 8000b68:	40012400 	.word	0x40012400

08000b6c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_IWDG_Init+0x2c>)
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <MX_IWDG_Init+0x30>)
 8000b74:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_IWDG_Init+0x2c>)
 8000b78:	2204      	movs	r2, #4
 8000b7a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_IWDG_Init+0x2c>)
 8000b7e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b82:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_IWDG_Init+0x2c>)
 8000b86:	f002 fe68 	bl	800385a <HAL_IWDG_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000b90:	f001 f83c 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000cc 	.word	0x200000cc
 8000b9c:	40003000 	.word	0x40003000

08000ba0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ba6:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <MX_RTC_Init+0x9c>)
 8000ba8:	4a25      	ldr	r2, [pc, #148]	; (8000c40 <MX_RTC_Init+0xa0>)
 8000baa:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000bac:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <MX_RTC_Init+0x9c>)
 8000bae:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_RTC_Init+0x9c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bba:	4820      	ldr	r0, [pc, #128]	; (8000c3c <MX_RTC_Init+0x9c>)
 8000bbc:	f003 fc68 	bl	8004490 <HAL_RTC_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000bc6:	f001 f821 	bl	8001c0c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
 if (HAL_GPIO_ReadPin(CENTER_BUTTON_INPUT_GPIO_Port, CENTER_BUTTON_INPUT_Pin) == 1){
 8000bca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bce:	481d      	ldr	r0, [pc, #116]	; (8000c44 <MX_RTC_Init+0xa4>)
 8000bd0:	f002 fe14 	bl	80037fc <HAL_GPIO_ReadPin>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d12b      	bne.n	8000c32 <MX_RTC_Init+0x92>
	RTC_TimeTypeDef sTime = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2100      	movs	r1, #0
 8000bde:	460a      	mov	r2, r1
 8000be0:	801a      	strh	r2, [r3, #0]
 8000be2:	460a      	mov	r2, r1
 8000be4:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]

	sTime.Hours = 0x0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480f      	ldr	r0, [pc, #60]	; (8000c3c <MX_RTC_Init+0x9c>)
 8000bfe:	f003 fcd3 	bl	80045a8 <HAL_RTC_SetTime>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000c08:	f001 f800 	bl	8001c0c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000c10:	2301      	movs	r3, #1
 8000c12:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <MX_RTC_Init+0x9c>)
 8000c24:	f003 fe30 	bl	8004888 <HAL_RTC_SetDate>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000c2e:	f000 ffed 	bl	8001c0c <Error_Handler>
 }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000d8 	.word	0x200000d8
 8000c40:	40002800 	.word	0x40002800
 8000c44:	40010800 	.word	0x40010800

08000c48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_SPI1_Init+0x68>)
 8000c4e:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_SPI1_Init+0x68>)
 8000c54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_SPI1_Init+0x68>)
 8000c5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c60:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <MX_SPI1_Init+0x68>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_SPI1_Init+0x68>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <MX_SPI1_Init+0x68>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_SPI1_Init+0x68>)
 8000c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_SPI1_Init+0x68>)
 8000c7e:	2210      	movs	r2, #16
 8000c80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <MX_SPI1_Init+0x68>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_SPI1_Init+0x68>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <MX_SPI1_Init+0x68>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_SPI1_Init+0x68>)
 8000c96:	220a      	movs	r2, #10
 8000c98:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_SPI1_Init+0x68>)
 8000c9c:	f004 f94c 	bl	8004f38 <HAL_SPI_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000ca6:	f000 ffb1 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000ec 	.word	0x200000ec
 8000cb4:	40013000 	.word	0x40013000

08000cb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	615a      	str	r2, [r3, #20]
 8000ce6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <MX_TIM2_Init+0xe8>)
 8000cea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000cf0:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <MX_TIM2_Init+0xe8>)
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <MX_TIM2_Init+0xe8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000cfc:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <MX_TIM2_Init+0xe8>)
 8000cfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <MX_TIM2_Init+0xe8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <MX_TIM2_Init+0xe8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d10:	4823      	ldr	r0, [pc, #140]	; (8000da0 <MX_TIM2_Init+0xe8>)
 8000d12:	f004 fb7f 	bl	8005414 <HAL_TIM_Base_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d1c:	f000 ff76 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	481c      	ldr	r0, [pc, #112]	; (8000da0 <MX_TIM2_Init+0xe8>)
 8000d2e:	f004 ff05 	bl	8005b3c <HAL_TIM_ConfigClockSource>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d38:	f000 ff68 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d3c:	4818      	ldr	r0, [pc, #96]	; (8000da0 <MX_TIM2_Init+0xe8>)
 8000d3e:	f004 fc39 	bl	80055b4 <HAL_TIM_PWM_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d48:	f000 ff60 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d54:	f107 0320 	add.w	r3, r7, #32
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4811      	ldr	r0, [pc, #68]	; (8000da0 <MX_TIM2_Init+0xe8>)
 8000d5c:	f005 fa8a 	bl	8006274 <HAL_TIMEx_MasterConfigSynchronization>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d66:	f000 ff51 	bl	8001c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6a:	2360      	movs	r3, #96	; 0x60
 8000d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	220c      	movs	r2, #12
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4807      	ldr	r0, [pc, #28]	; (8000da0 <MX_TIM2_Init+0xe8>)
 8000d82:	f004 fe19 	bl	80059b8 <HAL_TIM_PWM_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d8c:	f000 ff3e 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d90:	4803      	ldr	r0, [pc, #12]	; (8000da0 <MX_TIM2_Init+0xe8>)
 8000d92:	f001 fcd7 	bl	8002744 <HAL_TIM_MspPostInit>

}
 8000d96:	bf00      	nop
 8000d98:	3738      	adds	r7, #56	; 0x38
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000144 	.word	0x20000144

08000da4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db8:	463b      	mov	r3, r7
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_TIM3_Init+0x94>)
 8000dc2:	4a1e      	ldr	r2, [pc, #120]	; (8000e3c <MX_TIM3_Init+0x98>)
 8000dc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_TIM3_Init+0x94>)
 8000dc8:	2247      	movs	r2, #71	; 0x47
 8000dca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_TIM3_Init+0x94>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_TIM3_Init+0x94>)
 8000dd4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_TIM3_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_TIM3_Init+0x94>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000de6:	4814      	ldr	r0, [pc, #80]	; (8000e38 <MX_TIM3_Init+0x94>)
 8000de8:	f004 fb14 	bl	8005414 <HAL_TIM_Base_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000df2:	f000 ff0b 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	4619      	mov	r1, r3
 8000e02:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_TIM3_Init+0x94>)
 8000e04:	f004 fe9a 	bl	8005b3c <HAL_TIM_ConfigClockSource>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e0e:	f000 fefd 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <MX_TIM3_Init+0x94>)
 8000e20:	f005 fa28 	bl	8006274 <HAL_TIMEx_MasterConfigSynchronization>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e2a:	f000 feef 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000018c 	.word	0x2000018c
 8000e3c:	40000400 	.word	0x40000400

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e54:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <MX_GPIO_Init+0xe4>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a32      	ldr	r2, [pc, #200]	; (8000f24 <MX_GPIO_Init+0xe4>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <MX_GPIO_Init+0xe4>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <MX_GPIO_Init+0xe4>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a2c      	ldr	r2, [pc, #176]	; (8000f24 <MX_GPIO_Init+0xe4>)
 8000e72:	f043 0320 	orr.w	r3, r3, #32
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <MX_GPIO_Init+0xe4>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0320 	and.w	r3, r3, #32
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <MX_GPIO_Init+0xe4>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a26      	ldr	r2, [pc, #152]	; (8000f24 <MX_GPIO_Init+0xe4>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <MX_GPIO_Init+0xe4>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9c:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <MX_GPIO_Init+0xe4>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a20      	ldr	r2, [pc, #128]	; (8000f24 <MX_GPIO_Init+0xe4>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <MX_GPIO_Init+0xe4>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0308 	and.w	r3, r3, #8
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2150      	movs	r1, #80	; 0x50
 8000eb8:	481b      	ldr	r0, [pc, #108]	; (8000f28 <MX_GPIO_Init+0xe8>)
 8000eba:	f002 fcb6 	bl	800382a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	481a      	ldr	r0, [pc, #104]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000ec4:	f002 fcb1 	bl	800382a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000ec8:	2350      	movs	r3, #80	; 0x50
 8000eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	4812      	ldr	r0, [pc, #72]	; (8000f28 <MX_GPIO_Init+0xe8>)
 8000ee0:	f002 fb08 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480c      	ldr	r0, [pc, #48]	; (8000f2c <MX_GPIO_Init+0xec>)
 8000efc:	f002 fafa 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_BUTTON_INPUT_Pin CENTER_BUTTON_INPUT_Pin RIGHT_BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = LEFT_BUTTON_INPUT_Pin|CENTER_BUTTON_INPUT_Pin|RIGHT_BUTTON_INPUT_Pin;
 8000f00:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4619      	mov	r1, r3
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_GPIO_Init+0xe8>)
 8000f16:	f002 faed 	bl	80034f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3720      	adds	r7, #32
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	40010c00 	.word	0x40010c00

08000f30 <handleButtonPressed>:

/* USER CODE BEGIN 4 */
/*----------------------Tasks------------------------*/

void handleButtonPressed(void *pvParameters){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	Buttons_e pressedButton;

	for (;;){
		if(HAL_GPIO_ReadPin(RIGHT_BUTTON_INPUT_GPIO_Port, RIGHT_BUTTON_INPUT_Pin) == 1 ||
 8000f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f3c:	4822      	ldr	r0, [pc, #136]	; (8000fc8 <handleButtonPressed+0x98>)
 8000f3e:	f002 fc5d 	bl	80037fc <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d00f      	beq.n	8000f68 <handleButtonPressed+0x38>
			HAL_GPIO_ReadPin(LEFT_BUTTON_INPUT_GPIO_Port, LEFT_BUTTON_INPUT_Pin) == 1 ||
 8000f48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4c:	481e      	ldr	r0, [pc, #120]	; (8000fc8 <handleButtonPressed+0x98>)
 8000f4e:	f002 fc55 	bl	80037fc <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
		if(HAL_GPIO_ReadPin(RIGHT_BUTTON_INPUT_GPIO_Port, RIGHT_BUTTON_INPUT_Pin) == 1 ||
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d007      	beq.n	8000f68 <handleButtonPressed+0x38>
			HAL_GPIO_ReadPin(CENTER_BUTTON_INPUT_GPIO_Port, CENTER_BUTTON_INPUT_Pin) == 1){
 8000f58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5c:	481a      	ldr	r0, [pc, #104]	; (8000fc8 <handleButtonPressed+0x98>)
 8000f5e:	f002 fc4d 	bl	80037fc <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
			HAL_GPIO_ReadPin(LEFT_BUTTON_INPUT_GPIO_Port, LEFT_BUTTON_INPUT_Pin) == 1 ||
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d12a      	bne.n	8000fbe <handleButtonPressed+0x8e>

				if (HAL_GPIO_ReadPin(RIGHT_BUTTON_INPUT_GPIO_Port, RIGHT_BUTTON_INPUT_Pin) == 1){
 8000f68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f6c:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <handleButtonPressed+0x98>)
 8000f6e:	f002 fc45 	bl	80037fc <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d102      	bne.n	8000f7e <handleButtonPressed+0x4e>
					pressedButton = RIGHT_BUTTON;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e014      	b.n	8000fa8 <handleButtonPressed+0x78>
				}
				else if (HAL_GPIO_ReadPin(LEFT_BUTTON_INPUT_GPIO_Port, LEFT_BUTTON_INPUT_Pin) == 1){
 8000f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f82:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <handleButtonPressed+0x98>)
 8000f84:	f002 fc3a 	bl	80037fc <HAL_GPIO_ReadPin>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d102      	bne.n	8000f94 <handleButtonPressed+0x64>
					pressedButton  = LEFT_BUTTON;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e009      	b.n	8000fa8 <handleButtonPressed+0x78>
				}
				else if (HAL_GPIO_ReadPin(CENTER_BUTTON_INPUT_GPIO_Port, CENTER_BUTTON_INPUT_Pin) == 1){
 8000f94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <handleButtonPressed+0x98>)
 8000f9a:	f002 fc2f 	bl	80037fc <HAL_GPIO_ReadPin>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d101      	bne.n	8000fa8 <handleButtonPressed+0x78>
					pressedButton = CENETR_BUTTON;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	73fb      	strb	r3, [r7, #15]
				}
				xQueueSend(pressedButtonQueue,&pressedButton,0);
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <handleButtonPressed+0x9c>)
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	f107 010f 	add.w	r1, r7, #15
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f005 fbf0 	bl	8006798 <xQueueGenericSend>
				vTaskDelay(BUTTON_DELAY_TIME);
 8000fb8:	20c8      	movs	r0, #200	; 0xc8
 8000fba:	f006 f9f1 	bl	80073a0 <vTaskDelay>
		}
		HAL_IWDG_Refresh(&hiwdg);
 8000fbe:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <handleButtonPressed+0xa0>)
 8000fc0:	f002 fc8d 	bl	80038de <HAL_IWDG_Refresh>
		if(HAL_GPIO_ReadPin(RIGHT_BUTTON_INPUT_GPIO_Port, RIGHT_BUTTON_INPUT_Pin) == 1 ||
 8000fc4:	e7b8      	b.n	8000f38 <handleButtonPressed+0x8>
 8000fc6:	bf00      	nop
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	200001fc 	.word	0x200001fc
 8000fd0:	200000cc 	.word	0x200000cc

08000fd4 <showMainMenu>:
	}
}

void showMainMenu(void *pvParameters){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	6078      	str	r0, [r7, #4]
	Buttons_e pressedButton;

	for(;;){

		/*------------------------Draw Menu Items-----------------------*/
		PCD8544_GUI_displayMenuName("MAIN MENU");
 8000fdc:	48a5      	ldr	r0, [pc, #660]	; (8001274 <showMainMenu+0x2a0>)
 8000fde:	f001 fa81 	bl	80024e4 <PCD8544_GUI_displayMenuName>

		menuIndex = currentPage * 3 + currentMenuIndex;
 8000fe2:	4ba5      	ldr	r3, [pc, #660]	; (8001278 <showMainMenu+0x2a4>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	0052      	lsls	r2, r2, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4ba3      	ldr	r3, [pc, #652]	; (800127c <showMainMenu+0x2a8>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4ba2      	ldr	r3, [pc, #648]	; (8001280 <showMainMenu+0x2ac>)
 8000ff8:	701a      	strb	r2, [r3, #0]
		PCD8544_GUI_drawSideBar(80, 16, 26, menuIndex, MENU_ITEMS);
 8000ffa:	4ba1      	ldr	r3, [pc, #644]	; (8001280 <showMainMenu+0x2ac>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2207      	movs	r2, #7
 8001000:	9200      	str	r2, [sp, #0]
 8001002:	221a      	movs	r2, #26
 8001004:	2110      	movs	r1, #16
 8001006:	2050      	movs	r0, #80	; 0x50
 8001008:	f001 fa7e 	bl	8002508 <PCD8544_GUI_drawSideBar>

		uint8_t itemsInPage;
		if (currentPage < PAGES - 1){
 800100c:	4b9a      	ldr	r3, [pc, #616]	; (8001278 <showMainMenu+0x2a4>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d802      	bhi.n	800101a <showMainMenu+0x46>
			itemsInPage = ITEMS_PER_PAGE;
 8001014:	2303      	movs	r3, #3
 8001016:	77fb      	strb	r3, [r7, #31]
 8001018:	e001      	b.n	800101e <showMainMenu+0x4a>
		}
		else {
			itemsInPage = MENU_ITEMS % 3;
 800101a:	2301      	movs	r3, #1
 800101c:	77fb      	strb	r3, [r7, #31]
		}

		for (uint8_t i = 0 ; i < itemsInPage ; i++){
 800101e:	2300      	movs	r3, #0
 8001020:	77bb      	strb	r3, [r7, #30]
 8001022:	e058      	b.n	80010d6 <showMainMenu+0x102>
			if (i%3 != currentMenuIndex){
 8001024:	7fba      	ldrb	r2, [r7, #30]
 8001026:	4b97      	ldr	r3, [pc, #604]	; (8001284 <showMainMenu+0x2b0>)
 8001028:	fba3 1302 	umull	r1, r3, r3, r2
 800102c:	0859      	lsrs	r1, r3, #1
 800102e:	460b      	mov	r3, r1
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	440b      	add	r3, r1
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b90      	ldr	r3, [pc, #576]	; (800127c <showMainMenu+0x2a8>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d018      	beq.n	8001072 <showMainMenu+0x9e>
				PCD8544_printStringAlign(MenuItemNames[(currentPage*3)+i],((11*i)+17), ALIGNMETN_LEFT);
 8001040:	4b8d      	ldr	r3, [pc, #564]	; (8001278 <showMainMenu+0x2a4>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	441a      	add	r2, r3
 800104c:	7fbb      	ldrb	r3, [r7, #30]
 800104e:	4413      	add	r3, r2
 8001050:	4a8d      	ldr	r2, [pc, #564]	; (8001288 <showMainMenu+0x2b4>)
 8001052:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001056:	7fbb      	ldrb	r3, [r7, #30]
 8001058:	461a      	mov	r2, r3
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	441a      	add	r2, r3
 800105e:	0052      	lsls	r2, r2, #1
 8001060:	4413      	add	r3, r2
 8001062:	b2db      	uxtb	r3, r3
 8001064:	3311      	adds	r3, #17
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2201      	movs	r2, #1
 800106a:	4619      	mov	r1, r3
 800106c:	f001 f818 	bl	80020a0 <PCD8544_printStringAlign>
 8001070:	e02e      	b.n	80010d0 <showMainMenu+0xfc>
			}
			else if (i == currentMenuIndex){
 8001072:	4b82      	ldr	r3, [pc, #520]	; (800127c <showMainMenu+0x2a8>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	7fba      	ldrb	r2, [r7, #30]
 8001078:	429a      	cmp	r2, r3
 800107a:	d129      	bne.n	80010d0 <showMainMenu+0xfc>
				PCD8544_setTextInvert(true);
 800107c:	2001      	movs	r0, #1
 800107e:	f000 fe81 	bl	8001d84 <PCD8544_setTextInvert>
				char s[14];
				strcpy(s,">");
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	223e      	movs	r2, #62	; 0x3e
 8001088:	801a      	strh	r2, [r3, #0]
				strcat(s,MenuItemNames[(currentPage*3)+i]);
 800108a:	4b7b      	ldr	r3, [pc, #492]	; (8001278 <showMainMenu+0x2a4>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	441a      	add	r2, r3
 8001096:	7fbb      	ldrb	r3, [r7, #30]
 8001098:	4413      	add	r3, r2
 800109a:	4a7b      	ldr	r2, [pc, #492]	; (8001288 <showMainMenu+0x2b4>)
 800109c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f007 ff58 	bl	8008f5c <strcat>
				PCD8544_printStringAlign(s,((11*i)+17), ALIGNMETN_LEFT);
 80010ac:	7fbb      	ldrb	r3, [r7, #30]
 80010ae:	461a      	mov	r2, r3
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	441a      	add	r2, r3
 80010b4:	0052      	lsls	r2, r2, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	3311      	adds	r3, #17
 80010bc:	b2d9      	uxtb	r1, r3
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	2201      	movs	r2, #1
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 ffeb 	bl	80020a0 <PCD8544_printStringAlign>
				PCD8544_setTextInvert(false);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 fe5a 	bl	8001d84 <PCD8544_setTextInvert>
		for (uint8_t i = 0 ; i < itemsInPage ; i++){
 80010d0:	7fbb      	ldrb	r3, [r7, #30]
 80010d2:	3301      	adds	r3, #1
 80010d4:	77bb      	strb	r3, [r7, #30]
 80010d6:	7fba      	ldrb	r2, [r7, #30]
 80010d8:	7ffb      	ldrb	r3, [r7, #31]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d3a2      	bcc.n	8001024 <showMainMenu+0x50>
			}
		}

		PCD8544_refreshScreen();
 80010de:	f001 f867 	bl	80021b0 <PCD8544_refreshScreen>

		/*-----------------------Handle button events--------------------*/
		if (xQueueReceive(pressedButtonQueue, &pressedButton, HAL_MAX_DELAY) == pdPASS){
 80010e2:	4b6a      	ldr	r3, [pc, #424]	; (800128c <showMainMenu+0x2b8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f107 011d 	add.w	r1, r7, #29
 80010ea:	f04f 32ff 	mov.w	r2, #4294967295
 80010ee:	4618      	mov	r0, r3
 80010f0:	f005 fce8 	bl	8006ac4 <xQueueReceive>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	f040 8106 	bne.w	8001308 <showMainMenu+0x334>
			if (pressedButton == RIGHT_BUTTON){
 80010fc:	7f7b      	ldrb	r3, [r7, #29]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d11d      	bne.n	800113e <showMainMenu+0x16a>
				currentMenuIndex++;
 8001102:	4b5e      	ldr	r3, [pc, #376]	; (800127c <showMainMenu+0x2a8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b5c      	ldr	r3, [pc, #368]	; (800127c <showMainMenu+0x2a8>)
 800110c:	701a      	strb	r2, [r3, #0]

				if (currentMenuIndex > itemsInPage - 1){
 800110e:	4b5b      	ldr	r3, [pc, #364]	; (800127c <showMainMenu+0x2a8>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	7ffa      	ldrb	r2, [r7, #31]
 8001114:	429a      	cmp	r2, r3
 8001116:	f200 80f7 	bhi.w	8001308 <showMainMenu+0x334>
					currentPage++;
 800111a:	4b57      	ldr	r3, [pc, #348]	; (8001278 <showMainMenu+0x2a4>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b55      	ldr	r3, [pc, #340]	; (8001278 <showMainMenu+0x2a4>)
 8001124:	701a      	strb	r2, [r3, #0]
					currentMenuIndex = 0;
 8001126:	4b55      	ldr	r3, [pc, #340]	; (800127c <showMainMenu+0x2a8>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
					if (currentPage > PAGES - 1){
 800112c:	4b52      	ldr	r3, [pc, #328]	; (8001278 <showMainMenu+0x2a4>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b02      	cmp	r3, #2
 8001132:	f240 80e9 	bls.w	8001308 <showMainMenu+0x334>
						currentPage = 0;
 8001136:	4b50      	ldr	r3, [pc, #320]	; (8001278 <showMainMenu+0x2a4>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e0e4      	b.n	8001308 <showMainMenu+0x334>
					}
				}
			}
			else if (pressedButton == LEFT_BUTTON){
 800113e:	7f7b      	ldrb	r3, [r7, #29]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d12c      	bne.n	800119e <showMainMenu+0x1ca>
				if (currentMenuIndex > 0){
 8001144:	4b4d      	ldr	r3, [pc, #308]	; (800127c <showMainMenu+0x2a8>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d006      	beq.n	800115a <showMainMenu+0x186>
					currentMenuIndex--;
 800114c:	4b4b      	ldr	r3, [pc, #300]	; (800127c <showMainMenu+0x2a8>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	3b01      	subs	r3, #1
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b49      	ldr	r3, [pc, #292]	; (800127c <showMainMenu+0x2a8>)
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	e0d6      	b.n	8001308 <showMainMenu+0x334>
				}
				else if (currentMenuIndex <= 0){
 800115a:	4b48      	ldr	r3, [pc, #288]	; (800127c <showMainMenu+0x2a8>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f040 80d2 	bne.w	8001308 <showMainMenu+0x334>
					if (currentPage > 0){
 8001164:	4b44      	ldr	r3, [pc, #272]	; (8001278 <showMainMenu+0x2a4>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <showMainMenu+0x1a6>
						currentPage--;
 800116c:	4b42      	ldr	r3, [pc, #264]	; (8001278 <showMainMenu+0x2a4>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	3b01      	subs	r3, #1
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <showMainMenu+0x2a4>)
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	e002      	b.n	8001180 <showMainMenu+0x1ac>
					}
					else {
						currentPage = PAGES - 1;
 800117a:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <showMainMenu+0x2a4>)
 800117c:	2202      	movs	r2, #2
 800117e:	701a      	strb	r2, [r3, #0]
					}

					if (currentPage < PAGES - 1){
 8001180:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <showMainMenu+0x2a4>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d802      	bhi.n	800118e <showMainMenu+0x1ba>
						itemsInPage = ITEMS_PER_PAGE;
 8001188:	2303      	movs	r3, #3
 800118a:	77fb      	strb	r3, [r7, #31]
 800118c:	e001      	b.n	8001192 <showMainMenu+0x1be>
					}
					else {
						itemsInPage = MENU_ITEMS % ITEMS_PER_PAGE;
 800118e:	2301      	movs	r3, #1
 8001190:	77fb      	strb	r3, [r7, #31]
					}

					currentMenuIndex = itemsInPage - 1;
 8001192:	7ffb      	ldrb	r3, [r7, #31]
 8001194:	3b01      	subs	r3, #1
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b38      	ldr	r3, [pc, #224]	; (800127c <showMainMenu+0x2a8>)
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e0b4      	b.n	8001308 <showMainMenu+0x334>
				}
			}
			else if (pressedButton == CENETR_BUTTON){
 800119e:	7f7b      	ldrb	r3, [r7, #29]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	f040 80b1 	bne.w	8001308 <showMainMenu+0x334>
				currentMenu = (ITEMS_PER_PAGE * currentPage) + currentMenuIndex;
 80011a6:	4b34      	ldr	r3, [pc, #208]	; (8001278 <showMainMenu+0x2a4>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	0052      	lsls	r2, r2, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b32      	ldr	r3, [pc, #200]	; (800127c <showMainMenu+0x2a8>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b35      	ldr	r3, [pc, #212]	; (8001290 <showMainMenu+0x2bc>)
 80011bc:	701a      	strb	r2, [r3, #0]
				/*-----------------------Execute Menus---------------------*/
				if (currentMenu == CLOCK){
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <showMainMenu+0x2bc>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10a      	bne.n	80011dc <showMainMenu+0x208>
					xTaskCreate(showClockMenu,
 80011c6:	4b33      	ldr	r3, [pc, #204]	; (8001294 <showMainMenu+0x2c0>)
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	2301      	movs	r3, #1
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2300      	movs	r3, #0
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	4931      	ldr	r1, [pc, #196]	; (8001298 <showMainMenu+0x2c4>)
 80011d4:	4831      	ldr	r0, [pc, #196]	; (800129c <showMainMenu+0x2c8>)
 80011d6:	f005 ff1d 	bl	8007014 <xTaskCreate>
 80011da:	e08b      	b.n	80012f4 <showMainMenu+0x320>
											128,
											NULL,
											1,
											&clockMenu_handle);
				}
				else if (currentMenu == TIMER){
 80011dc:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <showMainMenu+0x2bc>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d10a      	bne.n	80011fa <showMainMenu+0x226>
					xTaskCreate(showTimerMenu,
 80011e4:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <showMainMenu+0x2cc>)
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	2301      	movs	r3, #1
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2300      	movs	r3, #0
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	492c      	ldr	r1, [pc, #176]	; (80012a4 <showMainMenu+0x2d0>)
 80011f2:	482d      	ldr	r0, [pc, #180]	; (80012a8 <showMainMenu+0x2d4>)
 80011f4:	f005 ff0e 	bl	8007014 <xTaskCreate>
 80011f8:	e07c      	b.n	80012f4 <showMainMenu+0x320>
											128,
											NULL,
											1,
											&timerMenu_handle);
				}
				else if (currentMenu == BACKLIGHT){
 80011fa:	4b25      	ldr	r3, [pc, #148]	; (8001290 <showMainMenu+0x2bc>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d10a      	bne.n	8001218 <showMainMenu+0x244>
					xTaskCreate(showBackLightMenu,
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <showMainMenu+0x2d8>)
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	2301      	movs	r3, #1
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2300      	movs	r3, #0
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	4928      	ldr	r1, [pc, #160]	; (80012b0 <showMainMenu+0x2dc>)
 8001210:	4828      	ldr	r0, [pc, #160]	; (80012b4 <showMainMenu+0x2e0>)
 8001212:	f005 feff 	bl	8007014 <xTaskCreate>
 8001216:	e06d      	b.n	80012f4 <showMainMenu+0x320>
											128,
											NULL,
											1,
											&backlightMenu_handle);
				}
				else if (currentMenu == CONTRAST){
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <showMainMenu+0x2bc>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d10a      	bne.n	8001236 <showMainMenu+0x262>
					xTaskCreate(showContrastMenu,
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <showMainMenu+0x2cc>)
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	2301      	movs	r3, #1
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2300      	movs	r3, #0
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	4922      	ldr	r1, [pc, #136]	; (80012b8 <showMainMenu+0x2e4>)
 800122e:	4823      	ldr	r0, [pc, #140]	; (80012bc <showMainMenu+0x2e8>)
 8001230:	f005 fef0 	bl	8007014 <xTaskCreate>
 8001234:	e05e      	b.n	80012f4 <showMainMenu+0x320>
											128,
											NULL,
											1,
											&timerMenu_handle);
				}
				else if (currentMenu == MCU_TEMP){
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <showMainMenu+0x2bc>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b04      	cmp	r3, #4
 800123c:	d10a      	bne.n	8001254 <showMainMenu+0x280>
					xTaskCreate(showMcuTempMenu,
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <showMainMenu+0x2ec>)
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	2301      	movs	r3, #1
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2300      	movs	r3, #0
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	491e      	ldr	r1, [pc, #120]	; (80012c4 <showMainMenu+0x2f0>)
 800124c:	481e      	ldr	r0, [pc, #120]	; (80012c8 <showMainMenu+0x2f4>)
 800124e:	f005 fee1 	bl	8007014 <xTaskCreate>
 8001252:	e04f      	b.n	80012f4 <showMainMenu+0x320>
											128,
											NULL,
											1,
											&mcuTempMenu_handle);
				}
				else if (currentMenu == HELP){
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <showMainMenu+0x2bc>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b05      	cmp	r3, #5
 800125a:	d13d      	bne.n	80012d8 <showMainMenu+0x304>
					xTaskCreate(showHelpMenu,
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <showMainMenu+0x2f8>)
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2301      	movs	r3, #1
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	4919      	ldr	r1, [pc, #100]	; (80012d0 <showMainMenu+0x2fc>)
 800126a:	481a      	ldr	r0, [pc, #104]	; (80012d4 <showMainMenu+0x300>)
 800126c:	f005 fed2 	bl	8007014 <xTaskCreate>
 8001270:	e040      	b.n	80012f4 <showMainMenu+0x320>
 8001272:	bf00      	nop
 8001274:	08009a14 	.word	0x08009a14
 8001278:	20000200 	.word	0x20000200
 800127c:	20000201 	.word	0x20000201
 8001280:	20000202 	.word	0x20000202
 8001284:	aaaaaaab 	.word	0xaaaaaaab
 8001288:	20000000 	.word	0x20000000
 800128c:	200001fc 	.word	0x200001fc
 8001290:	200001d4 	.word	0x200001d4
 8001294:	200001e0 	.word	0x200001e0
 8001298:	08009a20 	.word	0x08009a20
 800129c:	080013c5 	.word	0x080013c5
 80012a0:	200001f0 	.word	0x200001f0
 80012a4:	08009a2c 	.word	0x08009a2c
 80012a8:	08001a69 	.word	0x08001a69
 80012ac:	200001e4 	.word	0x200001e4
 80012b0:	08009a38 	.word	0x08009a38
 80012b4:	080016a5 	.word	0x080016a5
 80012b8:	08009a48 	.word	0x08009a48
 80012bc:	0800179d 	.word	0x0800179d
 80012c0:	200001dc 	.word	0x200001dc
 80012c4:	08009a58 	.word	0x08009a58
 80012c8:	08001321 	.word	0x08001321
 80012cc:	200001e8 	.word	0x200001e8
 80012d0:	08009a68 	.word	0x08009a68
 80012d4:	08001859 	.word	0x08001859
											128,
											NULL,
											1,
											&helpMenu_handle);
				}
				else if (currentMenu == REBOOT){
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <showMainMenu+0x33c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b06      	cmp	r3, #6
 80012de:	d109      	bne.n	80012f4 <showMainMenu+0x320>
					xTaskCreate(showRebootMenu,
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <showMainMenu+0x340>)
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	2301      	movs	r3, #1
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2300      	movs	r3, #0
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	490a      	ldr	r1, [pc, #40]	; (8001318 <showMainMenu+0x344>)
 80012ee:	480b      	ldr	r0, [pc, #44]	; (800131c <showMainMenu+0x348>)
 80012f0:	f005 fe90 	bl	8007014 <xTaskCreate>
											NULL,
											1,
											&rebootMenu_handle);
				}

				PCD8544_clearScreen();
 80012f4:	f000 ff28 	bl	8002148 <PCD8544_clearScreen>
				PCD8544_refreshScreen();
 80012f8:	f000 ff5a 	bl	80021b0 <PCD8544_refreshScreen>
				vTaskSuspend(NULL);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f006 f883 	bl	8007408 <vTaskSuspend>
				HAL_Delay(10);
 8001302:	200a      	movs	r0, #10
 8001304:	f001 fb80 	bl	8002a08 <HAL_Delay>
			}
		}

		PCD8544_clearScreen();
 8001308:	f000 ff1e 	bl	8002148 <PCD8544_clearScreen>
	for(;;){
 800130c:	e666      	b.n	8000fdc <showMainMenu+0x8>
 800130e:	bf00      	nop
 8001310:	200001d4 	.word	0x200001d4
 8001314:	200001ec 	.word	0x200001ec
 8001318:	08009a74 	.word	0x08009a74
 800131c:	08001989 	.word	0x08001989

08001320 <showMcuTempMenu>:
	}
}

void showMcuTempMenu(void *pvParameters){
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	char      tempBuffer[10];

	for(;;){

		/*---------------------Convert Temperature----------------------*/
		HAL_ADC_Start(&hadc1);
 8001328:	4822      	ldr	r0, [pc, #136]	; (80013b4 <showMcuTempMenu+0x94>)
 800132a:	f001 fc69 	bl	8002c00 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, MENU_REFRESH_TIME);
 800132e:	2164      	movs	r1, #100	; 0x64
 8001330:	4820      	ldr	r0, [pc, #128]	; (80013b4 <showMcuTempMenu+0x94>)
 8001332:	f001 fd3f 	bl	8002db4 <HAL_ADC_PollForConversion>
		adcValue = HAL_ADC_GetValue(&hadc1);
 8001336:	481f      	ldr	r0, [pc, #124]	; (80013b4 <showMcuTempMenu+0x94>)
 8001338:	f001 fe42 	bl	8002fc0 <HAL_ADC_GetValue>
 800133c:	61f8      	str	r0, [r7, #28]
		HAL_ADC_Stop(&hadc1);
 800133e:	481d      	ldr	r0, [pc, #116]	; (80013b4 <showMcuTempMenu+0x94>)
 8001340:	f001 fd0c 	bl	8002d5c <HAL_ADC_Stop>

		temp = (1500-adcValue)/4;
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800134a:	3304      	adds	r3, #4
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	61bb      	str	r3, [r7, #24]

		/*------------------------Draw Menu Items-----------------------*/
		PCD8544_GUI_displayMenuName("MCU TEMP");
 8001350:	4819      	ldr	r0, [pc, #100]	; (80013b8 <showMcuTempMenu+0x98>)
 8001352:	f001 f8c7 	bl	80024e4 <PCD8544_GUI_displayMenuName>

		sprintf(tempBuffer, "%d", temp);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4917      	ldr	r1, [pc, #92]	; (80013bc <showMcuTempMenu+0x9c>)
 800135e:	4618      	mov	r0, r3
 8001360:	f007 fdd4 	bl	8008f0c <siprintf>
		PCD8544_setFont(6);
 8001364:	2006      	movs	r0, #6
 8001366:	f000 fd23 	bl	8001db0 <PCD8544_setFont>
		PCD8544_printStringAlign(tempBuffer, 20, ALIGNMETN_CENTER);
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2202      	movs	r2, #2
 8001370:	2114      	movs	r1, #20
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fe94 	bl	80020a0 <PCD8544_printStringAlign>
		PCD8544_setFont(1);
 8001378:	2001      	movs	r0, #1
 800137a:	f000 fd19 	bl	8001db0 <PCD8544_setFont>

		PCD8544_refreshScreen();
 800137e:	f000 ff17 	bl	80021b0 <PCD8544_refreshScreen>

		/*-----------------------Handle button events--------------------*/
		if (xQueueReceive(pressedButtonQueue, &pressedButton, MENU_REFRESH_TIME) == pdPASS){
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <showMcuTempMenu+0xa0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f107 0117 	add.w	r1, r7, #23
 800138a:	2264      	movs	r2, #100	; 0x64
 800138c:	4618      	mov	r0, r3
 800138e:	f005 fb99 	bl	8006ac4 <xQueueReceive>
 8001392:	4603      	mov	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	d10a      	bne.n	80013ae <showMcuTempMenu+0x8e>
			if (pressedButton == RIGHT_BUTTON){
 8001398:	7dfb      	ldrb	r3, [r7, #23]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <showMcuTempMenu+0x8e>

			}
			else if (pressedButton == LEFT_BUTTON){
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d004      	beq.n	80013ae <showMcuTempMenu+0x8e>

			}
			else if (pressedButton == CENETR_BUTTON){
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d101      	bne.n	80013ae <showMcuTempMenu+0x8e>
				returnToMainMenu();
 80013aa:	f000 fbfb 	bl	8001ba4 <returnToMainMenu>
			}
		}

		PCD8544_clearScreen();
 80013ae:	f000 fecb 	bl	8002148 <PCD8544_clearScreen>
		HAL_ADC_Start(&hadc1);
 80013b2:	e7b9      	b.n	8001328 <showMcuTempMenu+0x8>
 80013b4:	2000009c 	.word	0x2000009c
 80013b8:	08009a80 	.word	0x08009a80
 80013bc:	08009a8c 	.word	0x08009a8c
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <showClockMenu>:
	}
}

void showClockMenu(void *pvParameters){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	; 0x30
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
	Buttons_e pressedButton;
	RTC_TimeTypeDef cTime;
	char            timeBuffer[10];
	uint8_t 				editCounter = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t					hour;
	uint8_t					minute;
	uint8_t					second;

	for (;;){
		HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
 80013d2:	f107 0320 	add.w	r3, r7, #32
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	48aa      	ldr	r0, [pc, #680]	; (8001684 <showClockMenu+0x2c0>)
 80013dc:	f003 f97c 	bl	80046d8 <HAL_RTC_GetTime>

		PCD8544_GUI_displayMenuName("CLOCK");
 80013e0:	48a9      	ldr	r0, [pc, #676]	; (8001688 <showClockMenu+0x2c4>)
 80013e2:	f001 f87f 	bl	80024e4 <PCD8544_GUI_displayMenuName>

		if (editCounter == 0){
 80013e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d11c      	bne.n	8001428 <showClockMenu+0x64>
			sprintf(timeBuffer, "%02d:%02d:%02d", cTime.Hours, cTime.Minutes, cTime.Seconds);
 80013ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013f2:	461a      	mov	r2, r3
 80013f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80013f8:	4619      	mov	r1, r3
 80013fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013fe:	f107 0014 	add.w	r0, r7, #20
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	460b      	mov	r3, r1
 8001406:	49a1      	ldr	r1, [pc, #644]	; (800168c <showClockMenu+0x2c8>)
 8001408:	f007 fd80 	bl	8008f0c <siprintf>
			PCD8544_setFont(4);
 800140c:	2004      	movs	r0, #4
 800140e:	f000 fccf 	bl	8001db0 <PCD8544_setFont>
			PCD8544_printStringAlign(timeBuffer, 25, ALIGNMETN_CENTER);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	2202      	movs	r2, #2
 8001418:	2119      	movs	r1, #25
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fe40 	bl	80020a0 <PCD8544_printStringAlign>
			PCD8544_setFont(1);
 8001420:	2001      	movs	r0, #1
 8001422:	f000 fcc5 	bl	8001db0 <PCD8544_setFont>
 8001426:	e08e      	b.n	8001546 <showClockMenu+0x182>
		}
		else {
			if (editCounter == 1){
 8001428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800142c:	2b01      	cmp	r3, #1
 800142e:	d12b      	bne.n	8001488 <showClockMenu+0xc4>
				char tempBuffer[3];
				sprintf(timeBuffer, "  :%02d:%02d", minute, second);
 8001430:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001434:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001438:	f107 0014 	add.w	r0, r7, #20
 800143c:	4994      	ldr	r1, [pc, #592]	; (8001690 <showClockMenu+0x2cc>)
 800143e:	f007 fd65 	bl	8008f0c <siprintf>
				PCD8544_setFont(4);
 8001442:	2004      	movs	r0, #4
 8001444:	f000 fcb4 	bl	8001db0 <PCD8544_setFont>
				PCD8544_printStringAlign(timeBuffer, 25, ALIGNMETN_CENTER);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2202      	movs	r2, #2
 800144e:	2119      	movs	r1, #25
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fe25 	bl	80020a0 <PCD8544_printStringAlign>
				sprintf(tempBuffer, "%02d", hour);
 8001456:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	498d      	ldr	r1, [pc, #564]	; (8001694 <showClockMenu+0x2d0>)
 8001460:	4618      	mov	r0, r3
 8001462:	f007 fd53 	bl	8008f0c <siprintf>
				PCD8544_setTextInvert(true);
 8001466:	2001      	movs	r0, #1
 8001468:	f000 fc8c 	bl	8001d84 <PCD8544_setTextInvert>
				PCD8544_printString(tempBuffer, 6, 25);
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	2219      	movs	r2, #25
 8001472:	2106      	movs	r1, #6
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fdf1 	bl	800205c <PCD8544_printString>
				PCD8544_setTextInvert(false);
 800147a:	2000      	movs	r0, #0
 800147c:	f000 fc82 	bl	8001d84 <PCD8544_setTextInvert>
				PCD8544_setFont(1);
 8001480:	2001      	movs	r0, #1
 8001482:	f000 fc95 	bl	8001db0 <PCD8544_setFont>
 8001486:	e05e      	b.n	8001546 <showClockMenu+0x182>
			}
			else if (editCounter == 2){
 8001488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800148c:	2b02      	cmp	r3, #2
 800148e:	d12b      	bne.n	80014e8 <showClockMenu+0x124>
				char tempBuffer[3];
				sprintf(timeBuffer, "%02d:  :%02d", hour, second);
 8001490:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001494:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001498:	f107 0014 	add.w	r0, r7, #20
 800149c:	497e      	ldr	r1, [pc, #504]	; (8001698 <showClockMenu+0x2d4>)
 800149e:	f007 fd35 	bl	8008f0c <siprintf>
				PCD8544_setFont(4);
 80014a2:	2004      	movs	r0, #4
 80014a4:	f000 fc84 	bl	8001db0 <PCD8544_setFont>
				PCD8544_printStringAlign(timeBuffer, 25, ALIGNMETN_CENTER);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2202      	movs	r2, #2
 80014ae:	2119      	movs	r1, #25
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fdf5 	bl	80020a0 <PCD8544_printStringAlign>
				sprintf(tempBuffer, "%02d", minute);
 80014b6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	4975      	ldr	r1, [pc, #468]	; (8001694 <showClockMenu+0x2d0>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f007 fd23 	bl	8008f0c <siprintf>
				PCD8544_setTextInvert(true);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f000 fc5c 	bl	8001d84 <PCD8544_setTextInvert>
				PCD8544_printString(tempBuffer, 33, 25);
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2219      	movs	r2, #25
 80014d2:	2121      	movs	r1, #33	; 0x21
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fdc1 	bl	800205c <PCD8544_printString>
				PCD8544_setTextInvert(false);
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 fc52 	bl	8001d84 <PCD8544_setTextInvert>
				PCD8544_setFont(1);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f000 fc65 	bl	8001db0 <PCD8544_setFont>
 80014e6:	e02e      	b.n	8001546 <showClockMenu+0x182>
			}
			else if (editCounter == 3){
 80014e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d12a      	bne.n	8001546 <showClockMenu+0x182>
				char tempBuffer[3];
				sprintf(timeBuffer, "%02d:%02d:  ", hour, minute);
 80014f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014f8:	f107 0014 	add.w	r0, r7, #20
 80014fc:	4967      	ldr	r1, [pc, #412]	; (800169c <showClockMenu+0x2d8>)
 80014fe:	f007 fd05 	bl	8008f0c <siprintf>
				PCD8544_setFont(4);
 8001502:	2004      	movs	r0, #4
 8001504:	f000 fc54 	bl	8001db0 <PCD8544_setFont>
				PCD8544_printStringAlign(timeBuffer, 25, ALIGNMETN_CENTER);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2202      	movs	r2, #2
 800150e:	2119      	movs	r1, #25
 8001510:	4618      	mov	r0, r3
 8001512:	f000 fdc5 	bl	80020a0 <PCD8544_printStringAlign>
				sprintf(tempBuffer, "%02d", second);
 8001516:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	495d      	ldr	r1, [pc, #372]	; (8001694 <showClockMenu+0x2d0>)
 8001520:	4618      	mov	r0, r3
 8001522:	f007 fcf3 	bl	8008f0c <siprintf>
				PCD8544_setTextInvert(true);
 8001526:	2001      	movs	r0, #1
 8001528:	f000 fc2c 	bl	8001d84 <PCD8544_setTextInvert>
				PCD8544_printString(tempBuffer, 60, 25);
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	2219      	movs	r2, #25
 8001532:	213c      	movs	r1, #60	; 0x3c
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fd91 	bl	800205c <PCD8544_printString>
				PCD8544_setTextInvert(false);
 800153a:	2000      	movs	r0, #0
 800153c:	f000 fc22 	bl	8001d84 <PCD8544_setTextInvert>
				PCD8544_setFont(1);
 8001540:	2001      	movs	r0, #1
 8001542:	f000 fc35 	bl	8001db0 <PCD8544_setFont>
			}
		}

		PCD8544_refreshScreen();
 8001546:	f000 fe33 	bl	80021b0 <PCD8544_refreshScreen>

		/*-----------------------Handle button events--------------------*/
		if (xQueueReceive(pressedButtonQueue, &pressedButton, MENU_REFRESH_TIME) == pdPASS){
 800154a:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <showClockMenu+0x2dc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8001552:	2264      	movs	r2, #100	; 0x64
 8001554:	4618      	mov	r0, r3
 8001556:	f005 fab5 	bl	8006ac4 <xQueueReceive>
 800155a:	4603      	mov	r3, r0
 800155c:	2b01      	cmp	r3, #1
 800155e:	f040 808d 	bne.w	800167c <showClockMenu+0x2b8>
			if (pressedButton == RIGHT_BUTTON){
 8001562:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001566:	2b00      	cmp	r3, #0
 8001568:	d132      	bne.n	80015d0 <showClockMenu+0x20c>

				if (editCounter == 1){
 800156a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800156e:	2b01      	cmp	r3, #1
 8001570:	d10c      	bne.n	800158c <showClockMenu+0x1c8>
					hour++;
 8001572:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001576:	3301      	adds	r3, #1
 8001578:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if (hour > 23){
 800157c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001580:	2b17      	cmp	r3, #23
 8001582:	d97b      	bls.n	800167c <showClockMenu+0x2b8>
						hour = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800158a:	e077      	b.n	800167c <showClockMenu+0x2b8>
					}
				}
				else if (editCounter == 2){
 800158c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001590:	2b02      	cmp	r3, #2
 8001592:	d10c      	bne.n	80015ae <showClockMenu+0x1ea>
					minute++;
 8001594:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001598:	3301      	adds	r3, #1
 800159a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					if (minute > 59){
 800159e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015a2:	2b3b      	cmp	r3, #59	; 0x3b
 80015a4:	d96a      	bls.n	800167c <showClockMenu+0x2b8>
						minute = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80015ac:	e066      	b.n	800167c <showClockMenu+0x2b8>
					}
				}
				else if (editCounter == 3){
 80015ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d162      	bne.n	800167c <showClockMenu+0x2b8>
					second++;
 80015b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015ba:	3301      	adds	r3, #1
 80015bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					if (second > 59){
 80015c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015c4:	2b3b      	cmp	r3, #59	; 0x3b
 80015c6:	d959      	bls.n	800167c <showClockMenu+0x2b8>
						second = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80015ce:	e055      	b.n	800167c <showClockMenu+0x2b8>
					}
				}
			}
			else if (pressedButton == LEFT_BUTTON){
 80015d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d14b      	bne.n	8001670 <showClockMenu+0x2ac>
				if (editCounter == 0){
 80015d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10b      	bne.n	80015f8 <showClockMenu+0x234>
					hour = cTime.Hours;
 80015e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					minute = cTime.Minutes;
 80015e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					second = cTime.Seconds;
 80015f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				}

				if (editCounter == 1){
 80015f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d10b      	bne.n	8001618 <showClockMenu+0x254>
					cTime.Hours = hour;
 8001600:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001604:	f887 3020 	strb.w	r3, [r7, #32]
					HAL_RTC_SetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	2200      	movs	r2, #0
 800160e:	4619      	mov	r1, r3
 8001610:	481c      	ldr	r0, [pc, #112]	; (8001684 <showClockMenu+0x2c0>)
 8001612:	f002 ffc9 	bl	80045a8 <HAL_RTC_SetTime>
 8001616:	e01e      	b.n	8001656 <showClockMenu+0x292>
				}
				else if (editCounter == 2){
 8001618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800161c:	2b02      	cmp	r3, #2
 800161e:	d10b      	bne.n	8001638 <showClockMenu+0x274>
					cTime.Minutes = minute;
 8001620:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001624:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					HAL_RTC_SetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
 8001628:	f107 0320 	add.w	r3, r7, #32
 800162c:	2200      	movs	r2, #0
 800162e:	4619      	mov	r1, r3
 8001630:	4814      	ldr	r0, [pc, #80]	; (8001684 <showClockMenu+0x2c0>)
 8001632:	f002 ffb9 	bl	80045a8 <HAL_RTC_SetTime>
 8001636:	e00e      	b.n	8001656 <showClockMenu+0x292>
				}
				else if (editCounter == 3){
 8001638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800163c:	2b03      	cmp	r3, #3
 800163e:	d10a      	bne.n	8001656 <showClockMenu+0x292>
					cTime.Seconds = second;
 8001640:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					HAL_RTC_SetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
 8001648:	f107 0320 	add.w	r3, r7, #32
 800164c:	2200      	movs	r2, #0
 800164e:	4619      	mov	r1, r3
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <showClockMenu+0x2c0>)
 8001652:	f002 ffa9 	bl	80045a8 <HAL_RTC_SetTime>
				}

				editCounter++;
 8001656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800165a:	3301      	adds	r3, #1
 800165c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (editCounter > 3){
 8001660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001664:	2b03      	cmp	r3, #3
 8001666:	d909      	bls.n	800167c <showClockMenu+0x2b8>
					editCounter = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800166e:	e005      	b.n	800167c <showClockMenu+0x2b8>
				}
			}
			else if (pressedButton == CENETR_BUTTON){
 8001670:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001674:	2b02      	cmp	r3, #2
 8001676:	d101      	bne.n	800167c <showClockMenu+0x2b8>
				returnToMainMenu();
 8001678:	f000 fa94 	bl	8001ba4 <returnToMainMenu>
			}
		}

		PCD8544_clearScreen();
 800167c:	f000 fd64 	bl	8002148 <PCD8544_clearScreen>
		HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
 8001680:	e6a7      	b.n	80013d2 <showClockMenu+0xe>
 8001682:	bf00      	nop
 8001684:	200000d8 	.word	0x200000d8
 8001688:	08009a90 	.word	0x08009a90
 800168c:	08009a98 	.word	0x08009a98
 8001690:	08009aa8 	.word	0x08009aa8
 8001694:	08009ab8 	.word	0x08009ab8
 8001698:	08009ac0 	.word	0x08009ac0
 800169c:	08009ad0 	.word	0x08009ad0
 80016a0:	200001fc 	.word	0x200001fc

080016a4 <showBackLightMenu>:
	}
}

void showBackLightMenu(void *pvParameters){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	6078      	str	r0, [r7, #4]
	Buttons_e pressedButton;

	for (;;){
		/*------------------------Draw Menu Items-----------------------*/
		PCD8544_GUI_displayMenuName("BACKLIGHT");
 80016ac:	4836      	ldr	r0, [pc, #216]	; (8001788 <showBackLightMenu+0xe4>)
 80016ae:	f000 ff19 	bl	80024e4 <PCD8544_GUI_displayMenuName>


		PCD8544_GUI_drawProgressBar(4, 17, 76, 25, (ceil(backLightValue+1)/10));
 80016b2:	4b36      	ldr	r3, [pc, #216]	; (800178c <showBackLightMenu+0xe8>)
 80016b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b8:	3301      	adds	r3, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fea2 	bl	8000404 <__aeabi_i2d>
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b32      	ldr	r3, [pc, #200]	; (8001790 <showBackLightMenu+0xec>)
 80016c6:	f7ff f831 	bl	800072c <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff f913 	bl	80008fc <__aeabi_d2uiz>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2319      	movs	r3, #25
 80016de:	224c      	movs	r2, #76	; 0x4c
 80016e0:	2111      	movs	r1, #17
 80016e2:	2004      	movs	r0, #4
 80016e4:	f000 fec4 	bl	8002470 <PCD8544_GUI_drawProgressBar>

		PCD8544_refreshScreen();
 80016e8:	f000 fd62 	bl	80021b0 <PCD8544_refreshScreen>

		/*-----------------------Handle button events--------------------*/
		if (xQueueReceive(pressedButtonQueue, &pressedButton, MENU_REFRESH_TIME) == pdPASS){
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <showBackLightMenu+0xf0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f107 010f 	add.w	r1, r7, #15
 80016f4:	2264      	movs	r2, #100	; 0x64
 80016f6:	4618      	mov	r0, r3
 80016f8:	f005 f9e4 	bl	8006ac4 <xQueueReceive>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d13e      	bne.n	8001780 <showBackLightMenu+0xdc>
			if (pressedButton == RIGHT_BUTTON){
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d116      	bne.n	8001736 <showBackLightMenu+0x92>
				if (backLightValue < 999){
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <showBackLightMenu+0xe8>)
 800170a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001712:	4293      	cmp	r3, r2
 8001714:	dc34      	bgt.n	8001780 <showBackLightMenu+0xdc>
					backLightValue += 100;
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <showBackLightMenu+0xe8>)
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	b29b      	uxth	r3, r3
 800171e:	3364      	adds	r3, #100	; 0x64
 8001720:	b29b      	uxth	r3, r3
 8001722:	b21a      	sxth	r2, r3
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <showBackLightMenu+0xe8>)
 8001726:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, backLightValue);
 8001728:	4b18      	ldr	r3, [pc, #96]	; (800178c <showBackLightMenu+0xe8>)
 800172a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <showBackLightMenu+0xf4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
 8001734:	e024      	b.n	8001780 <showBackLightMenu+0xdc>
				}
			}
			else if (pressedButton == LEFT_BUTTON){
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d11c      	bne.n	8001776 <showBackLightMenu+0xd2>
				if (backLightValue > 0){
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <showBackLightMenu+0xe8>)
 800173e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001742:	2b00      	cmp	r3, #0
 8001744:	dd1c      	ble.n	8001780 <showBackLightMenu+0xdc>
					backLightValue -= 100;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <showBackLightMenu+0xe8>)
 8001748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174c:	b29b      	uxth	r3, r3
 800174e:	3b64      	subs	r3, #100	; 0x64
 8001750:	b29b      	uxth	r3, r3
 8001752:	b21a      	sxth	r2, r3
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <showBackLightMenu+0xe8>)
 8001756:	801a      	strh	r2, [r3, #0]
					if (backLightValue < 0) backLightValue = 0;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <showBackLightMenu+0xe8>)
 800175a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175e:	2b00      	cmp	r3, #0
 8001760:	da02      	bge.n	8001768 <showBackLightMenu+0xc4>
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <showBackLightMenu+0xe8>)
 8001764:	2200      	movs	r2, #0
 8001766:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, backLightValue);
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <showBackLightMenu+0xe8>)
 800176a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <showBackLightMenu+0xf4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
 8001774:	e004      	b.n	8001780 <showBackLightMenu+0xdc>
				}
			}
			else if (pressedButton == CENETR_BUTTON){
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d101      	bne.n	8001780 <showBackLightMenu+0xdc>
				returnToMainMenu();
 800177c:	f000 fa12 	bl	8001ba4 <returnToMainMenu>
			}
		}
		PCD8544_clearScreen();
 8001780:	f000 fce2 	bl	8002148 <PCD8544_clearScreen>
		PCD8544_GUI_displayMenuName("BACKLIGHT");
 8001784:	e792      	b.n	80016ac <showBackLightMenu+0x8>
 8001786:	bf00      	nop
 8001788:	08009ae0 	.word	0x08009ae0
 800178c:	2000001c 	.word	0x2000001c
 8001790:	40240000 	.word	0x40240000
 8001794:	200001fc 	.word	0x200001fc
 8001798:	20000144 	.word	0x20000144

0800179c <showContrastMenu>:
	}
}

void showContrastMenu(void *pvParameters){
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	6078      	str	r0, [r7, #4]
	Buttons_e pressedButton;
	contrastValue = PCD8544_getContrast();
 80017a4:	f000 fe5a 	bl	800245c <PCD8544_getContrast>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <showContrastMenu+0xb0>)
 80017ae:	701a      	strb	r2, [r3, #0]

	for (;;){
		/*------------------------Draw Menu Items-----------------------*/
		PCD8544_GUI_displayMenuName("CONTRAST");
 80017b0:	4827      	ldr	r0, [pc, #156]	; (8001850 <showContrastMenu+0xb4>)
 80017b2:	f000 fe97 	bl	80024e4 <PCD8544_GUI_displayMenuName>

		PCD8544_GUI_drawProgressBar(4, 17, 76, 25, (contrastValue-50)*5);
 80017b6:	4b25      	ldr	r3, [pc, #148]	; (800184c <showContrastMenu+0xb0>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	0092      	lsls	r2, r2, #2
 80017be:	4413      	add	r3, r2
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	3306      	adds	r3, #6
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2319      	movs	r3, #25
 80017ca:	224c      	movs	r2, #76	; 0x4c
 80017cc:	2111      	movs	r1, #17
 80017ce:	2004      	movs	r0, #4
 80017d0:	f000 fe4e 	bl	8002470 <PCD8544_GUI_drawProgressBar>

		PCD8544_refreshScreen();
 80017d4:	f000 fcec 	bl	80021b0 <PCD8544_refreshScreen>

		/*-----------------------Handle button events--------------------*/

		if (xQueueReceive(pressedButtonQueue, &pressedButton, MENU_REFRESH_TIME) == pdPASS){
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <showContrastMenu+0xb8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f107 010f 	add.w	r1, r7, #15
 80017e0:	2264      	movs	r2, #100	; 0x64
 80017e2:	4618      	mov	r0, r3
 80017e4:	f005 f96e 	bl	8006ac4 <xQueueReceive>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d12a      	bne.n	8001844 <showContrastMenu+0xa8>
			if (pressedButton == RIGHT_BUTTON){
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10f      	bne.n	8001814 <showContrastMenu+0x78>
				if (contrastValue < 70){
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <showContrastMenu+0xb0>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b45      	cmp	r3, #69	; 0x45
 80017fa:	d823      	bhi.n	8001844 <showContrastMenu+0xa8>
					contrastValue += 1;
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <showContrastMenu+0xb0>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <showContrastMenu+0xb0>)
 8001806:	701a      	strb	r2, [r3, #0]
					PCD8544_setContrast(contrastValue);
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <showContrastMenu+0xb0>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fa97 	bl	8001d40 <PCD8544_setContrast>
 8001812:	e017      	b.n	8001844 <showContrastMenu+0xa8>
				}
			}
			else if (pressedButton == LEFT_BUTTON){
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d10f      	bne.n	800183a <showContrastMenu+0x9e>
				if (contrastValue > 50){
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <showContrastMenu+0xb0>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b32      	cmp	r3, #50	; 0x32
 8001820:	d910      	bls.n	8001844 <showContrastMenu+0xa8>
					contrastValue -= 1;
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <showContrastMenu+0xb0>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	3b01      	subs	r3, #1
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <showContrastMenu+0xb0>)
 800182c:	701a      	strb	r2, [r3, #0]
					PCD8544_setContrast(contrastValue);
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <showContrastMenu+0xb0>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fa84 	bl	8001d40 <PCD8544_setContrast>
 8001838:	e004      	b.n	8001844 <showContrastMenu+0xa8>
				}
			}
			else if (pressedButton == CENETR_BUTTON){
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d101      	bne.n	8001844 <showContrastMenu+0xa8>
				returnToMainMenu();
 8001840:	f000 f9b0 	bl	8001ba4 <returnToMainMenu>
			}
		}
		PCD8544_clearScreen();
 8001844:	f000 fc80 	bl	8002148 <PCD8544_clearScreen>
		PCD8544_GUI_displayMenuName("CONTRAST");
 8001848:	e7b2      	b.n	80017b0 <showContrastMenu+0x14>
 800184a:	bf00      	nop
 800184c:	20000203 	.word	0x20000203
 8001850:	08009aec 	.word	0x08009aec
 8001854:	200001fc 	.word	0x200001fc

08001858 <showHelpMenu>:
	}
}

void showHelpMenu(void *pvParameters){
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	Buttons_e pressedButton;
	uint8_t helppageNumber = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]

	for (;;){
		/*------------------------Draw Menu Items-----------------------*/
		PCD8544_GUI_displayMenuName("HELP");
 8001864:	483e      	ldr	r0, [pc, #248]	; (8001960 <showHelpMenu+0x108>)
 8001866:	f000 fe3d 	bl	80024e4 <PCD8544_GUI_displayMenuName>

		PCD8544_setFont(5);
 800186a:	2005      	movs	r0, #5
 800186c:	f000 faa0 	bl	8001db0 <PCD8544_setFont>

		char tempBuffer[2];
		sprintf(tempBuffer, "%d", helppageNumber);
 8001870:	7bfa      	ldrb	r2, [r7, #15]
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	493b      	ldr	r1, [pc, #236]	; (8001964 <showHelpMenu+0x10c>)
 8001878:	4618      	mov	r0, r3
 800187a:	f007 fb47 	bl	8008f0c <siprintf>
		PCD8544_printStringAlign(tempBuffer, 40, ALIGNMETN_RIGHT);
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	2200      	movs	r2, #0
 8001884:	2128      	movs	r1, #40	; 0x28
 8001886:	4618      	mov	r0, r3
 8001888:	f000 fc0a 	bl	80020a0 <PCD8544_printStringAlign>

		if (helppageNumber == 0){
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d105      	bne.n	800189e <showHelpMenu+0x46>
			PCD8544_printStringAlign("Enter or exit menus pressing the middle button.", 14, ALIGNMETN_LEFT);
 8001892:	2201      	movs	r2, #1
 8001894:	210e      	movs	r1, #14
 8001896:	4834      	ldr	r0, [pc, #208]	; (8001968 <showHelpMenu+0x110>)
 8001898:	f000 fc02 	bl	80020a0 <PCD8544_printStringAlign>
 800189c:	e034      	b.n	8001908 <showHelpMenu+0xb0>
		}
		else if (helppageNumber == 1){
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <showHelpMenu+0x58>
			PCD8544_printStringAlign("Use left button to edit time and right one to adjust time.", 14, ALIGNMETN_LEFT);
 80018a4:	2201      	movs	r2, #1
 80018a6:	210e      	movs	r1, #14
 80018a8:	4830      	ldr	r0, [pc, #192]	; (800196c <showHelpMenu+0x114>)
 80018aa:	f000 fbf9 	bl	80020a0 <PCD8544_printStringAlign>
 80018ae:	e02b      	b.n	8001908 <showHelpMenu+0xb0>
		}
		else if (helppageNumber == 2){
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d105      	bne.n	80018c2 <showHelpMenu+0x6a>
			PCD8544_printStringAlign("Use right and left buttons to start/stop timer.", 14, ALIGNMETN_LEFT);
 80018b6:	2201      	movs	r2, #1
 80018b8:	210e      	movs	r1, #14
 80018ba:	482d      	ldr	r0, [pc, #180]	; (8001970 <showHelpMenu+0x118>)
 80018bc:	f000 fbf0 	bl	80020a0 <PCD8544_printStringAlign>
 80018c0:	e022      	b.n	8001908 <showHelpMenu+0xb0>
		}
		else if (helppageNumber == 3){
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d105      	bne.n	80018d4 <showHelpMenu+0x7c>
			PCD8544_printStringAlign("Press right button to increase backlight and left one to decrease it.", 14, ALIGNMETN_LEFT);
 80018c8:	2201      	movs	r2, #1
 80018ca:	210e      	movs	r1, #14
 80018cc:	4829      	ldr	r0, [pc, #164]	; (8001974 <showHelpMenu+0x11c>)
 80018ce:	f000 fbe7 	bl	80020a0 <PCD8544_printStringAlign>
 80018d2:	e019      	b.n	8001908 <showHelpMenu+0xb0>
		}
		else if (helppageNumber == 4){
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d105      	bne.n	80018e6 <showHelpMenu+0x8e>
			PCD8544_printStringAlign("Do the same to adjust contrast.", 14, ALIGNMETN_LEFT);
 80018da:	2201      	movs	r2, #1
 80018dc:	210e      	movs	r1, #14
 80018de:	4826      	ldr	r0, [pc, #152]	; (8001978 <showHelpMenu+0x120>)
 80018e0:	f000 fbde 	bl	80020a0 <PCD8544_printStringAlign>
 80018e4:	e010      	b.n	8001908 <showHelpMenu+0xb0>
		}
		else if (helppageNumber == 5){
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d105      	bne.n	80018f8 <showHelpMenu+0xa0>
			PCD8544_printStringAlign("Press the left button to rebbot when selected.", 14, ALIGNMETN_LEFT);
 80018ec:	2201      	movs	r2, #1
 80018ee:	210e      	movs	r1, #14
 80018f0:	4822      	ldr	r0, [pc, #136]	; (800197c <showHelpMenu+0x124>)
 80018f2:	f000 fbd5 	bl	80020a0 <PCD8544_printStringAlign>
 80018f6:	e007      	b.n	8001908 <showHelpMenu+0xb0>
		}
		else if (helppageNumber == 6){
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d104      	bne.n	8001908 <showHelpMenu+0xb0>
			PCD8544_printStringAlign("The system automatically restarts in times of hard fault.", 14, ALIGNMETN_LEFT);
 80018fe:	2201      	movs	r2, #1
 8001900:	210e      	movs	r1, #14
 8001902:	481f      	ldr	r0, [pc, #124]	; (8001980 <showHelpMenu+0x128>)
 8001904:	f000 fbcc 	bl	80020a0 <PCD8544_printStringAlign>
		}
		PCD8544_setFont(1);
 8001908:	2001      	movs	r0, #1
 800190a:	f000 fa51 	bl	8001db0 <PCD8544_setFont>
		PCD8544_refreshScreen();
 800190e:	f000 fc4f 	bl	80021b0 <PCD8544_refreshScreen>

		/*-----------------------Handle button events--------------------*/
		if (xQueueReceive(pressedButtonQueue, &pressedButton, MENU_REFRESH_TIME) == pdPASS){
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <showHelpMenu+0x12c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f107 010e 	add.w	r1, r7, #14
 800191a:	2264      	movs	r2, #100	; 0x64
 800191c:	4618      	mov	r0, r3
 800191e:	f005 f8d1 	bl	8006ac4 <xQueueReceive>
 8001922:	4603      	mov	r3, r0
 8001924:	2b01      	cmp	r3, #1
 8001926:	d118      	bne.n	800195a <showHelpMenu+0x102>
			if (pressedButton == CENETR_BUTTON){
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d102      	bne.n	8001934 <showHelpMenu+0xdc>
				returnToMainMenu();
 800192e:	f000 f939 	bl	8001ba4 <returnToMainMenu>
 8001932:	e012      	b.n	800195a <showHelpMenu+0x102>
			}
			else if (pressedButton == LEFT_BUTTON){
 8001934:	7bbb      	ldrb	r3, [r7, #14]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d106      	bne.n	8001948 <showHelpMenu+0xf0>
				if (helppageNumber > 0){
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00c      	beq.n	800195a <showHelpMenu+0x102>
					helppageNumber--;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	3b01      	subs	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	e008      	b.n	800195a <showHelpMenu+0x102>
				}
			}
			else if (pressedButton == RIGHT_BUTTON){
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d105      	bne.n	800195a <showHelpMenu+0x102>
				if (helppageNumber < 6){
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b05      	cmp	r3, #5
 8001952:	d802      	bhi.n	800195a <showHelpMenu+0x102>
					helppageNumber++;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	3301      	adds	r3, #1
 8001958:	73fb      	strb	r3, [r7, #15]
				}
			}
		}

		PCD8544_clearScreen();
 800195a:	f000 fbf5 	bl	8002148 <PCD8544_clearScreen>
	for (;;){
 800195e:	e781      	b.n	8001864 <showHelpMenu+0xc>
 8001960:	08009af8 	.word	0x08009af8
 8001964:	08009a8c 	.word	0x08009a8c
 8001968:	08009b00 	.word	0x08009b00
 800196c:	08009b30 	.word	0x08009b30
 8001970:	08009b6c 	.word	0x08009b6c
 8001974:	08009b9c 	.word	0x08009b9c
 8001978:	08009be4 	.word	0x08009be4
 800197c:	08009c04 	.word	0x08009c04
 8001980:	08009c34 	.word	0x08009c34
 8001984:	200001fc 	.word	0x200001fc

08001988 <showRebootMenu>:
	}
}

void showRebootMenu(void *pvParameters){
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	Buttons_e pressedButton;
	bool 			rebootState = false;
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]

	for (;;){
		/*------------------------Draw Menu Items-----------------------*/
		PCD8544_GUI_displayMenuName("REBOOT");
 8001994:	4830      	ldr	r0, [pc, #192]	; (8001a58 <showRebootMenu+0xd0>)
 8001996:	f000 fda5 	bl	80024e4 <PCD8544_GUI_displayMenuName>

		if (rebootState == false){
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	f083 0301 	eor.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d010      	beq.n	80019c8 <showRebootMenu+0x40>
			PCD8544_printString("YES", 12, 25);
 80019a6:	2219      	movs	r2, #25
 80019a8:	210c      	movs	r1, #12
 80019aa:	482c      	ldr	r0, [pc, #176]	; (8001a5c <showRebootMenu+0xd4>)
 80019ac:	f000 fb56 	bl	800205c <PCD8544_printString>
			PCD8544_setTextInvert(true);
 80019b0:	2001      	movs	r0, #1
 80019b2:	f000 f9e7 	bl	8001d84 <PCD8544_setTextInvert>
			PCD8544_printString("NO", 57, 25);
 80019b6:	2219      	movs	r2, #25
 80019b8:	2139      	movs	r1, #57	; 0x39
 80019ba:	4829      	ldr	r0, [pc, #164]	; (8001a60 <showRebootMenu+0xd8>)
 80019bc:	f000 fb4e 	bl	800205c <PCD8544_printString>
			PCD8544_setTextInvert(false);
 80019c0:	2000      	movs	r0, #0
 80019c2:	f000 f9df 	bl	8001d84 <PCD8544_setTextInvert>
 80019c6:	e012      	b.n	80019ee <showRebootMenu+0x66>
		}
		else if (rebootState == true){
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00f      	beq.n	80019ee <showRebootMenu+0x66>
			PCD8544_setTextInvert(true);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f000 f9d8 	bl	8001d84 <PCD8544_setTextInvert>
			PCD8544_printString("YES", 12, 25);
 80019d4:	2219      	movs	r2, #25
 80019d6:	210c      	movs	r1, #12
 80019d8:	4820      	ldr	r0, [pc, #128]	; (8001a5c <showRebootMenu+0xd4>)
 80019da:	f000 fb3f 	bl	800205c <PCD8544_printString>
			PCD8544_setTextInvert(false);
 80019de:	2000      	movs	r0, #0
 80019e0:	f000 f9d0 	bl	8001d84 <PCD8544_setTextInvert>
			PCD8544_printString("NO", 57, 25);
 80019e4:	2219      	movs	r2, #25
 80019e6:	2139      	movs	r1, #57	; 0x39
 80019e8:	481d      	ldr	r0, [pc, #116]	; (8001a60 <showRebootMenu+0xd8>)
 80019ea:	f000 fb37 	bl	800205c <PCD8544_printString>
		}

		PCD8544_drawVerticalLine(42, 25, 6);
 80019ee:	2206      	movs	r2, #6
 80019f0:	2119      	movs	r1, #25
 80019f2:	202a      	movs	r0, #42	; 0x2a
 80019f4:	f000 fcac 	bl	8002350 <PCD8544_drawVerticalLine>

		PCD8544_refreshScreen();
 80019f8:	f000 fbda 	bl	80021b0 <PCD8544_refreshScreen>

		/*-----------------------Handle button events--------------------*/
		if (xQueueReceive(pressedButtonQueue, &pressedButton, MENU_REFRESH_TIME) == pdPASS){
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <showRebootMenu+0xdc>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f107 010e 	add.w	r1, r7, #14
 8001a04:	2264      	movs	r2, #100	; 0x64
 8001a06:	4618      	mov	r0, r3
 8001a08:	f005 f85c 	bl	8006ac4 <xQueueReceive>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d11f      	bne.n	8001a52 <showRebootMenu+0xca>
			 if (pressedButton == RIGHT_BUTTON){
 8001a12:	7bbb      	ldrb	r3, [r7, #14]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10e      	bne.n	8001a36 <showRebootMenu+0xae>
				 rebootState = !rebootState;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf14      	ite	ne
 8001a1e:	2301      	movne	r3, #1
 8001a20:	2300      	moveq	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f083 0301 	eor.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e00d      	b.n	8001a52 <showRebootMenu+0xca>
			 }
			 else if (pressedButton == LEFT_BUTTON){
 8001a36:	7bbb      	ldrb	r3, [r7, #14]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d105      	bne.n	8001a48 <showRebootMenu+0xc0>
				 if (rebootState == true){
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <showRebootMenu+0xca>
					 HAL_NVIC_SystemReset();
 8001a42:	f001 fd52 	bl	80034ea <HAL_NVIC_SystemReset>
 8001a46:	e004      	b.n	8001a52 <showRebootMenu+0xca>
				 }
			 }
			 else if (pressedButton == CENETR_BUTTON){
 8001a48:	7bbb      	ldrb	r3, [r7, #14]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d101      	bne.n	8001a52 <showRebootMenu+0xca>
				 returnToMainMenu();
 8001a4e:	f000 f8a9 	bl	8001ba4 <returnToMainMenu>
			 }
		}
		PCD8544_clearScreen();
 8001a52:	f000 fb79 	bl	8002148 <PCD8544_clearScreen>
		PCD8544_GUI_displayMenuName("REBOOT");
 8001a56:	e79d      	b.n	8001994 <showRebootMenu+0xc>
 8001a58:	08009c70 	.word	0x08009c70
 8001a5c:	08009c78 	.word	0x08009c78
 8001a60:	08009c7c 	.word	0x08009c7c
 8001a64:	200001fc 	.word	0x200001fc

08001a68 <showTimerMenu>:
	}
}

void showTimerMenu(void *pvParameters){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	6078      	str	r0, [r7, #4]
	Buttons_e pressedButton;
	char			timerBuffer[10];

	for (;;){
		if (timerMenuCentiSeconds >= 100){
 8001a70:	4b40      	ldr	r3, [pc, #256]	; (8001b74 <showTimerMenu+0x10c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b63      	cmp	r3, #99	; 0x63
 8001a78:	d922      	bls.n	8001ac0 <showTimerMenu+0x58>
			timerMenuCentiSeconds = 0;
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <showTimerMenu+0x10c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
			timerMenuSeconds++;
 8001a80:	4b3d      	ldr	r3, [pc, #244]	; (8001b78 <showTimerMenu+0x110>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <showTimerMenu+0x110>)
 8001a8a:	701a      	strb	r2, [r3, #0]
			if (timerMenuSeconds >= 60){
 8001a8c:	4b3a      	ldr	r3, [pc, #232]	; (8001b78 <showTimerMenu+0x110>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b3b      	cmp	r3, #59	; 0x3b
 8001a92:	d915      	bls.n	8001ac0 <showTimerMenu+0x58>
				timerMenuSeconds = 0;
 8001a94:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <showTimerMenu+0x110>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
				timerMenuMinutes++;
 8001a9a:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <showTimerMenu+0x114>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <showTimerMenu+0x114>)
 8001aa4:	701a      	strb	r2, [r3, #0]
				if (timerMenuMinutes >= 60){
 8001aa6:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <showTimerMenu+0x114>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b3b      	cmp	r3, #59	; 0x3b
 8001aac:	d908      	bls.n	8001ac0 <showTimerMenu+0x58>
					timerMenuCentiSeconds = 0;
 8001aae:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <showTimerMenu+0x10c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
					timerMenuSeconds = 0;
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <showTimerMenu+0x110>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
					timerMenuMinutes = 0;
 8001aba:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <showTimerMenu+0x114>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		/*------------------------Draw Menu Items-----------------------*/
		PCD8544_GUI_displayMenuName("TIMER");
 8001ac0:	482f      	ldr	r0, [pc, #188]	; (8001b80 <showTimerMenu+0x118>)
 8001ac2:	f000 fd0f 	bl	80024e4 <PCD8544_GUI_displayMenuName>

		sprintf(timerBuffer, "%02d:%02d:%02d", timerMenuMinutes, timerMenuSeconds, timerMenuCentiSeconds);
 8001ac6:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <showTimerMenu+0x114>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <showTimerMenu+0x110>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <showTimerMenu+0x10c>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f107 000c 	add.w	r0, r7, #12
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4928      	ldr	r1, [pc, #160]	; (8001b84 <showTimerMenu+0x11c>)
 8001ae2:	f007 fa13 	bl	8008f0c <siprintf>
		PCD8544_setFont(4);
 8001ae6:	2004      	movs	r0, #4
 8001ae8:	f000 f962 	bl	8001db0 <PCD8544_setFont>
		PCD8544_printStringAlign(timerBuffer, 25, ALIGNMETN_CENTER);
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	2202      	movs	r2, #2
 8001af2:	2119      	movs	r1, #25
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 fad3 	bl	80020a0 <PCD8544_printStringAlign>
		PCD8544_setFont(1);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f000 f958 	bl	8001db0 <PCD8544_setFont>
		PCD8544_refreshScreen();
 8001b00:	f000 fb56 	bl	80021b0 <PCD8544_refreshScreen>

		/*-----------------------Handle button events--------------------*/
		if (xQueueReceive(pressedButtonQueue, &pressedButton, pdMS_TO_TICKS(10)) == pdPASS){
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <showTimerMenu+0x120>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f107 0117 	add.w	r1, r7, #23
 8001b0c:	220a      	movs	r2, #10
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 ffd8 	bl	8006ac4 <xQueueReceive>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d128      	bne.n	8001b6c <showTimerMenu+0x104>
				if (pressedButton == RIGHT_BUTTON){
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10d      	bne.n	8001b3c <showTimerMenu+0xd4>
					if (HAL_TIM_Base_GetState(&htim3) == HAL_TIM_STATE_BUSY){
 8001b20:	481a      	ldr	r0, [pc, #104]	; (8001b8c <showTimerMenu+0x124>)
 8001b22:	f004 f8f6 	bl	8005d12 <HAL_TIM_Base_GetState>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d103      	bne.n	8001b34 <showTimerMenu+0xcc>
						HAL_TIM_Base_Stop_IT(&htim3);
 8001b2c:	4817      	ldr	r0, [pc, #92]	; (8001b8c <showTimerMenu+0x124>)
 8001b2e:	f003 fd13 	bl	8005558 <HAL_TIM_Base_Stop_IT>
 8001b32:	e01b      	b.n	8001b6c <showTimerMenu+0x104>
					}
					else {
						HAL_TIM_Base_Start_IT(&htim3);
 8001b34:	4815      	ldr	r0, [pc, #84]	; (8001b8c <showTimerMenu+0x124>)
 8001b36:	f003 fcbd 	bl	80054b4 <HAL_TIM_Base_Start_IT>
 8001b3a:	e017      	b.n	8001b6c <showTimerMenu+0x104>
					}
				}
				else if (pressedButton == LEFT_BUTTON){
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d10f      	bne.n	8001b62 <showTimerMenu+0xfa>
					if (HAL_TIM_Base_GetState(&htim3) != HAL_TIM_STATE_BUSY){
 8001b42:	4812      	ldr	r0, [pc, #72]	; (8001b8c <showTimerMenu+0x124>)
 8001b44:	f004 f8e5 	bl	8005d12 <HAL_TIM_Base_GetState>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d00e      	beq.n	8001b6c <showTimerMenu+0x104>
						timerMenuCentiSeconds = 0;
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <showTimerMenu+0x10c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
						timerMenuSeconds = 0;
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <showTimerMenu+0x110>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
						timerMenuMinutes = 0;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <showTimerMenu+0x114>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
 8001b60:	e004      	b.n	8001b6c <showTimerMenu+0x104>
					}
				}
				else if (pressedButton == CENETR_BUTTON){
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d101      	bne.n	8001b6c <showTimerMenu+0x104>
					returnToMainMenu();
 8001b68:	f000 f81c 	bl	8001ba4 <returnToMainMenu>
				}
		}
		PCD8544_clearScreen();
 8001b6c:	f000 faec 	bl	8002148 <PCD8544_clearScreen>
		if (timerMenuCentiSeconds >= 100){
 8001b70:	e77e      	b.n	8001a70 <showTimerMenu+0x8>
 8001b72:	bf00      	nop
 8001b74:	20000206 	.word	0x20000206
 8001b78:	20000204 	.word	0x20000204
 8001b7c:	20000205 	.word	0x20000205
 8001b80:	08009c80 	.word	0x08009c80
 8001b84:	08009a98 	.word	0x08009a98
 8001b88:	200001fc 	.word	0x200001fc
 8001b8c:	2000018c 	.word	0x2000018c

08001b90 <refreshIwdg>:
	}
}


void refreshIwdg(){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <refreshIwdg+0x10>)
 8001b96:	f001 fea2 	bl	80038de <HAL_IWDG_Refresh>
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200000cc 	.word	0x200000cc

08001ba4 <returnToMainMenu>:

/*---------------------------------------------------*/
void returnToMainMenu(){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	PCD8544_clearScreen();
 8001ba8:	f000 face 	bl	8002148 <PCD8544_clearScreen>
	PCD8544_refreshScreen();
 8001bac:	f000 fb00 	bl	80021b0 <PCD8544_refreshScreen>
	vTaskResume(mainMenu_handle);
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <returnToMainMenu+0x20>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f005 fcd7 	bl	8007568 <vTaskResume>
	vTaskDelete(NULL);
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f005 fb7e 	bl	80072bc <vTaskDelete>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200001d8 	.word	0x200001d8

08001bc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d102      	bne.n	8001be0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8001bda:	f000 fef9 	bl	80029d0 <HAL_IncTick>
  	timerMenuCentiSeconds++;
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bde:	e00b      	b.n	8001bf8 <HAL_TIM_PeriodElapsedCallback+0x30>
  else if (htim->Instance == TIM3){
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d106      	bne.n	8001bf8 <HAL_TIM_PeriodElapsedCallback+0x30>
  	timerMenuCentiSeconds++;
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001bf6:	701a      	strb	r2, [r3, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40012c00 	.word	0x40012c00
 8001c04:	40000400 	.word	0x40000400
 8001c08:	20000206 	.word	0x20000206

08001c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c10:	b672      	cpsid	i
}
 8001c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <Error_Handler+0x8>
	...

08001c18 <PCD8544_sendData>:
uint8_t _contrast;
uint8_t size_x;
uint8_t size_y;
uint8_t font = 1;

void PCD8544_sendData(uint8_t val){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&PCD8544_DRIVER_SPI, &val, 1, 10);
 8001c22:	1df9      	adds	r1, r7, #7
 8001c24:	230a      	movs	r3, #10
 8001c26:	2201      	movs	r2, #1
 8001c28:	4803      	ldr	r0, [pc, #12]	; (8001c38 <PCD8544_sendData+0x20>)
 8001c2a:	f003 fa09 	bl	8005040 <HAL_SPI_Transmit>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200000ec 	.word	0x200000ec

08001c3c <PCD8544_command>:

void PCD8544_command(uint8_t data){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PCD8544_DCPORT, PCD8544_DCPIN, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2110      	movs	r1, #16
 8001c4a:	480a      	ldr	r0, [pc, #40]	; (8001c74 <PCD8544_command+0x38>)
 8001c4c:	f001 fded 	bl	800382a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PCD8544_CEPORT, PCD8544_CEPIN, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2140      	movs	r1, #64	; 0x40
 8001c54:	4807      	ldr	r0, [pc, #28]	; (8001c74 <PCD8544_command+0x38>)
 8001c56:	f001 fde8 	bl	800382a <HAL_GPIO_WritePin>
	PCD8544_sendData(data);
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ffdb 	bl	8001c18 <PCD8544_sendData>
	HAL_GPIO_WritePin(PCD8544_CEPORT, PCD8544_CEPIN, GPIO_PIN_SET);
 8001c62:	2201      	movs	r2, #1
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	4803      	ldr	r0, [pc, #12]	; (8001c74 <PCD8544_command+0x38>)
 8001c68:	f001 fddf 	bl	800382a <HAL_GPIO_WritePin>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40010800 	.word	0x40010800

08001c78 <PCD8544_data>:

void PCD8544_data(uint8_t data) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PCD8544_DCPORT, PCD8544_DCPIN, GPIO_PIN_SET);
 8001c82:	2201      	movs	r2, #1
 8001c84:	2110      	movs	r1, #16
 8001c86:	480a      	ldr	r0, [pc, #40]	; (8001cb0 <PCD8544_data+0x38>)
 8001c88:	f001 fdcf 	bl	800382a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PCD8544_CEPORT, PCD8544_CEPIN, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2140      	movs	r1, #64	; 0x40
 8001c90:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <PCD8544_data+0x38>)
 8001c92:	f001 fdca 	bl	800382a <HAL_GPIO_WritePin>
	PCD8544_sendData(data);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ffbd 	bl	8001c18 <PCD8544_sendData>
	HAL_GPIO_WritePin(PCD8544_CEPORT, PCD8544_CEPIN, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2140      	movs	r1, #64	; 0x40
 8001ca2:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <PCD8544_data+0x38>)
 8001ca4:	f001 fdc1 	bl	800382a <HAL_GPIO_WritePin>
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40010800 	.word	0x40010800

08001cb4 <PCD8544_init>:

void PCD8544_init(uint8_t contrast){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PCD8544_CEPORT, PCD8544_CEPIN, GPIO_PIN_SET);
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2140      	movs	r1, #64	; 0x40
 8001cc2:	481b      	ldr	r0, [pc, #108]	; (8001d30 <PCD8544_init+0x7c>)
 8001cc4:	f001 fdb1 	bl	800382a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PCD8544_RSTPORT, PCD8544_RSTPIN, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2101      	movs	r1, #1
 8001ccc:	4819      	ldr	r0, [pc, #100]	; (8001d34 <PCD8544_init+0x80>)
 8001cce:	f001 fdac 	bl	800382a <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f000 fe98 	bl	8002a08 <HAL_Delay>
  HAL_GPIO_WritePin(PCD8544_RSTPORT, PCD8544_RSTPIN, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4815      	ldr	r0, [pc, #84]	; (8001d34 <PCD8544_init+0x80>)
 8001cde:	f001 fda4 	bl	800382a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001ce2:	200a      	movs	r0, #10
 8001ce4:	f000 fe90 	bl	8002a08 <HAL_Delay>
  PCD8544_command(0x21); //LCD extended commands.
 8001ce8:	2021      	movs	r0, #33	; 0x21
 8001cea:	f7ff ffa7 	bl	8001c3c <PCD8544_command>
  PCD8544_command(0x80 | contrast); //set LCD Vop(Contrast).
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ffa0 	bl	8001c3c <PCD8544_command>
  PCD8544_command(0x04); //set temp coefficent.
 8001cfc:	2004      	movs	r0, #4
 8001cfe:	f7ff ff9d 	bl	8001c3c <PCD8544_command>
  PCD8544_command(0x13); //LCD bias mode 1:40.
 8001d02:	2013      	movs	r0, #19
 8001d04:	f7ff ff9a 	bl	8001c3c <PCD8544_command>
  PCD8544_command(0x20); //LCD basic commands.
 8001d08:	2020      	movs	r0, #32
 8001d0a:	f7ff ff97 	bl	8001c3c <PCD8544_command>
  PCD8544_command(PCD8544_DISPLAY_NORMAL); //LCD normal.
 8001d0e:	200c      	movs	r0, #12
 8001d10:	f7ff ff94 	bl	8001c3c <PCD8544_command>
  PCD8544_clearScreen();
 8001d14:	f000 fa18 	bl	8002148 <PCD8544_clearScreen>
  PCD8544_refreshScreen();
 8001d18:	f000 fa4a 	bl	80021b0 <PCD8544_refreshScreen>
  inverttext = false;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <PCD8544_init+0x84>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
  _contrast = contrast;
 8001d22:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <PCD8544_init+0x88>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	7013      	strb	r3, [r2, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40010800 	.word	0x40010800
 8001d34:	40010c00 	.word	0x40010c00
 8001d38:	20000400 	.word	0x20000400
 8001d3c:	20000401 	.word	0x20000401

08001d40 <PCD8544_setContrast>:
  else{
    PCD8544_command(PCD8544_DISPLAY_NORMAL);
  }
}

void PCD8544_setContrast(uint8_t contrast){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if (contrast > 0x7f){
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	da01      	bge.n	8001d56 <PCD8544_setContrast+0x16>
		contrast = 0x7f;
 8001d52:	237f      	movs	r3, #127	; 0x7f
 8001d54:	71fb      	strb	r3, [r7, #7]
	}
	_contrast = contrast;
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <PCD8544_setContrast+0x40>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	7013      	strb	r3, [r2, #0]
	PCD8544_command(0x21);
 8001d5c:	2021      	movs	r0, #33	; 0x21
 8001d5e:	f7ff ff6d 	bl	8001c3c <PCD8544_command>
	PCD8544_command(0x80 | contrast);
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff66 	bl	8001c3c <PCD8544_command>
	PCD8544_command(0x20);
 8001d70:	2020      	movs	r0, #32
 8001d72:	f7ff ff63 	bl	8001c3c <PCD8544_command>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000401 	.word	0x20000401

08001d84 <PCD8544_setTextInvert>:
/*
 * @brief Invert the colour of any text sent to the display
 * @param mode: true = inverted / false = normal
 */
void PCD8544_setTextInvert(bool mode){
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  if(mode == true){
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <PCD8544_setTextInvert+0x18>
    inverttext = true;
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <PCD8544_setTextInvert+0x28>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
  }
  else{
    inverttext = false;
  }
}
 8001d9a:	e002      	b.n	8001da2 <PCD8544_setTextInvert+0x1e>
    inverttext = false;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <PCD8544_setTextInvert+0x28>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	20000400 	.word	0x20000400

08001db0 <PCD8544_setFont>:

void PCD8544_setFont(uint8_t font_number){
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
	font = font_number;
 8001dba:	4a2d      	ldr	r2, [pc, #180]	; (8001e70 <PCD8544_setFont+0xc0>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	7013      	strb	r3, [r2, #0]

	if (font == 1){
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <PCD8544_setFont+0xc0>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <PCD8544_setFont+0x26>
		size_x = sizeof(font1[0])/sizeof(font1[0][0]);
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <PCD8544_setFont+0xc4>)
 8001dca:	2206      	movs	r2, #6
 8001dcc:	701a      	strb	r2, [r3, #0]
		size_y = sizeof(font1[0][0])*8;
 8001dce:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <PCD8544_setFont+0xc8>)
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	701a      	strb	r2, [r3, #0]
	}
	else {
		size_x = sizeof(font2[0])/sizeof(font2[0][0]);
		size_y = sizeof(font2[0][0])*8;
	}
}
 8001dd4:	e047      	b.n	8001e66 <PCD8544_setFont+0xb6>
	else if (font == 2){
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <PCD8544_setFont+0xc0>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d106      	bne.n	8001dec <PCD8544_setFont+0x3c>
		size_x = sizeof(font2[0])/sizeof(font2[0][0]);
 8001dde:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <PCD8544_setFont+0xc4>)
 8001de0:	2208      	movs	r2, #8
 8001de2:	701a      	strb	r2, [r3, #0]
		size_y = sizeof(font2[0][0])*8;
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <PCD8544_setFont+0xc8>)
 8001de6:	2208      	movs	r2, #8
 8001de8:	701a      	strb	r2, [r3, #0]
}
 8001dea:	e03c      	b.n	8001e66 <PCD8544_setFont+0xb6>
	else if (font == 3){
 8001dec:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <PCD8544_setFont+0xc0>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d106      	bne.n	8001e02 <PCD8544_setFont+0x52>
		size_x = sizeof(font3[0])/sizeof(font3[0][0]);
 8001df4:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <PCD8544_setFont+0xc4>)
 8001df6:	2208      	movs	r2, #8
 8001df8:	701a      	strb	r2, [r3, #0]
		size_y = sizeof(font3[0][0])*8;
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <PCD8544_setFont+0xc8>)
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	701a      	strb	r2, [r3, #0]
}
 8001e00:	e031      	b.n	8001e66 <PCD8544_setFont+0xb6>
	else if (font == 4){
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <PCD8544_setFont+0xc0>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d106      	bne.n	8001e18 <PCD8544_setFont+0x68>
		size_x = sizeof(font4[0])/sizeof(font4[0][0]);
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <PCD8544_setFont+0xc4>)
 8001e0c:	2209      	movs	r2, #9
 8001e0e:	701a      	strb	r2, [r3, #0]
		size_y = sizeof(font4[0][0])*8;
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <PCD8544_setFont+0xc8>)
 8001e12:	2208      	movs	r2, #8
 8001e14:	701a      	strb	r2, [r3, #0]
}
 8001e16:	e026      	b.n	8001e66 <PCD8544_setFont+0xb6>
	else if (font == 5){
 8001e18:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <PCD8544_setFont+0xc0>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	d106      	bne.n	8001e2e <PCD8544_setFont+0x7e>
		size_x = sizeof(font5[0])/sizeof(font5[0][0]);
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <PCD8544_setFont+0xc4>)
 8001e22:	2204      	movs	r2, #4
 8001e24:	701a      	strb	r2, [r3, #0]
		size_y = sizeof(font5[0][0])*8;
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <PCD8544_setFont+0xc8>)
 8001e28:	2208      	movs	r2, #8
 8001e2a:	701a      	strb	r2, [r3, #0]
}
 8001e2c:	e01b      	b.n	8001e66 <PCD8544_setFont+0xb6>
	else if (font == 6){
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <PCD8544_setFont+0xc0>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d106      	bne.n	8001e44 <PCD8544_setFont+0x94>
		size_x = sizeof(font6[0])/sizeof(font6[0][0]);
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <PCD8544_setFont+0xc4>)
 8001e38:	2211      	movs	r2, #17
 8001e3a:	701a      	strb	r2, [r3, #0]
		size_y = sizeof(font6[0][0])*8;
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <PCD8544_setFont+0xc8>)
 8001e3e:	2220      	movs	r2, #32
 8001e40:	701a      	strb	r2, [r3, #0]
}
 8001e42:	e010      	b.n	8001e66 <PCD8544_setFont+0xb6>
	else if (font == 7){
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <PCD8544_setFont+0xc0>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b07      	cmp	r3, #7
 8001e4a:	d106      	bne.n	8001e5a <PCD8544_setFont+0xaa>
		size_x = sizeof(font7[0])/sizeof(font7[0][0]);
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <PCD8544_setFont+0xc4>)
 8001e4e:	2211      	movs	r2, #17
 8001e50:	701a      	strb	r2, [r3, #0]
		size_y = sizeof(font7[0][0])*8;
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <PCD8544_setFont+0xc8>)
 8001e54:	2220      	movs	r2, #32
 8001e56:	701a      	strb	r2, [r3, #0]
}
 8001e58:	e005      	b.n	8001e66 <PCD8544_setFont+0xb6>
		size_x = sizeof(font2[0])/sizeof(font2[0][0]);
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <PCD8544_setFont+0xc4>)
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	701a      	strb	r2, [r3, #0]
		size_y = sizeof(font2[0][0])*8;
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <PCD8544_setFont+0xc8>)
 8001e62:	2208      	movs	r2, #8
 8001e64:	701a      	strb	r2, [r3, #0]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	2000001e 	.word	0x2000001e
 8001e74:	20000402 	.word	0x20000402
 8001e78:	20000403 	.word	0x20000403

08001e7c <PCD8544_printChar>:
/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */

void PCD8544_printChar(const uint8_t ch, uint8_t x, uint8_t y) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
 8001e86:	460b      	mov	r3, r1
 8001e88:	71bb      	strb	r3, [r7, #6]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	717b      	strb	r3, [r7, #5]
	uint32_t column; // temp byte to store character's column bitmap
	if (x > PCD8544_WIDTH-size_x){
 8001e8e:	79ba      	ldrb	r2, [r7, #6]
 8001e90:	4b67      	ldr	r3, [pc, #412]	; (8002030 <PCD8544_printChar+0x1b4>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	f1c3 0354 	rsb	r3, r3, #84	; 0x54
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	dd01      	ble.n	8001ea0 <PCD8544_printChar+0x24>
		x = PCD8544_WRAP_TEXT_PADDING;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	71bb      	strb	r3, [r7, #6]
	}

	for (int i = 0 ; i < size_x ; i++){
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	e0b7      	b.n	8002016 <PCD8544_printChar+0x19a>
		if (font == 1)  column = font1[ch - 0x20][i];
 8001ea6:	4b63      	ldr	r3, [pc, #396]	; (8002034 <PCD8544_printChar+0x1b8>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10d      	bne.n	8001eca <PCD8544_printChar+0x4e>
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	f1a3 0220 	sub.w	r2, r3, #32
 8001eb4:	4960      	ldr	r1, [pc, #384]	; (8002038 <PCD8544_printChar+0x1bc>)
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	18ca      	adds	r2, r1, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	e069      	b.n	8001f9e <PCD8544_printChar+0x122>
		else if (font == 2) column = font2[ch - 0x20][i];
 8001eca:	4b5a      	ldr	r3, [pc, #360]	; (8002034 <PCD8544_printChar+0x1b8>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d109      	bne.n	8001ee6 <PCD8544_printChar+0x6a>
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	3b20      	subs	r3, #32
 8001ed6:	4a59      	ldr	r2, [pc, #356]	; (800203c <PCD8544_printChar+0x1c0>)
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	441a      	add	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	e05b      	b.n	8001f9e <PCD8544_printChar+0x122>
		else if (font == 3) column = font3[ch - 0x20][i];
 8001ee6:	4b53      	ldr	r3, [pc, #332]	; (8002034 <PCD8544_printChar+0x1b8>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d109      	bne.n	8001f02 <PCD8544_printChar+0x86>
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	3b20      	subs	r3, #32
 8001ef2:	4a53      	ldr	r2, [pc, #332]	; (8002040 <PCD8544_printChar+0x1c4>)
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	441a      	add	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e04d      	b.n	8001f9e <PCD8544_printChar+0x122>
		else if (font == 4) column = font4[ch - 0x20][i];
 8001f02:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <PCD8544_printChar+0x1b8>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d10c      	bne.n	8001f24 <PCD8544_printChar+0xa8>
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f1a3 0220 	sub.w	r2, r3, #32
 8001f10:	494c      	ldr	r1, [pc, #304]	; (8002044 <PCD8544_printChar+0x1c8>)
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	18ca      	adds	r2, r1, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e03c      	b.n	8001f9e <PCD8544_printChar+0x122>
		else if (font == 5) column = font5[ch - 0x20][i];
 8001f24:	4b43      	ldr	r3, [pc, #268]	; (8002034 <PCD8544_printChar+0x1b8>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b05      	cmp	r3, #5
 8001f2a:	d109      	bne.n	8001f40 <PCD8544_printChar+0xc4>
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	3b20      	subs	r3, #32
 8001f30:	4a45      	ldr	r2, [pc, #276]	; (8002048 <PCD8544_printChar+0x1cc>)
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	441a      	add	r2, r3
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e02e      	b.n	8001f9e <PCD8544_printChar+0x122>
		else if (font == 6) column = font6[ch - 0x2e][i];
 8001f40:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <PCD8544_printChar+0x1b8>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b06      	cmp	r3, #6
 8001f46:	d10c      	bne.n	8001f62 <PCD8544_printChar+0xe6>
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f1a3 022e 	sub.w	r2, r3, #46	; 0x2e
 8001f4e:	493f      	ldr	r1, [pc, #252]	; (800204c <PCD8544_printChar+0x1d0>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	4413      	add	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e01d      	b.n	8001f9e <PCD8544_printChar+0x122>
		else if (font == 7) column = font7[ch - 0x2e][i];
 8001f62:	4b34      	ldr	r3, [pc, #208]	; (8002034 <PCD8544_printChar+0x1b8>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b07      	cmp	r3, #7
 8001f68:	d10c      	bne.n	8001f84 <PCD8544_printChar+0x108>
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	f1a3 022e 	sub.w	r2, r3, #46	; 0x2e
 8001f70:	4937      	ldr	r1, [pc, #220]	; (8002050 <PCD8544_printChar+0x1d4>)
 8001f72:	4613      	mov	r3, r2
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	4413      	add	r3, r2
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e00c      	b.n	8001f9e <PCD8544_printChar+0x122>
		else column = font1[ch - 0x20][i];
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	f1a3 0220 	sub.w	r2, r3, #32
 8001f8a:	492b      	ldr	r1, [pc, #172]	; (8002038 <PCD8544_printChar+0x1bc>)
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	18ca      	adds	r2, r1, r3
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	617b      	str	r3, [r7, #20]

		if (inverttext == true){
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <PCD8544_printChar+0x1d8>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <PCD8544_printChar+0x130>
			column = ~column;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	617b      	str	r3, [r7, #20]
		}

	  for (int j = 0; j < size_y; j++){
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	e028      	b.n	8002004 <PCD8544_printChar+0x188>
	    if (column & (0x01 << j)) // test bits to set pixels
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00e      	beq.n	8001fe2 <PCD8544_printChar+0x166>
	      PCD8544_drawPixel(x+i, y+j, 1);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	79bb      	ldrb	r3, [r7, #6]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b2d8      	uxtb	r0, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	797b      	ldrb	r3, [r7, #5]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f000 f914 	bl	8002208 <PCD8544_drawPixel>
 8001fe0:	e00d      	b.n	8001ffe <PCD8544_printChar+0x182>
	    else
	      PCD8544_drawPixel(x+i, y+j, 0);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	79bb      	ldrb	r3, [r7, #6]
 8001fe8:	4413      	add	r3, r2
 8001fea:	b2d8      	uxtb	r0, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	797b      	ldrb	r3, [r7, #5]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f000 f905 	bl	8002208 <PCD8544_drawPixel>
	  for (int j = 0; j < size_y; j++){
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3301      	adds	r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <PCD8544_printChar+0x1dc>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4293      	cmp	r3, r2
 800200e:	dbd0      	blt.n	8001fb2 <PCD8544_printChar+0x136>
	for (int i = 0 ; i < size_x ; i++){
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	3301      	adds	r3, #1
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <PCD8544_printChar+0x1b4>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4293      	cmp	r3, r2
 8002020:	f6ff af41 	blt.w	8001ea6 <PCD8544_printChar+0x2a>
	  }
	}
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000402 	.word	0x20000402
 8002034:	2000001e 	.word	0x2000001e
 8002038:	08009ca0 	.word	0x08009ca0
 800203c:	08009ee0 	.word	0x08009ee0
 8002040:	0800a0b8 	.word	0x0800a0b8
 8002044:	0800a3a8 	.word	0x0800a3a8
 8002048:	0800a5bc 	.word	0x0800a5bc
 800204c:	0800a738 	.word	0x0800a738
 8002050:	0800aaac 	.word	0x0800aaac
 8002054:	20000400 	.word	0x20000400
 8002058:	20000403 	.word	0x20000403

0800205c <PCD8544_printString>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void PCD8544_printString(const char *str, uint8_t x, uint8_t y){
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	70fb      	strb	r3, [r7, #3]
 8002068:	4613      	mov	r3, r2
 800206a:	70bb      	strb	r3, [r7, #2]
  while(*str){
 800206c:	e00d      	b.n	800208a <PCD8544_printString+0x2e>
   PCD8544_printChar(*str++,x,y);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	78ba      	ldrb	r2, [r7, #2]
 8002078:	78f9      	ldrb	r1, [r7, #3]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fefe 	bl	8001e7c <PCD8544_printChar>
	 x += size_x;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <PCD8544_printString+0x40>)
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	4413      	add	r3, r2
 8002088:	70fb      	strb	r3, [r7, #3]
  while(*str){
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ed      	bne.n	800206e <PCD8544_printString+0x12>
  }
}
 8002092:	bf00      	nop
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000402 	.word	0x20000402

080020a0 <PCD8544_printStringAlign>:

void PCD8544_printStringAlign(const char *str, uint8_t y, Alignment_e alignment){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	70fb      	strb	r3, [r7, #3]
 80020ac:	4613      	mov	r3, r2
 80020ae:	70bb      	strb	r3, [r7, #2]
	uint8_t startX;

	if (alignment == ALIGNMETN_RIGHT){
 80020b0:	78bb      	ldrb	r3, [r7, #2]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10d      	bne.n	80020d2 <PCD8544_printStringAlign+0x32>
		startX = PCD8544_WIDTH-(strlen(str)*size_x);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe f84a 	bl	8000150 <strlen>
 80020bc:	4603      	mov	r3, r0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	4a1f      	ldr	r2, [pc, #124]	; (8002140 <PCD8544_printStringAlign+0xa0>)
 80020c2:	7812      	ldrb	r2, [r2, #0]
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f1c3 0354 	rsb	r3, r3, #84	; 0x54
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	e02d      	b.n	800212e <PCD8544_printStringAlign+0x8e>
	}
	else if (alignment == ALIGNMETN_CENTER){
 80020d2:	78bb      	ldrb	r3, [r7, #2]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d10c      	bne.n	80020f2 <PCD8544_printStringAlign+0x52>
		startX = ((PCD8544_WIDTH)-(strlen(str)*size_x))/2;;
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7fe f839 	bl	8000150 <strlen>
 80020de:	4603      	mov	r3, r0
 80020e0:	4a17      	ldr	r2, [pc, #92]	; (8002140 <PCD8544_printStringAlign+0xa0>)
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	f1c3 0354 	rsb	r3, r3, #84	; 0x54
 80020ec:	085b      	lsrs	r3, r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	e01d      	b.n	800212e <PCD8544_printStringAlign+0x8e>
	}
	else if (alignment == ALIGNMETN_LEFT){
 80020f2:	78bb      	ldrb	r3, [r7, #2]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d11f      	bne.n	8002138 <PCD8544_printStringAlign+0x98>
		startX = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
	}
	else {
		return;
	}

  while(*str){
 80020fc:	e017      	b.n	800212e <PCD8544_printStringAlign+0x8e>
   PCD8544_printChar(*str++,startX,y);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	7bf9      	ldrb	r1, [r7, #15]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff feb6 	bl	8001e7c <PCD8544_printChar>
   startX += size_x;
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <PCD8544_printStringAlign+0xa0>)
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	4413      	add	r3, r2
 8002118:	73fb      	strb	r3, [r7, #15]
   if (startX > 83){
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b53      	cmp	r3, #83	; 0x53
 800211e:	d906      	bls.n	800212e <PCD8544_printStringAlign+0x8e>
  	 startX = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
  	 y += size_y;
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <PCD8544_printStringAlign+0xa4>)
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	4413      	add	r3, r2
 800212c:	70fb      	strb	r3, [r7, #3]
  while(*str){
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1e3      	bne.n	80020fe <PCD8544_printStringAlign+0x5e>
 8002136:	e000      	b.n	800213a <PCD8544_printStringAlign+0x9a>
		return;
 8002138:	bf00      	nop
   }
  }
}
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000402 	.word	0x20000402
 8002144:	20000403 	.word	0x20000403

08002148 <PCD8544_clearScreen>:
/*
 * @brief Clear the screen
 */
void PCD8544_clearScreen(){
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	e007      	b.n	8002164 <PCD8544_clearScreen+0x1c>
  	buffer[i] = 0;
 8002154:	4a08      	ldr	r2, [pc, #32]	; (8002178 <PCD8544_clearScreen+0x30>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3301      	adds	r3, #1
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800216a:	dbf3      	blt.n	8002154 <PCD8544_clearScreen+0xc>
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	20000208 	.word	0x20000208

0800217c <PCD8544_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void PCD8544_goXY(uint8_t x, uint8_t y){
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	460a      	mov	r2, r1
 8002186:	71fb      	strb	r3, [r7, #7]
 8002188:	4613      	mov	r3, r2
 800218a:	71bb      	strb	r3, [r7, #6]
  PCD8544_command(0x80 | x); //Column.
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fd51 	bl	8001c3c <PCD8544_command>
  PCD8544_command(0x40 | y); //Row.
 800219a:	79bb      	ldrb	r3, [r7, #6]
 800219c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fd4a 	bl	8001c3c <PCD8544_command>
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <PCD8544_refreshScreen>:

/*
 * @brief Updates the entire screen according to lcd.buffer
 */
void PCD8544_refreshScreen(){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
  PCD8544_goXY(PCD8544_SETXADDR, PCD8544_SETYADDR);
 80021b6:	2140      	movs	r1, #64	; 0x40
 80021b8:	2080      	movs	r0, #128	; 0x80
 80021ba:	f7ff ffdf 	bl	800217c <PCD8544_goXY>
  for(int i = 0; i < 6; i++){
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	e016      	b.n	80021f2 <PCD8544_refreshScreen+0x42>
    for(int j = 0; j < PCD8544_WIDTH; j++){
 80021c4:	2300      	movs	r3, #0
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	e00d      	b.n	80021e6 <PCD8544_refreshScreen+0x36>
      PCD8544_data(buffer[(i * PCD8544_WIDTH) + j]);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2254      	movs	r2, #84	; 0x54
 80021ce:	fb03 f202 	mul.w	r2, r3, r2
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <PCD8544_refreshScreen+0x54>)
 80021d8:	5cd3      	ldrb	r3, [r2, r3]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fd4c 	bl	8001c78 <PCD8544_data>
    for(int j = 0; j < PCD8544_WIDTH; j++){
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b53      	cmp	r3, #83	; 0x53
 80021ea:	ddee      	ble.n	80021ca <PCD8544_refreshScreen+0x1a>
  for(int i = 0; i < 6; i++){
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3301      	adds	r3, #1
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	dde5      	ble.n	80021c4 <PCD8544_refreshScreen+0x14>
    }
  }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000208 	.word	0x20000208

08002208 <PCD8544_drawPixel>:
}

/*
 * @brief Sets a pixel on the screen
 */
void PCD8544_drawPixel(uint8_t x, uint8_t y, bool pixel){
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
 8002212:	460b      	mov	r3, r1
 8002214:	71bb      	strb	r3, [r7, #6]
 8002216:	4613      	mov	r3, r2
 8002218:	717b      	strb	r3, [r7, #5]
  if(x >= PCD8544_WIDTH || y >= PCD8544_HEIGHT){
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	2b53      	cmp	r3, #83	; 0x53
 800221e:	d843      	bhi.n	80022a8 <PCD8544_drawPixel+0xa0>
 8002220:	79bb      	ldrb	r3, [r7, #6]
 8002222:	2b2f      	cmp	r3, #47	; 0x2f
 8002224:	d840      	bhi.n	80022a8 <PCD8544_drawPixel+0xa0>
    return;
  }
    
  if(pixel != false){
 8002226:	797b      	ldrb	r3, [r7, #5]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01d      	beq.n	8002268 <PCD8544_drawPixel+0x60>
    buffer[x + (y / 8) * PCD8544_WIDTH] |= 1 << (y % 8);
 800222c:	79fa      	ldrb	r2, [r7, #7]
 800222e:	79bb      	ldrb	r3, [r7, #6]
 8002230:	08db      	lsrs	r3, r3, #3
 8002232:	b2d8      	uxtb	r0, r3
 8002234:	4601      	mov	r1, r0
 8002236:	2354      	movs	r3, #84	; 0x54
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <PCD8544_drawPixel+0xac>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
 8002242:	b25a      	sxtb	r2, r3
 8002244:	79bb      	ldrb	r3, [r7, #6]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	2101      	movs	r1, #1
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	b25b      	sxtb	r3, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	b259      	sxtb	r1, r3
 8002256:	79fa      	ldrb	r2, [r7, #7]
 8002258:	2354      	movs	r3, #84	; 0x54
 800225a:	fb00 f303 	mul.w	r3, r0, r3
 800225e:	4413      	add	r3, r2
 8002260:	b2c9      	uxtb	r1, r1
 8002262:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <PCD8544_drawPixel+0xac>)
 8002264:	54d1      	strb	r1, [r2, r3]
 8002266:	e020      	b.n	80022aa <PCD8544_drawPixel+0xa2>
  }
  else{
    buffer[x + (y / 8) * PCD8544_WIDTH] &= ~(1 << (y % 8));
 8002268:	79fa      	ldrb	r2, [r7, #7]
 800226a:	79bb      	ldrb	r3, [r7, #6]
 800226c:	08db      	lsrs	r3, r3, #3
 800226e:	b2d8      	uxtb	r0, r3
 8002270:	4601      	mov	r1, r0
 8002272:	2354      	movs	r3, #84	; 0x54
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	4a0e      	ldr	r2, [pc, #56]	; (80022b4 <PCD8544_drawPixel+0xac>)
 800227c:	5cd3      	ldrb	r3, [r2, r3]
 800227e:	b25a      	sxtb	r2, r3
 8002280:	79bb      	ldrb	r3, [r7, #6]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	2101      	movs	r1, #1
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	b25b      	sxtb	r3, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	b25b      	sxtb	r3, r3
 8002292:	4013      	ands	r3, r2
 8002294:	b259      	sxtb	r1, r3
 8002296:	79fa      	ldrb	r2, [r7, #7]
 8002298:	2354      	movs	r3, #84	; 0x54
 800229a:	fb00 f303 	mul.w	r3, r0, r3
 800229e:	4413      	add	r3, r2
 80022a0:	b2c9      	uxtb	r1, r1
 80022a2:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <PCD8544_drawPixel+0xac>)
 80022a4:	54d1      	strb	r1, [r2, r3]
 80022a6:	e000      	b.n	80022aa <PCD8544_drawPixel+0xa2>
    return;
 80022a8:	bf00      	nop
  }
}
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000208 	.word	0x20000208

080022b8 <PCD8544_drawHorizontalLine>:
 * @brief Draws a horizontal line
 * @param x: starting point on the x-axis
 * @param y: starting point on the y-axis
 * @param l: length of the line
 */
void PCD8544_drawHorizontalLine(int x, int y, int l){
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  int by, bi;

  if ((x>=0) && (x<PCD8544_WIDTH) && (y>=0) && (y<PCD8544_HEIGHT)){
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db3a      	blt.n	8002340 <PCD8544_drawHorizontalLine+0x88>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b53      	cmp	r3, #83	; 0x53
 80022ce:	dc37      	bgt.n	8002340 <PCD8544_drawHorizontalLine+0x88>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db34      	blt.n	8002340 <PCD8544_drawHorizontalLine+0x88>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b2f      	cmp	r3, #47	; 0x2f
 80022da:	dc31      	bgt.n	8002340 <PCD8544_drawHorizontalLine+0x88>
    for (int cx=0; cx<l; cx++){
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	e02a      	b.n	8002338 <PCD8544_drawHorizontalLine+0x80>
      by=((y/8)*84)+x;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	da00      	bge.n	80022ea <PCD8544_drawHorizontalLine+0x32>
 80022e8:	3307      	adds	r3, #7
 80022ea:	10db      	asrs	r3, r3, #3
 80022ec:	461a      	mov	r2, r3
 80022ee:	2354      	movs	r3, #84	; 0x54
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
      bi=y % 8;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	425a      	negs	r2, r3
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	f002 0207 	and.w	r2, r2, #7
 8002306:	bf58      	it	pl
 8002308:	4253      	negpl	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
      buffer[by+cx] |= (1<<bi);
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	4a0e      	ldr	r2, [pc, #56]	; (800234c <PCD8544_drawHorizontalLine+0x94>)
 8002314:	5cd3      	ldrb	r3, [r2, r3]
 8002316:	b25a      	sxtb	r2, r3
 8002318:	2101      	movs	r1, #1
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	b25b      	sxtb	r3, r3
 8002322:	4313      	orrs	r3, r2
 8002324:	b259      	sxtb	r1, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	4413      	add	r3, r2
 800232c:	b2c9      	uxtb	r1, r1
 800232e:	4a07      	ldr	r2, [pc, #28]	; (800234c <PCD8544_drawHorizontalLine+0x94>)
 8002330:	54d1      	strb	r1, [r2, r3]
    for (int cx=0; cx<l; cx++){
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3301      	adds	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	429a      	cmp	r2, r3
 800233e:	dbd0      	blt.n	80022e2 <PCD8544_drawHorizontalLine+0x2a>
    }
  }
}
 8002340:	bf00      	nop
 8002342:	3724      	adds	r7, #36	; 0x24
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000208 	.word	0x20000208

08002350 <PCD8544_drawVerticalLine>:
 * @brief Draws a vertical line
 * @param x: starting point on the x-axis
 * @param y: starting point on the y-axis
 * @param l: length of the line
 */
void PCD8544_drawVerticalLine(int x, int y, int l){
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]

  if ((x>=0) && (x<84) && (y>=0) && (y<48)){
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db1e      	blt.n	80023a0 <PCD8544_drawVerticalLine+0x50>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b53      	cmp	r3, #83	; 0x53
 8002366:	dc1b      	bgt.n	80023a0 <PCD8544_drawVerticalLine+0x50>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	db18      	blt.n	80023a0 <PCD8544_drawVerticalLine+0x50>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b2f      	cmp	r3, #47	; 0x2f
 8002372:	dc15      	bgt.n	80023a0 <PCD8544_drawVerticalLine+0x50>
    for (int cy=0; cy<= l; cy++){
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	e00e      	b.n	8002398 <PCD8544_drawVerticalLine+0x48>
      PCD8544_drawPixel(x, y+cy, true);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	b2d8      	uxtb	r0, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	4413      	add	r3, r2
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2201      	movs	r2, #1
 800238c:	4619      	mov	r1, r3
 800238e:	f7ff ff3b 	bl	8002208 <PCD8544_drawPixel>
    for (int cy=0; cy<= l; cy++){
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	3301      	adds	r3, #1
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	ddec      	ble.n	800237a <PCD8544_drawVerticalLine+0x2a>
    }
  }
}
 80023a0:	bf00      	nop
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <PCD8544_drawRectangle>:
 * @param x1: starting point on the x-axis
 * @param y1: starting point on the y-axis
 * @param x2: ending point on the x-axis
 * @param y2: ending point on the y-axis
 */
void PCD8544_drawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2){
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4604      	mov	r4, r0
 80023b0:	4608      	mov	r0, r1
 80023b2:	4611      	mov	r1, r2
 80023b4:	461a      	mov	r2, r3
 80023b6:	4623      	mov	r3, r4
 80023b8:	71fb      	strb	r3, [r7, #7]
 80023ba:	4603      	mov	r3, r0
 80023bc:	71bb      	strb	r3, [r7, #6]
 80023be:	460b      	mov	r3, r1
 80023c0:	717b      	strb	r3, [r7, #5]
 80023c2:	4613      	mov	r3, r2
 80023c4:	713b      	strb	r3, [r7, #4]
  PCD8544_drawHorizontalLine(x1, y1, x2-x1);
 80023c6:	79f8      	ldrb	r0, [r7, #7]
 80023c8:	79b9      	ldrb	r1, [r7, #6]
 80023ca:	797a      	ldrb	r2, [r7, #5]
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	f7ff ff71 	bl	80022b8 <PCD8544_drawHorizontalLine>
  PCD8544_drawVerticalLine(x1, y1, y2-y1);
 80023d6:	79f8      	ldrb	r0, [r7, #7]
 80023d8:	79b9      	ldrb	r1, [r7, #6]
 80023da:	793a      	ldrb	r2, [r7, #4]
 80023dc:	79bb      	ldrb	r3, [r7, #6]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	f7ff ffb5 	bl	8002350 <PCD8544_drawVerticalLine>
  PCD8544_drawVerticalLine(x2, y1, y2-y1);
 80023e6:	7978      	ldrb	r0, [r7, #5]
 80023e8:	79b9      	ldrb	r1, [r7, #6]
 80023ea:	793a      	ldrb	r2, [r7, #4]
 80023ec:	79bb      	ldrb	r3, [r7, #6]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	f7ff ffad 	bl	8002350 <PCD8544_drawVerticalLine>
  PCD8544_drawHorizontalLine(x1, y2, x2-x1);
 80023f6:	79f8      	ldrb	r0, [r7, #7]
 80023f8:	7939      	ldrb	r1, [r7, #4]
 80023fa:	797a      	ldrb	r2, [r7, #5]
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	461a      	mov	r2, r3
 8002402:	f7ff ff59 	bl	80022b8 <PCD8544_drawHorizontalLine>
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bd90      	pop	{r4, r7, pc}

0800240e <PCD8544_drawFilledRectangle>:

void PCD8544_drawFilledRectangle(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
 800240e:	b590      	push	{r4, r7, lr}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	4604      	mov	r4, r0
 8002416:	4608      	mov	r0, r1
 8002418:	4611      	mov	r1, r2
 800241a:	461a      	mov	r2, r3
 800241c:	4623      	mov	r3, r4
 800241e:	71fb      	strb	r3, [r7, #7]
 8002420:	4603      	mov	r3, r0
 8002422:	71bb      	strb	r3, [r7, #6]
 8002424:	460b      	mov	r3, r1
 8002426:	717b      	strb	r3, [r7, #5]
 8002428:	4613      	mov	r3, r2
 800242a:	713b      	strb	r3, [r7, #4]
  for (uint8_t i = y ; i <= y+h ; i++){
 800242c:	79bb      	ldrb	r3, [r7, #6]
 800242e:	73fb      	strb	r3, [r7, #15]
 8002430:	e008      	b.n	8002444 <PCD8544_drawFilledRectangle+0x36>
	  PCD8544_drawHorizontalLine(x, i, w);
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	7bf9      	ldrb	r1, [r7, #15]
 8002436:	797a      	ldrb	r2, [r7, #5]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff3d 	bl	80022b8 <PCD8544_drawHorizontalLine>
  for (uint8_t i = y ; i <= y+h ; i++){
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	3301      	adds	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	79b9      	ldrb	r1, [r7, #6]
 8002448:	793b      	ldrb	r3, [r7, #4]
 800244a:	440b      	add	r3, r1
 800244c:	429a      	cmp	r2, r3
 800244e:	ddf0      	ble.n	8002432 <PCD8544_drawFilledRectangle+0x24>
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}
	...

0800245c <PCD8544_getContrast>:
void PCD8544_drawClockDeliminator(){
	 PCD8544_drawFilledRectangle(40,23,4,4);
	 PCD8544_drawFilledRectangle(40,32,4,4);
}

uint8_t PCD8544_getContrast(){
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
	return _contrast;
 8002460:	4b02      	ldr	r3, [pc, #8]	; (800246c <PCD8544_getContrast+0x10>)
 8002462:	781b      	ldrb	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	20000401 	.word	0x20000401

08002470 <PCD8544_GUI_drawProgressBar>:
#include "pcd8544_gui.h"

void PCD8544_GUI_drawProgressBar(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t progress){
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4604      	mov	r4, r0
 8002478:	4608      	mov	r0, r1
 800247a:	4611      	mov	r1, r2
 800247c:	461a      	mov	r2, r3
 800247e:	4623      	mov	r3, r4
 8002480:	71fb      	strb	r3, [r7, #7]
 8002482:	4603      	mov	r3, r0
 8002484:	71bb      	strb	r3, [r7, #6]
 8002486:	460b      	mov	r3, r1
 8002488:	717b      	strb	r3, [r7, #5]
 800248a:	4613      	mov	r3, r2
 800248c:	713b      	strb	r3, [r7, #4]
	PCD8544_drawRectangle(x, y, x + width, y + height);
 800248e:	79fa      	ldrb	r2, [r7, #7]
 8002490:	797b      	ldrb	r3, [r7, #5]
 8002492:	4413      	add	r3, r2
 8002494:	b2dc      	uxtb	r4, r3
 8002496:	79ba      	ldrb	r2, [r7, #6]
 8002498:	793b      	ldrb	r3, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	b2db      	uxtb	r3, r3
 800249e:	79b9      	ldrb	r1, [r7, #6]
 80024a0:	79f8      	ldrb	r0, [r7, #7]
 80024a2:	4622      	mov	r2, r4
 80024a4:	f7ff ff80 	bl	80023a8 <PCD8544_drawRectangle>
	PCD8544_drawFilledRectangle(x+2, y+2, (uint8_t)((progress)*(width-3)/100), height-4);
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	3302      	adds	r3, #2
 80024ac:	b2d8      	uxtb	r0, r3
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	3302      	adds	r3, #2
 80024b2:	b2d9      	uxtb	r1, r3
 80024b4:	7e3b      	ldrb	r3, [r7, #24]
 80024b6:	797a      	ldrb	r2, [r7, #5]
 80024b8:	3a03      	subs	r2, #3
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <PCD8544_GUI_drawProgressBar+0x70>)
 80024c0:	fb82 4203 	smull	r4, r2, r2, r3
 80024c4:	1152      	asrs	r2, r2, #5
 80024c6:	17db      	asrs	r3, r3, #31
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	793b      	ldrb	r3, [r7, #4]
 80024ce:	3b04      	subs	r3, #4
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f7ff ff9c 	bl	800240e <PCD8544_drawFilledRectangle>
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd90      	pop	{r4, r7, pc}
 80024de:	bf00      	nop
 80024e0:	51eb851f 	.word	0x51eb851f

080024e4 <PCD8544_GUI_displayMenuName>:

void PCD8544_GUI_displayMenuName(char* name){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	PCD8544_drawHorizontalLine(0, 12, PCD8544_WIDTH);
 80024ec:	2254      	movs	r2, #84	; 0x54
 80024ee:	210c      	movs	r1, #12
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7ff fee1 	bl	80022b8 <PCD8544_drawHorizontalLine>
	PCD8544_printStringAlign(name, 2, ALIGNMETN_CENTER);
 80024f6:	2202      	movs	r2, #2
 80024f8:	2102      	movs	r1, #2
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff fdd0 	bl	80020a0 <PCD8544_printStringAlign>
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <PCD8544_GUI_drawSideBar>:

void PCD8544_GUI_drawSideBar(uint8_t x, uint8_t y, uint8_t length, uint8_t index, uint8_t totalIndexes){
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4604      	mov	r4, r0
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4623      	mov	r3, r4
 8002518:	71fb      	strb	r3, [r7, #7]
 800251a:	4603      	mov	r3, r0
 800251c:	71bb      	strb	r3, [r7, #6]
 800251e:	460b      	mov	r3, r1
 8002520:	717b      	strb	r3, [r7, #5]
 8002522:	4613      	mov	r3, r2
 8002524:	713b      	strb	r3, [r7, #4]
	PCD8544_drawVerticalLine(x, y, length);
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	79b9      	ldrb	r1, [r7, #6]
 800252a:	797a      	ldrb	r2, [r7, #5]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff0f 	bl	8002350 <PCD8544_drawVerticalLine>
	PCD8544_drawFilledRectangle(x-1, (y+2) + (index * (length / totalIndexes)), 3, 4);
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	3b01      	subs	r3, #1
 8002536:	b2d8      	uxtb	r0, r3
 8002538:	797a      	ldrb	r2, [r7, #5]
 800253a:	7e3b      	ldrb	r3, [r7, #24]
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	793a      	ldrb	r2, [r7, #4]
 8002544:	fb02 f303 	mul.w	r3, r2, r3
 8002548:	b2da      	uxtb	r2, r3
 800254a:	79bb      	ldrb	r3, [r7, #6]
 800254c:	4413      	add	r3, r2
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3302      	adds	r3, #2
 8002552:	b2d9      	uxtb	r1, r3
 8002554:	2304      	movs	r3, #4
 8002556:	2203      	movs	r2, #3
 8002558:	f7ff ff59 	bl	800240e <PCD8544_drawFilledRectangle>
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bd90      	pop	{r4, r7, pc}

08002564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_MspInit+0x68>)
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <HAL_MspInit+0x68>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6193      	str	r3, [r2, #24]
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_MspInit+0x68>)
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_MspInit+0x68>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4a11      	ldr	r2, [pc, #68]	; (80025cc <HAL_MspInit+0x68>)
 8002588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258c:	61d3      	str	r3, [r2, #28]
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <HAL_MspInit+0x68>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	210f      	movs	r1, #15
 800259e:	f06f 0001 	mvn.w	r0, #1
 80025a2:	f000 ff78 	bl	8003496 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_MspInit+0x6c>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <HAL_MspInit+0x6c>)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40010000 	.word	0x40010000

080025d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_ADC_MspInit+0x34>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d10b      	bne.n	80025fe <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_ADC_MspInit+0x38>)
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	4a08      	ldr	r2, [pc, #32]	; (800260c <HAL_ADC_MspInit+0x38>)
 80025ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f0:	6193      	str	r3, [r2, #24]
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_ADC_MspInit+0x38>)
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	40012400 	.word	0x40012400
 800260c:	40021000 	.word	0x40021000

08002610 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0b      	ldr	r2, [pc, #44]	; (800264c <HAL_RTC_MspInit+0x3c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d110      	bne.n	8002644 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002622:	f001 f96b 	bl	80038fc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_RTC_MspInit+0x40>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_RTC_MspInit+0x40>)
 800262c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002630:	61d3      	str	r3, [r2, #28]
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <HAL_RTC_MspInit+0x40>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_RTC_MspInit+0x44>)
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40002800 	.word	0x40002800
 8002650:	40021000 	.word	0x40021000
 8002654:	4242043c 	.word	0x4242043c

08002658 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0310 	add.w	r3, r7, #16
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a15      	ldr	r2, [pc, #84]	; (80026c8 <HAL_SPI_MspInit+0x70>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d123      	bne.n	80026c0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_SPI_MspInit+0x74>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a13      	ldr	r2, [pc, #76]	; (80026cc <HAL_SPI_MspInit+0x74>)
 800267e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_SPI_MspInit+0x74>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002690:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_SPI_MspInit+0x74>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a0d      	ldr	r2, [pc, #52]	; (80026cc <HAL_SPI_MspInit+0x74>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	6193      	str	r3, [r2, #24]
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_SPI_MspInit+0x74>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80026a8:	23a0      	movs	r3, #160	; 0xa0
 80026aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ac:	2302      	movs	r3, #2
 80026ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026b0:	2303      	movs	r3, #3
 80026b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	4619      	mov	r1, r3
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <HAL_SPI_MspInit+0x78>)
 80026bc:	f000 ff1a 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026c0:	bf00      	nop
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40013000 	.word	0x40013000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40010800 	.word	0x40010800

080026d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e4:	d10c      	bne.n	8002700 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_TIM_Base_MspInit+0x68>)
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	4a14      	ldr	r2, [pc, #80]	; (800273c <HAL_TIM_Base_MspInit+0x68>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	61d3      	str	r3, [r2, #28]
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_TIM_Base_MspInit+0x68>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026fe:	e018      	b.n	8002732 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <HAL_TIM_Base_MspInit+0x6c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d113      	bne.n	8002732 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_TIM_Base_MspInit+0x68>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4a0b      	ldr	r2, [pc, #44]	; (800273c <HAL_TIM_Base_MspInit+0x68>)
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	61d3      	str	r3, [r2, #28]
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_TIM_Base_MspInit+0x68>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2105      	movs	r1, #5
 8002726:	201d      	movs	r0, #29
 8002728:	f000 feb5 	bl	8003496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800272c:	201d      	movs	r0, #29
 800272e:	f000 fece 	bl	80034ce <HAL_NVIC_EnableIRQ>
}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	40000400 	.word	0x40000400

08002744 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002762:	d117      	bne.n	8002794 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_TIM_MspPostInit+0x58>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	4a0c      	ldr	r2, [pc, #48]	; (800279c <HAL_TIM_MspPostInit+0x58>)
 800276a:	f043 0304 	orr.w	r3, r3, #4
 800276e:	6193      	str	r3, [r2, #24]
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <HAL_TIM_MspPostInit+0x58>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = LCD_BACKLIGHT_Pin;
 800277c:	2308      	movs	r3, #8
 800277e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	2302      	movs	r3, #2
 8002786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8002788:	f107 0310 	add.w	r3, r7, #16
 800278c:	4619      	mov	r1, r3
 800278e:	4804      	ldr	r0, [pc, #16]	; (80027a0 <HAL_TIM_MspPostInit+0x5c>)
 8002790:	f000 feb0 	bl	80034f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002794:	bf00      	nop
 8002796:	3720      	adds	r7, #32
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	40010800 	.word	0x40010800

080027a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	; 0x30
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80027ba:	4b2e      	ldr	r3, [pc, #184]	; (8002874 <HAL_InitTick+0xd0>)
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	4a2d      	ldr	r2, [pc, #180]	; (8002874 <HAL_InitTick+0xd0>)
 80027c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027c4:	6193      	str	r3, [r2, #24]
 80027c6:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <HAL_InitTick+0xd0>)
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027d2:	f107 020c 	add.w	r2, r7, #12
 80027d6:	f107 0310 	add.w	r3, r7, #16
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f001 fc83 	bl	80040e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80027e2:	f001 fc6d 	bl	80040c0 <HAL_RCC_GetPCLK2Freq>
 80027e6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	4a23      	ldr	r2, [pc, #140]	; (8002878 <HAL_InitTick+0xd4>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	0c9b      	lsrs	r3, r3, #18
 80027f2:	3b01      	subs	r3, #1
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80027f6:	4b21      	ldr	r3, [pc, #132]	; (800287c <HAL_InitTick+0xd8>)
 80027f8:	4a21      	ldr	r2, [pc, #132]	; (8002880 <HAL_InitTick+0xdc>)
 80027fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80027fc:	4b1f      	ldr	r3, [pc, #124]	; (800287c <HAL_InitTick+0xd8>)
 80027fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002802:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002804:	4a1d      	ldr	r2, [pc, #116]	; (800287c <HAL_InitTick+0xd8>)
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_InitTick+0xd8>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002810:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HAL_InitTick+0xd8>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002816:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_InitTick+0xd8>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800281c:	4817      	ldr	r0, [pc, #92]	; (800287c <HAL_InitTick+0xd8>)
 800281e:	f002 fdf9 	bl	8005414 <HAL_TIM_Base_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002828:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800282c:	2b00      	cmp	r3, #0
 800282e:	d11b      	bne.n	8002868 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002830:	4812      	ldr	r0, [pc, #72]	; (800287c <HAL_InitTick+0xd8>)
 8002832:	f002 fe3f 	bl	80054b4 <HAL_TIM_Base_Start_IT>
 8002836:	4603      	mov	r3, r0
 8002838:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800283c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002840:	2b00      	cmp	r3, #0
 8002842:	d111      	bne.n	8002868 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002844:	2019      	movs	r0, #25
 8002846:	f000 fe42 	bl	80034ce <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b0f      	cmp	r3, #15
 800284e:	d808      	bhi.n	8002862 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8002850:	2200      	movs	r2, #0
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	2019      	movs	r0, #25
 8002856:	f000 fe1e 	bl	8003496 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <HAL_InitTick+0xe0>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e002      	b.n	8002868 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002868:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800286c:	4618      	mov	r0, r3
 800286e:	3730      	adds	r7, #48	; 0x30
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	431bde83 	.word	0x431bde83
 800287c:	20000404 	.word	0x20000404
 8002880:	40012c00 	.word	0x40012c00
 8002884:	20000024 	.word	0x20000024

08002888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800288c:	f001 fc5c 	bl	8004148 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002890:	e7fe      	b.n	8002890 <NMI_Handler+0x8>

08002892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002896:	e7fe      	b.n	8002896 <HardFault_Handler+0x4>

08002898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800289c:	e7fe      	b.n	800289c <MemManage_Handler+0x4>

0800289e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a2:	e7fe      	b.n	80028a2 <BusFault_Handler+0x4>

080028a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a8:	e7fe      	b.n	80028a8 <UsageFault_Handler+0x4>

080028aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
	...

080028b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <TIM1_UP_IRQHandler+0x10>)
 80028be:	f002 ff73 	bl	80057a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000404 	.word	0x20000404

080028cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <TIM3_IRQHandler+0x10>)
 80028d2:	f002 ff69 	bl	80057a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	2000018c 	.word	0x2000018c

080028e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e8:	4a14      	ldr	r2, [pc, #80]	; (800293c <_sbrk+0x5c>)
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <_sbrk+0x60>)
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <_sbrk+0x64>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <_sbrk+0x64>)
 80028fe:	4a12      	ldr	r2, [pc, #72]	; (8002948 <_sbrk+0x68>)
 8002900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <_sbrk+0x64>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	429a      	cmp	r2, r3
 800290e:	d207      	bcs.n	8002920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002910:	f006 fb8a 	bl	8009028 <__errno>
 8002914:	4603      	mov	r3, r0
 8002916:	220c      	movs	r2, #12
 8002918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800291a:	f04f 33ff 	mov.w	r3, #4294967295
 800291e:	e009      	b.n	8002934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <_sbrk+0x64>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	4a05      	ldr	r2, [pc, #20]	; (8002944 <_sbrk+0x64>)
 8002930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002932:	68fb      	ldr	r3, [r7, #12]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20005000 	.word	0x20005000
 8002940:	00000400 	.word	0x00000400
 8002944:	2000044c 	.word	0x2000044c
 8002948:	20001f78 	.word	0x20001f78

0800294c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002958:	f7ff fff8 	bl	800294c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800295c:	480b      	ldr	r0, [pc, #44]	; (800298c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800295e:	490c      	ldr	r1, [pc, #48]	; (8002990 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002960:	4a0c      	ldr	r2, [pc, #48]	; (8002994 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002964:	e002      	b.n	800296c <LoopCopyDataInit>

08002966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296a:	3304      	adds	r3, #4

0800296c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800296c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800296e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002970:	d3f9      	bcc.n	8002966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002974:	4c09      	ldr	r4, [pc, #36]	; (800299c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002978:	e001      	b.n	800297e <LoopFillZerobss>

0800297a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800297c:	3204      	adds	r2, #4

0800297e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800297e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002980:	d3fb      	bcc.n	800297a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002982:	f006 fb57 	bl	8009034 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002986:	f7fd ffd9 	bl	800093c <main>
  bx lr
 800298a:	4770      	bx	lr
  ldr r0, =_sdata
 800298c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002990:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002994:	0800ae9c 	.word	0x0800ae9c
  ldr r2, =_sbss
 8002998:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800299c:	20001f78 	.word	0x20001f78

080029a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029a0:	e7fe      	b.n	80029a0 <ADC1_2_IRQHandler>
	...

080029a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <HAL_Init+0x28>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a07      	ldr	r2, [pc, #28]	; (80029cc <HAL_Init+0x28>)
 80029ae:	f043 0310 	orr.w	r3, r3, #16
 80029b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b4:	2003      	movs	r0, #3
 80029b6:	f000 fd63 	bl	8003480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ba:	200f      	movs	r0, #15
 80029bc:	f7ff fef2 	bl	80027a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029c0:	f7ff fdd0 	bl	8002564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40022000 	.word	0x40022000

080029d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_IncTick+0x1c>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_IncTick+0x20>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4413      	add	r3, r2
 80029e0:	4a03      	ldr	r2, [pc, #12]	; (80029f0 <HAL_IncTick+0x20>)
 80029e2:	6013      	str	r3, [r2, #0]
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	20000028 	.word	0x20000028
 80029f0:	20000450 	.word	0x20000450

080029f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return uwTick;
 80029f8:	4b02      	ldr	r3, [pc, #8]	; (8002a04 <HAL_GetTick+0x10>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	20000450 	.word	0x20000450

08002a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a10:	f7ff fff0 	bl	80029f4 <HAL_GetTick>
 8002a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d005      	beq.n	8002a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_Delay+0x44>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a2e:	bf00      	nop
 8002a30:	f7ff ffe0 	bl	80029f4 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d8f7      	bhi.n	8002a30 <HAL_Delay+0x28>
  {
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000028 	.word	0x20000028

08002a50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0be      	b.n	8002bf0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff fda0 	bl	80025d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fbf1 	bl	800327c <ADC_ConversionStop_Disable>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 8099 	bne.w	8002bde <HAL_ADC_Init+0x18e>
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 8095 	bne.w	8002bde <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002abc:	f023 0302 	bic.w	r3, r3, #2
 8002ac0:	f043 0202 	orr.w	r2, r3, #2
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ad0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7b1b      	ldrb	r3, [r3, #12]
 8002ad6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ad8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae8:	d003      	beq.n	8002af2 <HAL_ADC_Init+0xa2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d102      	bne.n	8002af8 <HAL_ADC_Init+0xa8>
 8002af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af6:	e000      	b.n	8002afa <HAL_ADC_Init+0xaa>
 8002af8:	2300      	movs	r3, #0
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7d1b      	ldrb	r3, [r3, #20]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d119      	bne.n	8002b3c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7b1b      	ldrb	r3, [r3, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d109      	bne.n	8002b24 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	035a      	lsls	r2, r3, #13
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	e00b      	b.n	8002b3c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	f043 0220 	orr.w	r2, r3, #32
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	f043 0201 	orr.w	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <HAL_ADC_Init+0x1a8>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b6c:	d003      	beq.n	8002b76 <HAL_ADC_Init+0x126>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d104      	bne.n	8002b80 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	051b      	lsls	r3, r3, #20
 8002b7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <HAL_ADC_Init+0x1ac>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d10b      	bne.n	8002bbc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bba:	e018      	b.n	8002bee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	f023 0312 	bic.w	r3, r3, #18
 8002bc4:	f043 0210 	orr.w	r2, r3, #16
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	f043 0201 	orr.w	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bdc:	e007      	b.n	8002bee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	f043 0210 	orr.w	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	ffe1f7fd 	.word	0xffe1f7fd
 8002bfc:	ff1f0efe 	.word	0xff1f0efe

08002c00 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_Start+0x1a>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e098      	b.n	8002d4c <HAL_ADC_Start+0x14c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fad0 	bl	80031c8 <ADC_Enable>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 8087 	bne.w	8002d42 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a41      	ldr	r2, [pc, #260]	; (8002d54 <HAL_ADC_Start+0x154>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d105      	bne.n	8002c5e <HAL_ADC_Start+0x5e>
 8002c52:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <HAL_ADC_Start+0x158>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d115      	bne.n	8002c8a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d026      	beq.n	8002cc6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c88:	e01d      	b.n	8002cc6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a2f      	ldr	r2, [pc, #188]	; (8002d58 <HAL_ADC_Start+0x158>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d004      	beq.n	8002caa <HAL_ADC_Start+0xaa>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a2b      	ldr	r2, [pc, #172]	; (8002d54 <HAL_ADC_Start+0x154>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d10d      	bne.n	8002cc6 <HAL_ADC_Start+0xc6>
 8002caa:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_ADC_Start+0x158>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d006      	beq.n	8002ce0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	f023 0206 	bic.w	r2, r3, #6
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cde:	e002      	b.n	8002ce6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f06f 0202 	mvn.w	r2, #2
 8002cf6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d02:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d06:	d113      	bne.n	8002d30 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d0c:	4a11      	ldr	r2, [pc, #68]	; (8002d54 <HAL_ADC_Start+0x154>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d105      	bne.n	8002d1e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_ADC_Start+0x158>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d108      	bne.n	8002d30 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	e00c      	b.n	8002d4a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	e003      	b.n	8002d4a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40012800 	.word	0x40012800
 8002d58:	40012400 	.word	0x40012400

08002d5c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_ADC_Stop+0x1a>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e01a      	b.n	8002dac <HAL_ADC_Stop+0x50>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fa7c 	bl	800327c <ADC_ConversionStop_Disable>
 8002d84:	4603      	mov	r3, r0
 8002d86:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	f043 0201 	orr.w	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dca:	f7ff fe13 	bl	80029f4 <HAL_GetTick>
 8002dce:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	f043 0220 	orr.w	r2, r3, #32
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e0d3      	b.n	8002f9e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d131      	bne.n	8002e68 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d12a      	bne.n	8002e68 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e12:	e021      	b.n	8002e58 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1a:	d01d      	beq.n	8002e58 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <HAL_ADC_PollForConversion+0x7e>
 8002e22:	f7ff fde7 	bl	80029f4 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d212      	bcs.n	8002e58 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10b      	bne.n	8002e58 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	f043 0204 	orr.w	r2, r3, #4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e0a2      	b.n	8002f9e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0d6      	beq.n	8002e14 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e66:	e070      	b.n	8002f4a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002e68:	4b4f      	ldr	r3, [pc, #316]	; (8002fa8 <HAL_ADC_PollForConversion+0x1f4>)
 8002e6a:	681c      	ldr	r4, [r3, #0]
 8002e6c:	2002      	movs	r0, #2
 8002e6e:	f001 fa59 	bl	8004324 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e72:	4603      	mov	r3, r0
 8002e74:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6919      	ldr	r1, [r3, #16]
 8002e7e:	4b4b      	ldr	r3, [pc, #300]	; (8002fac <HAL_ADC_PollForConversion+0x1f8>)
 8002e80:	400b      	ands	r3, r1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d118      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0x104>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68d9      	ldr	r1, [r3, #12]
 8002e8c:	4b48      	ldr	r3, [pc, #288]	; (8002fb0 <HAL_ADC_PollForConversion+0x1fc>)
 8002e8e:	400b      	ands	r3, r1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d111      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0x104>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6919      	ldr	r1, [r3, #16]
 8002e9a:	4b46      	ldr	r3, [pc, #280]	; (8002fb4 <HAL_ADC_PollForConversion+0x200>)
 8002e9c:	400b      	ands	r3, r1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d108      	bne.n	8002eb4 <HAL_ADC_PollForConversion+0x100>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68d9      	ldr	r1, [r3, #12]
 8002ea8:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <HAL_ADC_PollForConversion+0x204>)
 8002eaa:	400b      	ands	r3, r1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_PollForConversion+0x100>
 8002eb0:	2314      	movs	r3, #20
 8002eb2:	e020      	b.n	8002ef6 <HAL_ADC_PollForConversion+0x142>
 8002eb4:	2329      	movs	r3, #41	; 0x29
 8002eb6:	e01e      	b.n	8002ef6 <HAL_ADC_PollForConversion+0x142>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6919      	ldr	r1, [r3, #16]
 8002ebe:	4b3d      	ldr	r3, [pc, #244]	; (8002fb4 <HAL_ADC_PollForConversion+0x200>)
 8002ec0:	400b      	ands	r3, r1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_ADC_PollForConversion+0x120>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68d9      	ldr	r1, [r3, #12]
 8002ecc:	4b3a      	ldr	r3, [pc, #232]	; (8002fb8 <HAL_ADC_PollForConversion+0x204>)
 8002ece:	400b      	ands	r3, r1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_ADC_PollForConversion+0x13c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6919      	ldr	r1, [r3, #16]
 8002eda:	4b38      	ldr	r3, [pc, #224]	; (8002fbc <HAL_ADC_PollForConversion+0x208>)
 8002edc:	400b      	ands	r3, r1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d108      	bne.n	8002ef4 <HAL_ADC_PollForConversion+0x140>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68d9      	ldr	r1, [r3, #12]
 8002ee8:	4b34      	ldr	r3, [pc, #208]	; (8002fbc <HAL_ADC_PollForConversion+0x208>)
 8002eea:	400b      	ands	r3, r1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_PollForConversion+0x140>
 8002ef0:	2354      	movs	r3, #84	; 0x54
 8002ef2:	e000      	b.n	8002ef6 <HAL_ADC_PollForConversion+0x142>
 8002ef4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002efc:	e021      	b.n	8002f42 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d01a      	beq.n	8002f3c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d007      	beq.n	8002f1c <HAL_ADC_PollForConversion+0x168>
 8002f0c:	f7ff fd72 	bl	80029f4 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d20f      	bcs.n	8002f3c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d90b      	bls.n	8002f3c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	f043 0204 	orr.w	r2, r3, #4
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e030      	b.n	8002f9e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d8d9      	bhi.n	8002efe <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f06f 0212 	mvn.w	r2, #18
 8002f52:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f6a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f6e:	d115      	bne.n	8002f9c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d111      	bne.n	8002f9c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	f043 0201 	orr.w	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd90      	pop	{r4, r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000020 	.word	0x20000020
 8002fac:	24924924 	.word	0x24924924
 8002fb0:	00924924 	.word	0x00924924
 8002fb4:	12492492 	.word	0x12492492
 8002fb8:	00492492 	.word	0x00492492
 8002fbc:	00249249 	.word	0x00249249

08002fc0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x20>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e0dc      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x1da>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b06      	cmp	r3, #6
 8003006:	d81c      	bhi.n	8003042 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	3b05      	subs	r3, #5
 800301a:	221f      	movs	r2, #31
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	4019      	ands	r1, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	3b05      	subs	r3, #5
 8003034:	fa00 f203 	lsl.w	r2, r0, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	635a      	str	r2, [r3, #52]	; 0x34
 8003040:	e03c      	b.n	80030bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d81c      	bhi.n	8003084 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	3b23      	subs	r3, #35	; 0x23
 800305c:	221f      	movs	r2, #31
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	4019      	ands	r1, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	3b23      	subs	r3, #35	; 0x23
 8003076:	fa00 f203 	lsl.w	r2, r0, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
 8003082:	e01b      	b.n	80030bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	3b41      	subs	r3, #65	; 0x41
 8003096:	221f      	movs	r2, #31
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	4019      	ands	r1, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	3b41      	subs	r3, #65	; 0x41
 80030b0:	fa00 f203 	lsl.w	r2, r0, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b09      	cmp	r3, #9
 80030c2:	d91c      	bls.n	80030fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68d9      	ldr	r1, [r3, #12]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	3b1e      	subs	r3, #30
 80030d6:	2207      	movs	r2, #7
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	4019      	ands	r1, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6898      	ldr	r0, [r3, #8]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	3b1e      	subs	r3, #30
 80030f0:	fa00 f203 	lsl.w	r2, r0, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	e019      	b.n	8003132 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6919      	ldr	r1, [r3, #16]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	2207      	movs	r2, #7
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	4019      	ands	r1, r3
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6898      	ldr	r0, [r3, #8]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	fa00 f203 	lsl.w	r2, r0, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b10      	cmp	r3, #16
 8003138:	d003      	beq.n	8003142 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800313e:	2b11      	cmp	r3, #17
 8003140:	d132      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <HAL_ADC_ConfigChannel+0x1e4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d125      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d126      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003168:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b10      	cmp	r3, #16
 8003170:	d11a      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003172:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	0c9a      	lsrs	r2, r3, #18
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003188:	e002      	b.n	8003190 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	3b01      	subs	r3, #1
 800318e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f9      	bne.n	800318a <HAL_ADC_ConfigChannel+0x1b2>
 8003196:	e007      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	40012400 	.word	0x40012400
 80031c0:	20000020 	.word	0x20000020
 80031c4:	431bde83 	.word	0x431bde83

080031c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d040      	beq.n	8003268 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031f6:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <ADC_Enable+0xac>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <ADC_Enable+0xb0>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	0c9b      	lsrs	r3, r3, #18
 8003202:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003204:	e002      	b.n	800320c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3b01      	subs	r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f9      	bne.n	8003206 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003212:	f7ff fbef 	bl	80029f4 <HAL_GetTick>
 8003216:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003218:	e01f      	b.n	800325a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800321a:	f7ff fbeb 	bl	80029f4 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d918      	bls.n	800325a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d011      	beq.n	800325a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	f043 0210 	orr.w	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e007      	b.n	800326a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b01      	cmp	r3, #1
 8003266:	d1d8      	bne.n	800321a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000020 	.word	0x20000020
 8003278:	431bde83 	.word	0x431bde83

0800327c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d12e      	bne.n	80032f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032a6:	f7ff fba5 	bl	80029f4 <HAL_GetTick>
 80032aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032ac:	e01b      	b.n	80032e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032ae:	f7ff fba1 	bl	80029f4 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d914      	bls.n	80032e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d10d      	bne.n	80032e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	f043 0210 	orr.w	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	f043 0201 	orr.w	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e007      	b.n	80032f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d0dc      	beq.n	80032ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <__NVIC_SetPriorityGrouping+0x44>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800331c:	4013      	ands	r3, r2
 800331e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800332c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003332:	4a04      	ldr	r2, [pc, #16]	; (8003344 <__NVIC_SetPriorityGrouping+0x44>)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	60d3      	str	r3, [r2, #12]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <__NVIC_GetPriorityGrouping+0x18>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	f003 0307 	and.w	r3, r3, #7
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	2b00      	cmp	r3, #0
 8003374:	db0b      	blt.n	800338e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	f003 021f 	and.w	r2, r3, #31
 800337c:	4906      	ldr	r1, [pc, #24]	; (8003398 <__NVIC_EnableIRQ+0x34>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2001      	movs	r0, #1
 8003386:	fa00 f202 	lsl.w	r2, r0, r2
 800338a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	e000e100 	.word	0xe000e100

0800339c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	db0a      	blt.n	80033c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	490c      	ldr	r1, [pc, #48]	; (80033e8 <__NVIC_SetPriority+0x4c>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	440b      	add	r3, r1
 80033c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c4:	e00a      	b.n	80033dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4908      	ldr	r1, [pc, #32]	; (80033ec <__NVIC_SetPriority+0x50>)
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	3b04      	subs	r3, #4
 80033d4:	0112      	lsls	r2, r2, #4
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	440b      	add	r3, r1
 80033da:	761a      	strb	r2, [r3, #24]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000e100 	.word	0xe000e100
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f1c3 0307 	rsb	r3, r3, #7
 800340a:	2b04      	cmp	r3, #4
 800340c:	bf28      	it	cs
 800340e:	2304      	movcs	r3, #4
 8003410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3304      	adds	r3, #4
 8003416:	2b06      	cmp	r3, #6
 8003418:	d902      	bls.n	8003420 <NVIC_EncodePriority+0x30>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3b03      	subs	r3, #3
 800341e:	e000      	b.n	8003422 <NVIC_EncodePriority+0x32>
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	401a      	ands	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003438:	f04f 31ff 	mov.w	r1, #4294967295
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	43d9      	mvns	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	4313      	orrs	r3, r2
         );
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003458:	f3bf 8f4f 	dsb	sy
}
 800345c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <__NVIC_SystemReset+0x24>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003466:	4904      	ldr	r1, [pc, #16]	; (8003478 <__NVIC_SystemReset+0x24>)
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <__NVIC_SystemReset+0x28>)
 800346a:	4313      	orrs	r3, r2
 800346c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800346e:	f3bf 8f4f 	dsb	sy
}
 8003472:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <__NVIC_SystemReset+0x20>
 8003478:	e000ed00 	.word	0xe000ed00
 800347c:	05fa0004 	.word	0x05fa0004

08003480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ff39 	bl	8003300 <__NVIC_SetPriorityGrouping>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003496:	b580      	push	{r7, lr}
 8003498:	b086      	sub	sp, #24
 800349a:	af00      	add	r7, sp, #0
 800349c:	4603      	mov	r3, r0
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a8:	f7ff ff4e 	bl	8003348 <__NVIC_GetPriorityGrouping>
 80034ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	6978      	ldr	r0, [r7, #20]
 80034b4:	f7ff ff9c 	bl	80033f0 <NVIC_EncodePriority>
 80034b8:	4602      	mov	r2, r0
 80034ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff6b 	bl	800339c <__NVIC_SetPriority>
}
 80034c6:	bf00      	nop
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	4603      	mov	r3, r0
 80034d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff41 	bl	8003364 <__NVIC_EnableIRQ>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80034ee:	f7ff ffb1 	bl	8003454 <__NVIC_SystemReset>
	...

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b08b      	sub	sp, #44	; 0x2c
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034fe:	2300      	movs	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003506:	e169      	b.n	80037dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003508:	2201      	movs	r2, #1
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	429a      	cmp	r2, r3
 8003522:	f040 8158 	bne.w	80037d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4a9a      	ldr	r2, [pc, #616]	; (8003794 <HAL_GPIO_Init+0x2a0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d05e      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003530:	4a98      	ldr	r2, [pc, #608]	; (8003794 <HAL_GPIO_Init+0x2a0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d875      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 8003536:	4a98      	ldr	r2, [pc, #608]	; (8003798 <HAL_GPIO_Init+0x2a4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d058      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 800353c:	4a96      	ldr	r2, [pc, #600]	; (8003798 <HAL_GPIO_Init+0x2a4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d86f      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 8003542:	4a96      	ldr	r2, [pc, #600]	; (800379c <HAL_GPIO_Init+0x2a8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d052      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003548:	4a94      	ldr	r2, [pc, #592]	; (800379c <HAL_GPIO_Init+0x2a8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d869      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 800354e:	4a94      	ldr	r2, [pc, #592]	; (80037a0 <HAL_GPIO_Init+0x2ac>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d04c      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003554:	4a92      	ldr	r2, [pc, #584]	; (80037a0 <HAL_GPIO_Init+0x2ac>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d863      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 800355a:	4a92      	ldr	r2, [pc, #584]	; (80037a4 <HAL_GPIO_Init+0x2b0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d046      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003560:	4a90      	ldr	r2, [pc, #576]	; (80037a4 <HAL_GPIO_Init+0x2b0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d85d      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 8003566:	2b12      	cmp	r3, #18
 8003568:	d82a      	bhi.n	80035c0 <HAL_GPIO_Init+0xcc>
 800356a:	2b12      	cmp	r3, #18
 800356c:	d859      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 800356e:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <HAL_GPIO_Init+0x80>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	080035ef 	.word	0x080035ef
 8003578:	080035c9 	.word	0x080035c9
 800357c:	080035db 	.word	0x080035db
 8003580:	0800361d 	.word	0x0800361d
 8003584:	08003623 	.word	0x08003623
 8003588:	08003623 	.word	0x08003623
 800358c:	08003623 	.word	0x08003623
 8003590:	08003623 	.word	0x08003623
 8003594:	08003623 	.word	0x08003623
 8003598:	08003623 	.word	0x08003623
 800359c:	08003623 	.word	0x08003623
 80035a0:	08003623 	.word	0x08003623
 80035a4:	08003623 	.word	0x08003623
 80035a8:	08003623 	.word	0x08003623
 80035ac:	08003623 	.word	0x08003623
 80035b0:	08003623 	.word	0x08003623
 80035b4:	08003623 	.word	0x08003623
 80035b8:	080035d1 	.word	0x080035d1
 80035bc:	080035e5 	.word	0x080035e5
 80035c0:	4a79      	ldr	r2, [pc, #484]	; (80037a8 <HAL_GPIO_Init+0x2b4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035c6:	e02c      	b.n	8003622 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	623b      	str	r3, [r7, #32]
          break;
 80035ce:	e029      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	3304      	adds	r3, #4
 80035d6:	623b      	str	r3, [r7, #32]
          break;
 80035d8:	e024      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	3308      	adds	r3, #8
 80035e0:	623b      	str	r3, [r7, #32]
          break;
 80035e2:	e01f      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	330c      	adds	r3, #12
 80035ea:	623b      	str	r3, [r7, #32]
          break;
 80035ec:	e01a      	b.n	8003624 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035f6:	2304      	movs	r3, #4
 80035f8:	623b      	str	r3, [r7, #32]
          break;
 80035fa:	e013      	b.n	8003624 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d105      	bne.n	8003610 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003604:	2308      	movs	r3, #8
 8003606:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	611a      	str	r2, [r3, #16]
          break;
 800360e:	e009      	b.n	8003624 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003610:	2308      	movs	r3, #8
 8003612:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	615a      	str	r2, [r3, #20]
          break;
 800361a:	e003      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800361c:	2300      	movs	r3, #0
 800361e:	623b      	str	r3, [r7, #32]
          break;
 8003620:	e000      	b.n	8003624 <HAL_GPIO_Init+0x130>
          break;
 8003622:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2bff      	cmp	r3, #255	; 0xff
 8003628:	d801      	bhi.n	800362e <HAL_GPIO_Init+0x13a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	e001      	b.n	8003632 <HAL_GPIO_Init+0x13e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3304      	adds	r3, #4
 8003632:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2bff      	cmp	r3, #255	; 0xff
 8003638:	d802      	bhi.n	8003640 <HAL_GPIO_Init+0x14c>
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	e002      	b.n	8003646 <HAL_GPIO_Init+0x152>
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	3b08      	subs	r3, #8
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	210f      	movs	r1, #15
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	401a      	ands	r2, r3
 8003658:	6a39      	ldr	r1, [r7, #32]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	431a      	orrs	r2, r3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80b1 	beq.w	80037d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003674:	4b4d      	ldr	r3, [pc, #308]	; (80037ac <HAL_GPIO_Init+0x2b8>)
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	4a4c      	ldr	r2, [pc, #304]	; (80037ac <HAL_GPIO_Init+0x2b8>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6193      	str	r3, [r2, #24]
 8003680:	4b4a      	ldr	r3, [pc, #296]	; (80037ac <HAL_GPIO_Init+0x2b8>)
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800368c:	4a48      	ldr	r2, [pc, #288]	; (80037b0 <HAL_GPIO_Init+0x2bc>)
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	3302      	adds	r3, #2
 8003694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003698:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	220f      	movs	r2, #15
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a40      	ldr	r2, [pc, #256]	; (80037b4 <HAL_GPIO_Init+0x2c0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <HAL_GPIO_Init+0x1ec>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a3f      	ldr	r2, [pc, #252]	; (80037b8 <HAL_GPIO_Init+0x2c4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00d      	beq.n	80036dc <HAL_GPIO_Init+0x1e8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a3e      	ldr	r2, [pc, #248]	; (80037bc <HAL_GPIO_Init+0x2c8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d007      	beq.n	80036d8 <HAL_GPIO_Init+0x1e4>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a3d      	ldr	r2, [pc, #244]	; (80037c0 <HAL_GPIO_Init+0x2cc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d101      	bne.n	80036d4 <HAL_GPIO_Init+0x1e0>
 80036d0:	2303      	movs	r3, #3
 80036d2:	e006      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036d4:	2304      	movs	r3, #4
 80036d6:	e004      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036d8:	2302      	movs	r3, #2
 80036da:	e002      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036e0:	2300      	movs	r3, #0
 80036e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e4:	f002 0203 	and.w	r2, r2, #3
 80036e8:	0092      	lsls	r2, r2, #2
 80036ea:	4093      	lsls	r3, r2
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036f2:	492f      	ldr	r1, [pc, #188]	; (80037b0 <HAL_GPIO_Init+0x2bc>)
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	089b      	lsrs	r3, r3, #2
 80036f8:	3302      	adds	r3, #2
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d006      	beq.n	800371a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800370c:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	492c      	ldr	r1, [pc, #176]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]
 8003718:	e006      	b.n	8003728 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800371a:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	43db      	mvns	r3, r3
 8003722:	4928      	ldr	r1, [pc, #160]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003724:	4013      	ands	r3, r2
 8003726:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d006      	beq.n	8003742 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003734:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	4922      	ldr	r1, [pc, #136]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	60cb      	str	r3, [r1, #12]
 8003740:	e006      	b.n	8003750 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	43db      	mvns	r3, r3
 800374a:	491e      	ldr	r1, [pc, #120]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 800374c:	4013      	ands	r3, r2
 800374e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800375c:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	4918      	ldr	r1, [pc, #96]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
 8003768:	e006      	b.n	8003778 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800376a:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	43db      	mvns	r3, r3
 8003772:	4914      	ldr	r1, [pc, #80]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003774:	4013      	ands	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d021      	beq.n	80037c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003784:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	490e      	ldr	r1, [pc, #56]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]
 8003790:	e021      	b.n	80037d6 <HAL_GPIO_Init+0x2e2>
 8003792:	bf00      	nop
 8003794:	10320000 	.word	0x10320000
 8003798:	10310000 	.word	0x10310000
 800379c:	10220000 	.word	0x10220000
 80037a0:	10210000 	.word	0x10210000
 80037a4:	10120000 	.word	0x10120000
 80037a8:	10110000 	.word	0x10110000
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40010800 	.word	0x40010800
 80037b8:	40010c00 	.word	0x40010c00
 80037bc:	40011000 	.word	0x40011000
 80037c0:	40011400 	.word	0x40011400
 80037c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_GPIO_Init+0x304>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	43db      	mvns	r3, r3
 80037d0:	4909      	ldr	r1, [pc, #36]	; (80037f8 <HAL_GPIO_Init+0x304>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	3301      	adds	r3, #1
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	fa22 f303 	lsr.w	r3, r2, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f47f ae8e 	bne.w	8003508 <HAL_GPIO_Init+0x14>
  }
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	372c      	adds	r7, #44	; 0x2c
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40010400 	.word	0x40010400

080037fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	887b      	ldrh	r3, [r7, #2]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
 8003818:	e001      	b.n	800381e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800381e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	460b      	mov	r3, r1
 8003834:	807b      	strh	r3, [r7, #2]
 8003836:	4613      	mov	r3, r2
 8003838:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800383a:	787b      	ldrb	r3, [r7, #1]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003840:	887a      	ldrh	r2, [r7, #2]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003846:	e003      	b.n	8003850 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003848:	887b      	ldrh	r3, [r7, #2]
 800384a:	041a      	lsls	r2, r3, #16
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	611a      	str	r2, [r3, #16]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e034      	b.n	80038d6 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003874:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f245 5255 	movw	r2, #21845	; 0x5555
 800387e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6852      	ldr	r2, [r2, #4]
 8003888:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6892      	ldr	r2, [r2, #8]
 8003892:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003894:	f7ff f8ae 	bl	80029f4 <HAL_GetTick>
 8003898:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800389a:	e00f      	b.n	80038bc <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800389c:	f7ff f8aa 	bl	80029f4 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b27      	cmp	r3, #39	; 0x27
 80038a8:	d908      	bls.n	80038bc <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e00c      	b.n	80038d6 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e8      	bne.n	800389c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80038d2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80038ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]
}
 8003906:	bf00      	nop
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	420e0020 	.word	0x420e0020

08003914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e272      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8087 	beq.w	8003a42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003934:	4b92      	ldr	r3, [pc, #584]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 030c 	and.w	r3, r3, #12
 800393c:	2b04      	cmp	r3, #4
 800393e:	d00c      	beq.n	800395a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003940:	4b8f      	ldr	r3, [pc, #572]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b08      	cmp	r3, #8
 800394a:	d112      	bne.n	8003972 <HAL_RCC_OscConfig+0x5e>
 800394c:	4b8c      	ldr	r3, [pc, #560]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003958:	d10b      	bne.n	8003972 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395a:	4b89      	ldr	r3, [pc, #548]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d06c      	beq.n	8003a40 <HAL_RCC_OscConfig+0x12c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d168      	bne.n	8003a40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e24c      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397a:	d106      	bne.n	800398a <HAL_RCC_OscConfig+0x76>
 800397c:	4b80      	ldr	r3, [pc, #512]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a7f      	ldr	r2, [pc, #508]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e02e      	b.n	80039e8 <HAL_RCC_OscConfig+0xd4>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10c      	bne.n	80039ac <HAL_RCC_OscConfig+0x98>
 8003992:	4b7b      	ldr	r3, [pc, #492]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a7a      	ldr	r2, [pc, #488]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	4b78      	ldr	r3, [pc, #480]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a77      	ldr	r2, [pc, #476]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e01d      	b.n	80039e8 <HAL_RCC_OscConfig+0xd4>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0xbc>
 80039b6:	4b72      	ldr	r3, [pc, #456]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a71      	ldr	r2, [pc, #452]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	4b6f      	ldr	r3, [pc, #444]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a6e      	ldr	r2, [pc, #440]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e00b      	b.n	80039e8 <HAL_RCC_OscConfig+0xd4>
 80039d0:	4b6b      	ldr	r3, [pc, #428]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a6a      	ldr	r2, [pc, #424]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 80039d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b68      	ldr	r3, [pc, #416]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a67      	ldr	r2, [pc, #412]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 80039e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d013      	beq.n	8003a18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7ff f800 	bl	80029f4 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f8:	f7fe fffc 	bl	80029f4 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	; 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e200      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0a:	4b5d      	ldr	r3, [pc, #372]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0xe4>
 8003a16:	e014      	b.n	8003a42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fe ffec 	bl	80029f4 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a20:	f7fe ffe8 	bl	80029f4 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	; 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e1ec      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a32:	4b53      	ldr	r3, [pc, #332]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x10c>
 8003a3e:	e000      	b.n	8003a42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d063      	beq.n	8003b16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a4e:	4b4c      	ldr	r3, [pc, #304]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00b      	beq.n	8003a72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a5a:	4b49      	ldr	r3, [pc, #292]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d11c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x18c>
 8003a66:	4b46      	ldr	r3, [pc, #280]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d116      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a72:	4b43      	ldr	r3, [pc, #268]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_RCC_OscConfig+0x176>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d001      	beq.n	8003a8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e1c0      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8a:	4b3d      	ldr	r3, [pc, #244]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4939      	ldr	r1, [pc, #228]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9e:	e03a      	b.n	8003b16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d020      	beq.n	8003aea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aa8:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aae:	f7fe ffa1 	bl	80029f4 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab6:	f7fe ff9d 	bl	80029f4 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e1a1      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac8:	4b2d      	ldr	r3, [pc, #180]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad4:	4b2a      	ldr	r3, [pc, #168]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4927      	ldr	r1, [pc, #156]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	600b      	str	r3, [r1, #0]
 8003ae8:	e015      	b.n	8003b16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aea:	4b26      	ldr	r3, [pc, #152]	; (8003b84 <HAL_RCC_OscConfig+0x270>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fe ff80 	bl	80029f4 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af8:	f7fe ff7c 	bl	80029f4 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e180      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0a:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d03a      	beq.n	8003b98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d019      	beq.n	8003b5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b2a:	4b17      	ldr	r3, [pc, #92]	; (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b30:	f7fe ff60 	bl	80029f4 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b38:	f7fe ff5c 	bl	80029f4 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e160      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b56:	2001      	movs	r0, #1
 8003b58:	f000 fb0a 	bl	8004170 <RCC_Delay>
 8003b5c:	e01c      	b.n	8003b98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b5e:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b64:	f7fe ff46 	bl	80029f4 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b6a:	e00f      	b.n	8003b8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b6c:	f7fe ff42 	bl	80029f4 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d908      	bls.n	8003b8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e146      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
 8003b7e:	bf00      	nop
 8003b80:	40021000 	.word	0x40021000
 8003b84:	42420000 	.word	0x42420000
 8003b88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b8c:	4b92      	ldr	r3, [pc, #584]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e9      	bne.n	8003b6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80a6 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003baa:	4b8b      	ldr	r3, [pc, #556]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10d      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb6:	4b88      	ldr	r3, [pc, #544]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	4a87      	ldr	r2, [pc, #540]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	61d3      	str	r3, [r2, #28]
 8003bc2:	4b85      	ldr	r3, [pc, #532]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	4b82      	ldr	r3, [pc, #520]	; (8003ddc <HAL_RCC_OscConfig+0x4c8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d118      	bne.n	8003c10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bde:	4b7f      	ldr	r3, [pc, #508]	; (8003ddc <HAL_RCC_OscConfig+0x4c8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a7e      	ldr	r2, [pc, #504]	; (8003ddc <HAL_RCC_OscConfig+0x4c8>)
 8003be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bea:	f7fe ff03 	bl	80029f4 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf2:	f7fe feff 	bl	80029f4 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b64      	cmp	r3, #100	; 0x64
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e103      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	4b75      	ldr	r3, [pc, #468]	; (8003ddc <HAL_RCC_OscConfig+0x4c8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d106      	bne.n	8003c26 <HAL_RCC_OscConfig+0x312>
 8003c18:	4b6f      	ldr	r3, [pc, #444]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	4a6e      	ldr	r2, [pc, #440]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	6213      	str	r3, [r2, #32]
 8003c24:	e02d      	b.n	8003c82 <HAL_RCC_OscConfig+0x36e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x334>
 8003c2e:	4b6a      	ldr	r3, [pc, #424]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	4a69      	ldr	r2, [pc, #420]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	6213      	str	r3, [r2, #32]
 8003c3a:	4b67      	ldr	r3, [pc, #412]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	4a66      	ldr	r2, [pc, #408]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	f023 0304 	bic.w	r3, r3, #4
 8003c44:	6213      	str	r3, [r2, #32]
 8003c46:	e01c      	b.n	8003c82 <HAL_RCC_OscConfig+0x36e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	2b05      	cmp	r3, #5
 8003c4e:	d10c      	bne.n	8003c6a <HAL_RCC_OscConfig+0x356>
 8003c50:	4b61      	ldr	r3, [pc, #388]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	4a60      	ldr	r2, [pc, #384]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c56:	f043 0304 	orr.w	r3, r3, #4
 8003c5a:	6213      	str	r3, [r2, #32]
 8003c5c:	4b5e      	ldr	r3, [pc, #376]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	4a5d      	ldr	r2, [pc, #372]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6213      	str	r3, [r2, #32]
 8003c68:	e00b      	b.n	8003c82 <HAL_RCC_OscConfig+0x36e>
 8003c6a:	4b5b      	ldr	r3, [pc, #364]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4a5a      	ldr	r2, [pc, #360]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	6213      	str	r3, [r2, #32]
 8003c76:	4b58      	ldr	r3, [pc, #352]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	4a57      	ldr	r2, [pc, #348]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c7c:	f023 0304 	bic.w	r3, r3, #4
 8003c80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d015      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8a:	f7fe feb3 	bl	80029f4 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fe feaf 	bl	80029f4 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e0b1      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca8:	4b4b      	ldr	r3, [pc, #300]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ee      	beq.n	8003c92 <HAL_RCC_OscConfig+0x37e>
 8003cb4:	e014      	b.n	8003ce0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb6:	f7fe fe9d 	bl	80029f4 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbe:	f7fe fe99 	bl	80029f4 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e09b      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd4:	4b40      	ldr	r3, [pc, #256]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1ee      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d105      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce6:	4b3c      	ldr	r3, [pc, #240]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	4a3b      	ldr	r2, [pc, #236]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8087 	beq.w	8003e0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cfc:	4b36      	ldr	r3, [pc, #216]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 030c 	and.w	r3, r3, #12
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d061      	beq.n	8003dcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d146      	bne.n	8003d9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d10:	4b33      	ldr	r3, [pc, #204]	; (8003de0 <HAL_RCC_OscConfig+0x4cc>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d16:	f7fe fe6d 	bl	80029f4 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1e:	f7fe fe69 	bl	80029f4 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e06d      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d30:	4b29      	ldr	r3, [pc, #164]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f0      	bne.n	8003d1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d44:	d108      	bne.n	8003d58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	4921      	ldr	r1, [pc, #132]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a19      	ldr	r1, [r3, #32]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	491b      	ldr	r1, [pc, #108]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d70:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x4cc>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d76:	f7fe fe3d 	bl	80029f4 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fe fe39 	bl	80029f4 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e03d      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x46a>
 8003d9c:	e035      	b.n	8003e0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9e:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <HAL_RCC_OscConfig+0x4cc>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fe fe26 	bl	80029f4 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fe fe22 	bl	80029f4 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e026      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_RCC_OscConfig+0x4c4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x498>
 8003dca:	e01e      	b.n	8003e0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e019      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_OscConfig+0x500>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d001      	beq.n	8003e0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000

08003e18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0d0      	b.n	8003fce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b6a      	ldr	r3, [pc, #424]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d910      	bls.n	8003e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b67      	ldr	r3, [pc, #412]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 0207 	bic.w	r2, r3, #7
 8003e42:	4965      	ldr	r1, [pc, #404]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b63      	ldr	r3, [pc, #396]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0b8      	b.n	8003fce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d020      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e74:	4b59      	ldr	r3, [pc, #356]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4a58      	ldr	r2, [pc, #352]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e8c:	4b53      	ldr	r3, [pc, #332]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a52      	ldr	r2, [pc, #328]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003e92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e98:	4b50      	ldr	r3, [pc, #320]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	494d      	ldr	r1, [pc, #308]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d040      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d115      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e07f      	b.n	8003fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed6:	4b41      	ldr	r3, [pc, #260]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e073      	b.n	8003fce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee6:	4b3d      	ldr	r3, [pc, #244]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e06b      	b.n	8003fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f023 0203 	bic.w	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4936      	ldr	r1, [pc, #216]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f08:	f7fe fd74 	bl	80029f4 <HAL_GetTick>
 8003f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f10:	f7fe fd70 	bl	80029f4 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e053      	b.n	8003fce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	4b2d      	ldr	r3, [pc, #180]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 020c 	and.w	r2, r3, #12
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d1eb      	bne.n	8003f10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f38:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d210      	bcs.n	8003f68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 0207 	bic.w	r2, r3, #7
 8003f4e:	4922      	ldr	r1, [pc, #136]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e032      	b.n	8003fce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f74:	4b19      	ldr	r3, [pc, #100]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4916      	ldr	r1, [pc, #88]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f92:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	490e      	ldr	r1, [pc, #56]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fa6:	f000 f82d 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003faa:	4602      	mov	r2, r0
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	490a      	ldr	r1, [pc, #40]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb8:	5ccb      	ldrb	r3, [r1, r3]
 8003fba:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbe:	4a09      	ldr	r2, [pc, #36]	; (8003fe4 <HAL_RCC_ClockConfig+0x1cc>)
 8003fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fc2:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <HAL_RCC_ClockConfig+0x1d0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe fbec 	bl	80027a4 <HAL_InitTick>

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40022000 	.word	0x40022000
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	0800ae20 	.word	0x0800ae20
 8003fe4:	20000020 	.word	0x20000020
 8003fe8:	20000024 	.word	0x20000024

08003fec <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003ff0:	4b03      	ldr	r3, [pc, #12]	; (8004000 <HAL_RCC_EnableCSS+0x14>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
}
 8003ff6:	bf00      	nop
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	4242004c 	.word	0x4242004c

08004004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800401e:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <HAL_RCC_GetSysClockFreq+0x94>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b04      	cmp	r3, #4
 800402c:	d002      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x30>
 800402e:	2b08      	cmp	r3, #8
 8004030:	d003      	beq.n	800403a <HAL_RCC_GetSysClockFreq+0x36>
 8004032:	e027      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <HAL_RCC_GetSysClockFreq+0x98>)
 8004036:	613b      	str	r3, [r7, #16]
      break;
 8004038:	e027      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	0c9b      	lsrs	r3, r3, #18
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004044:	5cd3      	ldrb	r3, [r2, r3]
 8004046:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d010      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004052:	4b11      	ldr	r3, [pc, #68]	; (8004098 <HAL_RCC_GetSysClockFreq+0x94>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	0c5b      	lsrs	r3, r3, #17
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	4a11      	ldr	r2, [pc, #68]	; (80040a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800405e:	5cd3      	ldrb	r3, [r2, r3]
 8004060:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a0d      	ldr	r2, [pc, #52]	; (800409c <HAL_RCC_GetSysClockFreq+0x98>)
 8004066:	fb03 f202 	mul.w	r2, r3, r2
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e004      	b.n	800407e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a0c      	ldr	r2, [pc, #48]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004078:	fb02 f303 	mul.w	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	613b      	str	r3, [r7, #16]
      break;
 8004082:	e002      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_RCC_GetSysClockFreq+0x98>)
 8004086:	613b      	str	r3, [r7, #16]
      break;
 8004088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800408a:	693b      	ldr	r3, [r7, #16]
}
 800408c:	4618      	mov	r0, r3
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000
 800409c:	007a1200 	.word	0x007a1200
 80040a0:	0800ae38 	.word	0x0800ae38
 80040a4:	0800ae48 	.word	0x0800ae48
 80040a8:	003d0900 	.word	0x003d0900

080040ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b0:	4b02      	ldr	r3, [pc, #8]	; (80040bc <HAL_RCC_GetHCLKFreq+0x10>)
 80040b2:	681b      	ldr	r3, [r3, #0]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr
 80040bc:	20000020 	.word	0x20000020

080040c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040c4:	f7ff fff2 	bl	80040ac <HAL_RCC_GetHCLKFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	0adb      	lsrs	r3, r3, #11
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	4903      	ldr	r1, [pc, #12]	; (80040e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	0800ae30 	.word	0x0800ae30

080040e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	220f      	movs	r2, #15
 80040f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <HAL_RCC_GetClockConfig+0x58>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0203 	and.w	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004104:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <HAL_RCC_GetClockConfig+0x58>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_RCC_GetClockConfig+0x58>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800411c:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_RCC_GetClockConfig+0x58>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	08db      	lsrs	r3, r3, #3
 8004122:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_RCC_GetClockConfig+0x5c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0207 	and.w	r2, r3, #7
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	40021000 	.word	0x40021000
 8004144:	40022000 	.word	0x40022000

08004148 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <HAL_RCC_NMI_IRQHandler+0x20>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004154:	2b80      	cmp	r3, #128	; 0x80
 8004156:	d104      	bne.n	8004162 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004158:	f000 f828 	bl	80041ac <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <HAL_RCC_NMI_IRQHandler+0x24>)
 800415e:	2280      	movs	r2, #128	; 0x80
 8004160:	701a      	strb	r2, [r3, #0]
  }
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000
 800416c:	4002100a 	.word	0x4002100a

08004170 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004178:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <RCC_Delay+0x34>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <RCC_Delay+0x38>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	0a5b      	lsrs	r3, r3, #9
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800418c:	bf00      	nop
  }
  while (Delay --);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1e5a      	subs	r2, r3, #1
 8004192:	60fa      	str	r2, [r7, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f9      	bne.n	800418c <RCC_Delay+0x1c>
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	20000020 	.word	0x20000020
 80041a8:	10624dd3 	.word	0x10624dd3

080041ac <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d07d      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80041d4:	2300      	movs	r3, #0
 80041d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d8:	4b4f      	ldr	r3, [pc, #316]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10d      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e4:	4b4c      	ldr	r3, [pc, #304]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	4a4b      	ldr	r2, [pc, #300]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ee:	61d3      	str	r3, [r2, #28]
 80041f0:	4b49      	ldr	r3, [pc, #292]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041fc:	2301      	movs	r3, #1
 80041fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004200:	4b46      	ldr	r3, [pc, #280]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004208:	2b00      	cmp	r3, #0
 800420a:	d118      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800420c:	4b43      	ldr	r3, [pc, #268]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a42      	ldr	r2, [pc, #264]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004216:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004218:	f7fe fbec 	bl	80029f4 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421e:	e008      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004220:	f7fe fbe8 	bl	80029f4 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b64      	cmp	r3, #100	; 0x64
 800422c:	d901      	bls.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e06d      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004232:	4b3a      	ldr	r3, [pc, #232]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800423e:	4b36      	ldr	r3, [pc, #216]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d02e      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	429a      	cmp	r2, r3
 800425a:	d027      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800425c:	4b2e      	ldr	r3, [pc, #184]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004264:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004266:	4b2e      	ldr	r3, [pc, #184]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004268:	2201      	movs	r2, #1
 800426a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800426c:	4b2c      	ldr	r3, [pc, #176]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004272:	4a29      	ldr	r2, [pc, #164]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d014      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004282:	f7fe fbb7 	bl	80029f4 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004288:	e00a      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428a:	f7fe fbb3 	bl	80029f4 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f241 3288 	movw	r2, #5000	; 0x1388
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e036      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a0:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ee      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ac:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4917      	ldr	r1, [pc, #92]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042be:	7dfb      	ldrb	r3, [r7, #23]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d105      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c4:	4b14      	ldr	r3, [pc, #80]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	4a13      	ldr	r2, [pc, #76]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042dc:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	490b      	ldr	r1, [pc, #44]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042fa:	4b07      	ldr	r3, [pc, #28]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	4904      	ldr	r1, [pc, #16]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40021000 	.word	0x40021000
 800431c:	40007000 	.word	0x40007000
 8004320:	42420440 	.word	0x42420440

08004324 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	2300      	movs	r3, #0
 8004336:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	2300      	movs	r3, #0
 800433e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b10      	cmp	r3, #16
 8004344:	d00a      	beq.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b10      	cmp	r3, #16
 800434a:	f200 808a 	bhi.w	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d045      	beq.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d075      	beq.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800435a:	e082      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800435c:	4b46      	ldr	r3, [pc, #280]	; (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004362:	4b45      	ldr	r3, [pc, #276]	; (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d07b      	beq.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	0c9b      	lsrs	r3, r3, #18
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	4a41      	ldr	r2, [pc, #260]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004378:	5cd3      	ldrb	r3, [r2, r3]
 800437a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d015      	beq.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004386:	4b3c      	ldr	r3, [pc, #240]	; (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	0c5b      	lsrs	r3, r3, #17
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	4a3b      	ldr	r2, [pc, #236]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004392:	5cd3      	ldrb	r3, [r2, r3]
 8004394:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00d      	beq.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80043a0:	4a38      	ldr	r2, [pc, #224]	; (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	e004      	b.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4a34      	ldr	r2, [pc, #208]	; (8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80043bc:	4b2e      	ldr	r3, [pc, #184]	; (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c8:	d102      	bne.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	61bb      	str	r3, [r7, #24]
      break;
 80043ce:	e04a      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	4a2d      	ldr	r2, [pc, #180]	; (800448c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	61bb      	str	r3, [r7, #24]
      break;
 80043de:	e042      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f0:	d108      	bne.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80043fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	e01f      	b.n	8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800440e:	d109      	bne.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004410:	4b19      	ldr	r3, [pc, #100]	; (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800441c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	e00f      	b.n	8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800442e:	d11c      	bne.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004430:	4b11      	ldr	r3, [pc, #68]	; (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d016      	beq.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800443c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004440:	61bb      	str	r3, [r7, #24]
      break;
 8004442:	e012      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004444:	e011      	b.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004446:	f7ff fe3b 	bl	80040c0 <HAL_RCC_GetPCLK2Freq>
 800444a:	4602      	mov	r2, r0
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	0b9b      	lsrs	r3, r3, #14
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	3301      	adds	r3, #1
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	fbb2 f3f3 	udiv	r3, r2, r3
 800445e:	61bb      	str	r3, [r7, #24]
      break;
 8004460:	e004      	b.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004462:	bf00      	nop
 8004464:	e002      	b.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004466:	bf00      	nop
 8004468:	e000      	b.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800446a:	bf00      	nop
    }
  }
  return (frequency);
 800446c:	69bb      	ldr	r3, [r7, #24]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000
 800447c:	0800ae4c 	.word	0x0800ae4c
 8004480:	0800ae5c 	.word	0x0800ae5c
 8004484:	007a1200 	.word	0x007a1200
 8004488:	003d0900 	.word	0x003d0900
 800448c:	aaaaaaab 	.word	0xaaaaaaab

08004490 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e07a      	b.n	800459c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	7c5b      	ldrb	r3, [r3, #17]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d105      	bne.n	80044bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fe f8aa 	bl	8002610 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa96 	bl	80049f4 <HAL_RTC_WaitForSynchro>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d004      	beq.n	80044d8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2204      	movs	r2, #4
 80044d2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e061      	b.n	800459c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fb4f 	bl	8004b7c <RTC_EnterInitMode>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2204      	movs	r2, #4
 80044e8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e056      	b.n	800459c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0207 	bic.w	r2, r2, #7
 80044fc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004506:	4b27      	ldr	r3, [pc, #156]	; (80045a4 <HAL_RTC_Init+0x114>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	4a26      	ldr	r2, [pc, #152]	; (80045a4 <HAL_RTC_Init+0x114>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004512:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <HAL_RTC_Init+0x114>)
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	4921      	ldr	r1, [pc, #132]	; (80045a4 <HAL_RTC_Init+0x114>)
 8004520:	4313      	orrs	r3, r2
 8004522:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452c:	d003      	beq.n	8004536 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e00e      	b.n	8004554 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004536:	2001      	movs	r0, #1
 8004538:	f7ff fef4 	bl	8004324 <HAL_RCCEx_GetPeriphCLKFreq>
 800453c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d104      	bne.n	800454e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2204      	movs	r2, #4
 8004548:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e026      	b.n	800459c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3b01      	subs	r3, #1
 8004552:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	0c1a      	lsrs	r2, r3, #16
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f002 020f 	and.w	r2, r2, #15
 8004560:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	b292      	uxth	r2, r2
 800456a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fb2d 	bl	8004bcc <RTC_ExitInitMode>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2204      	movs	r2, #4
 800457c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e00c      	b.n	800459c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800459a:	2300      	movs	r3, #0
  }
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40006c00 	.word	0x40006c00

080045a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045a8:	b590      	push	{r4, r7, lr}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_RTC_SetTime+0x20>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e080      	b.n	80046ce <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	7c1b      	ldrb	r3, [r3, #16]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_RTC_SetTime+0x30>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e07a      	b.n	80046ce <HAL_RTC_SetTime+0x126>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2201      	movs	r2, #1
 80045dc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2202      	movs	r2, #2
 80045e2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d113      	bne.n	8004612 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80045f4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	785b      	ldrb	r3, [r3, #1]
 80045fc:	4619      	mov	r1, r3
 80045fe:	460b      	mov	r3, r1
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a5b      	subs	r3, r3, r1
 8004604:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004606:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800460c:	4413      	add	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	e01e      	b.n	8004650 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fb1d 	bl	8004c56 <RTC_Bcd2ToByte>
 800461c:	4603      	mov	r3, r0
 800461e:	461a      	mov	r2, r3
 8004620:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004624:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	785b      	ldrb	r3, [r3, #1]
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fb12 	bl	8004c56 <RTC_Bcd2ToByte>
 8004632:	4603      	mov	r3, r0
 8004634:	461a      	mov	r2, r3
 8004636:	4613      	mov	r3, r2
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800463e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	789b      	ldrb	r3, [r3, #2]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fb06 	bl	8004c56 <RTC_Bcd2ToByte>
 800464a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800464c:	4423      	add	r3, r4
 800464e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004650:	6979      	ldr	r1, [r7, #20]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fa2b 	bl	8004aae <RTC_WriteTimeCounter>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2204      	movs	r2, #4
 8004662:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e02f      	b.n	80046ce <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0205 	bic.w	r2, r2, #5
 800467c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fa3c 	bl	8004afc <RTC_ReadAlarmCounter>
 8004684:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468c:	d018      	beq.n	80046c0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	429a      	cmp	r2, r3
 8004694:	d214      	bcs.n	80046c0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800469c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80046a0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80046a2:	6939      	ldr	r1, [r7, #16]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fa42 	bl	8004b2e <RTC_WriteAlarmCounter>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2204      	movs	r2, #4
 80046b4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e006      	b.n	80046ce <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
  }
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd90      	pop	{r4, r7, pc}
	...

080046d8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61bb      	str	r3, [r7, #24]
 80046e8:	2300      	movs	r3, #0
 80046ea:	61fb      	str	r3, [r7, #28]
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	2300      	movs	r3, #0
 80046f2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_RTC_GetTime+0x28>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0b5      	b.n	8004870 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e0ac      	b.n	8004870 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f999 	bl	8004a4e <RTC_ReadTimeCounter>
 800471c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	4a55      	ldr	r2, [pc, #340]	; (8004878 <HAL_RTC_GetTime+0x1a0>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	0adb      	lsrs	r3, r3, #11
 8004728:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4b52      	ldr	r3, [pc, #328]	; (8004878 <HAL_RTC_GetTime+0x1a0>)
 800472e:	fba3 1302 	umull	r1, r3, r3, r2
 8004732:	0adb      	lsrs	r3, r3, #11
 8004734:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004738:	fb01 f303 	mul.w	r3, r1, r3
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	4a4f      	ldr	r2, [pc, #316]	; (800487c <HAL_RTC_GetTime+0x1a4>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	b2da      	uxtb	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	4a4a      	ldr	r2, [pc, #296]	; (8004878 <HAL_RTC_GetTime+0x1a0>)
 8004750:	fba2 1203 	umull	r1, r2, r2, r3
 8004754:	0ad2      	lsrs	r2, r2, #11
 8004756:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800475a:	fb01 f202 	mul.w	r2, r1, r2
 800475e:	1a9a      	subs	r2, r3, r2
 8004760:	4b46      	ldr	r3, [pc, #280]	; (800487c <HAL_RTC_GetTime+0x1a4>)
 8004762:	fba3 1302 	umull	r1, r3, r3, r2
 8004766:	0959      	lsrs	r1, r3, #5
 8004768:	460b      	mov	r3, r1
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	1a5b      	subs	r3, r3, r1
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	1ad1      	subs	r1, r2, r3
 8004772:	b2ca      	uxtb	r2, r1
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b17      	cmp	r3, #23
 800477c:	d955      	bls.n	800482a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4a3f      	ldr	r2, [pc, #252]	; (8004880 <HAL_RTC_GetTime+0x1a8>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	091b      	lsrs	r3, r3, #4
 8004788:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800478a:	6939      	ldr	r1, [r7, #16]
 800478c:	4b3c      	ldr	r3, [pc, #240]	; (8004880 <HAL_RTC_GetTime+0x1a8>)
 800478e:	fba3 2301 	umull	r2, r3, r3, r1
 8004792:	091a      	lsrs	r2, r3, #4
 8004794:	4613      	mov	r3, r2
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	4413      	add	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	1aca      	subs	r2, r1, r3
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f9a9 	bl	8004afc <RTC_ReadAlarmCounter>
 80047aa:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b2:	d008      	beq.n	80047c6 <HAL_RTC_GetTime+0xee>
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d904      	bls.n	80047c6 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	e002      	b.n	80047cc <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80047c6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ca:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4a2d      	ldr	r2, [pc, #180]	; (8004884 <HAL_RTC_GetTime+0x1ac>)
 80047d0:	fb02 f303 	mul.w	r3, r2, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80047da:	69b9      	ldr	r1, [r7, #24]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f966 	bl	8004aae <RTC_WriteTimeCounter>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e041      	b.n	8004870 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f2:	d00c      	beq.n	800480e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	4413      	add	r3, r2
 80047fa:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80047fc:	69f9      	ldr	r1, [r7, #28]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f995 	bl	8004b2e <RTC_WriteAlarmCounter>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e030      	b.n	8004870 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800480e:	69f9      	ldr	r1, [r7, #28]
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f98c 	bl	8004b2e <RTC_WriteAlarmCounter>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e027      	b.n	8004870 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004820:	6979      	ldr	r1, [r7, #20]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fa34 	bl	8004c90 <RTC_DateUpdate>
 8004828:	e003      	b.n	8004832 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01a      	beq.n	800486e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f000 f9ed 	bl	8004c1c <RTC_ByteToBcd2>
 8004842:	4603      	mov	r3, r0
 8004844:	461a      	mov	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	785b      	ldrb	r3, [r3, #1]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f9e4 	bl	8004c1c <RTC_ByteToBcd2>
 8004854:	4603      	mov	r3, r0
 8004856:	461a      	mov	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	789b      	ldrb	r3, [r3, #2]
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f9db 	bl	8004c1c <RTC_ByteToBcd2>
 8004866:	4603      	mov	r3, r0
 8004868:	461a      	mov	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3720      	adds	r7, #32
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	91a2b3c5 	.word	0x91a2b3c5
 800487c:	88888889 	.word	0x88888889
 8004880:	aaaaaaab 	.word	0xaaaaaaab
 8004884:	00015180 	.word	0x00015180

08004888 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	61fb      	str	r3, [r7, #28]
 8004898:	2300      	movs	r3, #0
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_RTC_SetDate+0x24>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e097      	b.n	80049e0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	7c1b      	ldrb	r3, [r3, #16]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_RTC_SetDate+0x34>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e091      	b.n	80049e0 <HAL_RTC_SetDate+0x158>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2202      	movs	r2, #2
 80048c6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10c      	bne.n	80048e8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	78da      	ldrb	r2, [r3, #3]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	785a      	ldrb	r2, [r3, #1]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	789a      	ldrb	r2, [r3, #2]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	739a      	strb	r2, [r3, #14]
 80048e6:	e01a      	b.n	800491e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	78db      	ldrb	r3, [r3, #3]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 f9b2 	bl	8004c56 <RTC_Bcd2ToByte>
 80048f2:	4603      	mov	r3, r0
 80048f4:	461a      	mov	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 f9a9 	bl	8004c56 <RTC_Bcd2ToByte>
 8004904:	4603      	mov	r3, r0
 8004906:	461a      	mov	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	789b      	ldrb	r3, [r3, #2]
 8004910:	4618      	mov	r0, r3
 8004912:	f000 f9a0 	bl	8004c56 <RTC_Bcd2ToByte>
 8004916:	4603      	mov	r3, r0
 8004918:	461a      	mov	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	7bdb      	ldrb	r3, [r3, #15]
 8004922:	4618      	mov	r0, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	7b59      	ldrb	r1, [r3, #13]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	7b9b      	ldrb	r3, [r3, #14]
 800492c:	461a      	mov	r2, r3
 800492e:	f000 fa8b 	bl	8004e48 <RTC_WeekDayNum>
 8004932:	4603      	mov	r3, r0
 8004934:	461a      	mov	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	7b1a      	ldrb	r2, [r3, #12]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 f883 	bl	8004a4e <RTC_ReadTimeCounter>
 8004948:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <HAL_RTC_SetDate+0x160>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	0adb      	lsrs	r3, r3, #11
 8004954:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b18      	cmp	r3, #24
 800495a:	d93a      	bls.n	80049d2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	4a23      	ldr	r2, [pc, #140]	; (80049ec <HAL_RTC_SetDate+0x164>)
 8004960:	fba2 2303 	umull	r2, r3, r2, r3
 8004964:	091b      	lsrs	r3, r3, #4
 8004966:	4a22      	ldr	r2, [pc, #136]	; (80049f0 <HAL_RTC_SetDate+0x168>)
 8004968:	fb02 f303 	mul.w	r3, r2, r3
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004972:	69f9      	ldr	r1, [r7, #28]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f89a 	bl	8004aae <RTC_WriteTimeCounter>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2204      	movs	r2, #4
 8004984:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e027      	b.n	80049e0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f8b3 	bl	8004afc <RTC_ReadAlarmCounter>
 8004996:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d018      	beq.n	80049d2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d214      	bcs.n	80049d2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80049ae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80049b2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80049b4:	69b9      	ldr	r1, [r7, #24]
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f8b9 	bl	8004b2e <RTC_WriteAlarmCounter>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2204      	movs	r2, #4
 80049c6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e006      	b.n	80049e0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2201      	movs	r2, #1
 80049d6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	91a2b3c5 	.word	0x91a2b3c5
 80049ec:	aaaaaaab 	.word	0xaaaaaaab
 80049f0:	00015180 	.word	0x00015180

080049f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e01d      	b.n	8004a46 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0208 	bic.w	r2, r2, #8
 8004a18:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004a1a:	f7fd ffeb 	bl	80029f4 <HAL_GetTick>
 8004a1e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004a20:	e009      	b.n	8004a36 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a22:	f7fd ffe7 	bl	80029f4 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a30:	d901      	bls.n	8004a36 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e007      	b.n	8004a46 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0ee      	beq.n	8004a22 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b087      	sub	sp, #28
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	827b      	strh	r3, [r7, #18]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	823b      	strh	r3, [r7, #16]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004a7e:	8a7a      	ldrh	r2, [r7, #18]
 8004a80:	8a3b      	ldrh	r3, [r7, #16]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d008      	beq.n	8004a98 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004a86:	8a3b      	ldrh	r3, [r7, #16]
 8004a88:	041a      	lsls	r2, r3, #16
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	e004      	b.n	8004aa2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004a98:	8a7b      	ldrh	r3, [r7, #18]
 8004a9a:	041a      	lsls	r2, r3, #16
 8004a9c:	89fb      	ldrh	r3, [r7, #14]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004aa2:	697b      	ldr	r3, [r7, #20]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr

08004aae <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f85d 	bl	8004b7c <RTC_EnterInitMode>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
 8004acc:	e011      	b.n	8004af2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	0c12      	lsrs	r2, r2, #16
 8004ad6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	b292      	uxth	r2, r2
 8004ae0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f872 	bl	8004bcc <RTC_ExitInitMode>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	81fb      	strh	r3, [r7, #14]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004b1c:	89fb      	ldrh	r3, [r7, #14]
 8004b1e:	041a      	lsls	r2, r3, #16
 8004b20:	89bb      	ldrh	r3, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr

08004b2e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b084      	sub	sp, #16
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f81d 	bl	8004b7c <RTC_EnterInitMode>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73fb      	strb	r3, [r7, #15]
 8004b4c:	e011      	b.n	8004b72 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	0c12      	lsrs	r2, r2, #16
 8004b56:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	b292      	uxth	r2, r2
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f832 	bl	8004bcc <RTC_ExitInitMode>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004b88:	f7fd ff34 	bl	80029f4 <HAL_GetTick>
 8004b8c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004b8e:	e009      	b.n	8004ba4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004b90:	f7fd ff30 	bl	80029f4 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b9e:	d901      	bls.n	8004ba4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e00f      	b.n	8004bc4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0ee      	beq.n	8004b90 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0210 	orr.w	r2, r2, #16
 8004bc0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0210 	bic.w	r2, r2, #16
 8004be6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004be8:	f7fd ff04 	bl	80029f4 <HAL_GetTick>
 8004bec:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004bee:	e009      	b.n	8004c04 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004bf0:	f7fd ff00 	bl	80029f4 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bfe:	d901      	bls.n	8004c04 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e007      	b.n	8004c14 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0ee      	beq.n	8004bf0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004c2a:	e005      	b.n	8004c38 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	3b0a      	subs	r3, #10
 8004c36:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	2b09      	cmp	r3, #9
 8004c3c:	d8f6      	bhi.n	8004c2c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	b2db      	uxtb	r3, r3
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr

08004c56 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	b2db      	uxtb	r3, r3
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	7bdb      	ldrb	r3, [r3, #15]
 8004cae:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	7b5b      	ldrb	r3, [r3, #13]
 8004cb4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	7b9b      	ldrb	r3, [r3, #14]
 8004cba:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	e06f      	b.n	8004da2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d011      	beq.n	8004cec <RTC_DateUpdate+0x5c>
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d00e      	beq.n	8004cec <RTC_DateUpdate+0x5c>
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b05      	cmp	r3, #5
 8004cd2:	d00b      	beq.n	8004cec <RTC_DateUpdate+0x5c>
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b07      	cmp	r3, #7
 8004cd8:	d008      	beq.n	8004cec <RTC_DateUpdate+0x5c>
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d005      	beq.n	8004cec <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b0a      	cmp	r3, #10
 8004ce4:	d002      	beq.n	8004cec <RTC_DateUpdate+0x5c>
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b0c      	cmp	r3, #12
 8004cea:	d117      	bne.n	8004d1c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b1e      	cmp	r3, #30
 8004cf0:	d803      	bhi.n	8004cfa <RTC_DateUpdate+0x6a>
      {
        day++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004cf8:	e050      	b.n	8004d9c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b0c      	cmp	r3, #12
 8004cfe:	d005      	beq.n	8004d0c <RTC_DateUpdate+0x7c>
        {
          month++;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	3301      	adds	r3, #1
 8004d04:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004d06:	2301      	movs	r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004d0a:	e047      	b.n	8004d9c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004d10:	2301      	movs	r3, #1
 8004d12:	60fb      	str	r3, [r7, #12]
          year++;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	3301      	adds	r3, #1
 8004d18:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004d1a:	e03f      	b.n	8004d9c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d008      	beq.n	8004d34 <RTC_DateUpdate+0xa4>
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b06      	cmp	r3, #6
 8004d26:	d005      	beq.n	8004d34 <RTC_DateUpdate+0xa4>
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b09      	cmp	r3, #9
 8004d2c:	d002      	beq.n	8004d34 <RTC_DateUpdate+0xa4>
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b0b      	cmp	r3, #11
 8004d32:	d10c      	bne.n	8004d4e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b1d      	cmp	r3, #29
 8004d38:	d803      	bhi.n	8004d42 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004d40:	e02c      	b.n	8004d9c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	3301      	adds	r3, #1
 8004d46:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004d4c:	e026      	b.n	8004d9c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d123      	bne.n	8004d9c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b1b      	cmp	r3, #27
 8004d58:	d803      	bhi.n	8004d62 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e01c      	b.n	8004d9c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b1c      	cmp	r3, #28
 8004d66:	d111      	bne.n	8004d8c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 f839 	bl	8004de4 <RTC_IsLeapYear>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e00d      	b.n	8004d9c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	3301      	adds	r3, #1
 8004d84:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004d86:	2301      	movs	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	e007      	b.n	8004d9c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b1d      	cmp	r3, #29
 8004d90:	d104      	bne.n	8004d9c <RTC_DateUpdate+0x10c>
      {
        month++;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	3301      	adds	r3, #1
 8004d96:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60bb      	str	r3, [r7, #8]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d38b      	bcc.n	8004cc2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6978      	ldr	r0, [r7, #20]
 8004dce:	f000 f83b 	bl	8004e48 <RTC_WeekDayNum>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	731a      	strb	r2, [r3, #12]
}
 8004dda:	bf00      	nop
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	4603      	mov	r3, r0
 8004dec:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e01d      	b.n	8004e3a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	4a10      	ldr	r2, [pc, #64]	; (8004e44 <RTC_IsLeapYear+0x60>)
 8004e02:	fba2 1203 	umull	r1, r2, r2, r3
 8004e06:	0952      	lsrs	r2, r2, #5
 8004e08:	2164      	movs	r1, #100	; 0x64
 8004e0a:	fb01 f202 	mul.w	r2, r1, r2
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e00f      	b.n	8004e3a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004e1a:	88fb      	ldrh	r3, [r7, #6]
 8004e1c:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <RTC_IsLeapYear+0x60>)
 8004e1e:	fba2 1203 	umull	r1, r2, r2, r3
 8004e22:	09d2      	lsrs	r2, r2, #7
 8004e24:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004e28:	fb01 f202 	mul.w	r2, r1, r2
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e000      	b.n	8004e3a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004e38:	2300      	movs	r3, #0
  }
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr
 8004e44:	51eb851f 	.word	0x51eb851f

08004e48 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	70fb      	strb	r3, [r7, #3]
 8004e54:	4613      	mov	r3, r2
 8004e56:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60bb      	str	r3, [r7, #8]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004e66:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d82d      	bhi.n	8004eca <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004e6e:	78fa      	ldrb	r2, [r7, #3]
 8004e70:	4613      	mov	r3, r2
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	4413      	add	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	4a2c      	ldr	r2, [pc, #176]	; (8004f2c <RTC_WeekDayNum+0xe4>)
 8004e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e80:	085a      	lsrs	r2, r3, #1
 8004e82:	78bb      	ldrb	r3, [r7, #2]
 8004e84:	441a      	add	r2, r3
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	441a      	add	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	089b      	lsrs	r3, r3, #2
 8004e90:	441a      	add	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	4926      	ldr	r1, [pc, #152]	; (8004f30 <RTC_WeekDayNum+0xe8>)
 8004e98:	fba1 1303 	umull	r1, r3, r1, r3
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	1ad2      	subs	r2, r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	4922      	ldr	r1, [pc, #136]	; (8004f30 <RTC_WeekDayNum+0xe8>)
 8004ea6:	fba1 1303 	umull	r1, r3, r1, r3
 8004eaa:	09db      	lsrs	r3, r3, #7
 8004eac:	4413      	add	r3, r2
 8004eae:	1d1a      	adds	r2, r3, #4
 8004eb0:	4b20      	ldr	r3, [pc, #128]	; (8004f34 <RTC_WeekDayNum+0xec>)
 8004eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb6:	1ad1      	subs	r1, r2, r3
 8004eb8:	0849      	lsrs	r1, r1, #1
 8004eba:	440b      	add	r3, r1
 8004ebc:	0899      	lsrs	r1, r3, #2
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	1a5b      	subs	r3, r3, r1
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	e029      	b.n	8004f1e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	4413      	add	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	1a9b      	subs	r3, r3, r2
 8004ed6:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <RTC_WeekDayNum+0xe4>)
 8004ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8004edc:	085a      	lsrs	r2, r3, #1
 8004ede:	78bb      	ldrb	r3, [r7, #2]
 8004ee0:	441a      	add	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	441a      	add	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	089b      	lsrs	r3, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4910      	ldr	r1, [pc, #64]	; (8004f30 <RTC_WeekDayNum+0xe8>)
 8004ef0:	fba1 1303 	umull	r1, r3, r1, r3
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	490d      	ldr	r1, [pc, #52]	; (8004f30 <RTC_WeekDayNum+0xe8>)
 8004efc:	fba1 1303 	umull	r1, r3, r1, r3
 8004f00:	09db      	lsrs	r3, r3, #7
 8004f02:	4413      	add	r3, r2
 8004f04:	1c9a      	adds	r2, r3, #2
 8004f06:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <RTC_WeekDayNum+0xec>)
 8004f08:	fba3 1302 	umull	r1, r3, r3, r2
 8004f0c:	1ad1      	subs	r1, r2, r3
 8004f0e:	0849      	lsrs	r1, r1, #1
 8004f10:	440b      	add	r3, r1
 8004f12:	0899      	lsrs	r1, r3, #2
 8004f14:	460b      	mov	r3, r1
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	1a5b      	subs	r3, r3, r1
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	b2db      	uxtb	r3, r3
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr
 8004f2c:	38e38e39 	.word	0x38e38e39
 8004f30:	51eb851f 	.word	0x51eb851f
 8004f34:	24924925 	.word	0x24924925

08004f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e076      	b.n	8005038 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d108      	bne.n	8004f64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5a:	d009      	beq.n	8004f70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	61da      	str	r2, [r3, #28]
 8004f62:	e005      	b.n	8004f70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fd fb64 	bl	8002658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff4:	ea42 0103 	orr.w	r1, r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	0c1a      	lsrs	r2, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f002 0204 	and.w	r2, r2, #4
 8005016:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69da      	ldr	r2, [r3, #28]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005026:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_SPI_Transmit+0x22>
 800505e:	2302      	movs	r3, #2
 8005060:	e12d      	b.n	80052be <HAL_SPI_Transmit+0x27e>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800506a:	f7fd fcc3 	bl	80029f4 <HAL_GetTick>
 800506e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	d002      	beq.n	8005086 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005080:	2302      	movs	r3, #2
 8005082:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005084:	e116      	b.n	80052b4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_SPI_Transmit+0x52>
 800508c:	88fb      	ldrh	r3, [r7, #6]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d102      	bne.n	8005098 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005096:	e10d      	b.n	80052b4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2203      	movs	r2, #3
 800509c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	88fa      	ldrh	r2, [r7, #6]
 80050b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050de:	d10f      	bne.n	8005100 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510a:	2b40      	cmp	r3, #64	; 0x40
 800510c:	d007      	beq.n	800511e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800511c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005126:	d14f      	bne.n	80051c8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <HAL_SPI_Transmit+0xf6>
 8005130:	8afb      	ldrh	r3, [r7, #22]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d142      	bne.n	80051bc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	881a      	ldrh	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	1c9a      	adds	r2, r3, #2
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800515a:	e02f      	b.n	80051bc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b02      	cmp	r3, #2
 8005168:	d112      	bne.n	8005190 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	881a      	ldrh	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	1c9a      	adds	r2, r3, #2
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	86da      	strh	r2, [r3, #54]	; 0x36
 800518e:	e015      	b.n	80051bc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005190:	f7fd fc30 	bl	80029f4 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d803      	bhi.n	80051a8 <HAL_SPI_Transmit+0x168>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a6:	d102      	bne.n	80051ae <HAL_SPI_Transmit+0x16e>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80051ba:	e07b      	b.n	80052b4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1ca      	bne.n	800515c <HAL_SPI_Transmit+0x11c>
 80051c6:	e050      	b.n	800526a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_SPI_Transmit+0x196>
 80051d0:	8afb      	ldrh	r3, [r7, #22]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d144      	bne.n	8005260 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	330c      	adds	r3, #12
 80051e0:	7812      	ldrb	r2, [r2, #0]
 80051e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051fc:	e030      	b.n	8005260 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b02      	cmp	r3, #2
 800520a:	d113      	bne.n	8005234 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	330c      	adds	r3, #12
 8005216:	7812      	ldrb	r2, [r2, #0]
 8005218:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	86da      	strh	r2, [r3, #54]	; 0x36
 8005232:	e015      	b.n	8005260 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005234:	f7fd fbde 	bl	80029f4 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	429a      	cmp	r2, r3
 8005242:	d803      	bhi.n	800524c <HAL_SPI_Transmit+0x20c>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	d102      	bne.n	8005252 <HAL_SPI_Transmit+0x212>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800525e:	e029      	b.n	80052b4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1c9      	bne.n	80051fe <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	6839      	ldr	r1, [r7, #0]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f8b2 	bl	80053d8 <SPI_EndRxTxTransaction>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2220      	movs	r2, #32
 800527e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005288:	2300      	movs	r3, #0
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	77fb      	strb	r3, [r7, #31]
 80052aa:	e003      	b.n	80052b4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052d8:	f7fd fb8c 	bl	80029f4 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	1a9b      	subs	r3, r3, r2
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	4413      	add	r3, r2
 80052e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052e8:	f7fd fb84 	bl	80029f4 <HAL_GetTick>
 80052ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052ee:	4b39      	ldr	r3, [pc, #228]	; (80053d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	015b      	lsls	r3, r3, #5
 80052f4:	0d1b      	lsrs	r3, r3, #20
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	fb02 f303 	mul.w	r3, r2, r3
 80052fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052fe:	e054      	b.n	80053aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d050      	beq.n	80053aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005308:	f7fd fb74 	bl	80029f4 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	429a      	cmp	r2, r3
 8005316:	d902      	bls.n	800531e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d13d      	bne.n	800539a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800532c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005336:	d111      	bne.n	800535c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005340:	d004      	beq.n	800534c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534a:	d107      	bne.n	800535c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800535a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005364:	d10f      	bne.n	8005386 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e017      	b.n	80053ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4013      	ands	r3, r2
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	bf0c      	ite	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	2300      	movne	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d19b      	bne.n	8005300 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3720      	adds	r7, #32
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000020 	.word	0x20000020

080053d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af02      	add	r7, sp, #8
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2200      	movs	r2, #0
 80053ec:	2180      	movs	r1, #128	; 0x80
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff ff6a 	bl	80052c8 <SPI_WaitFlagStateUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e000      	b.n	800540c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e041      	b.n	80054aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fd f94a 	bl	80026d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3304      	adds	r3, #4
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f000 fc6a 	bl	8005d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d001      	beq.n	80054cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e03a      	b.n	8005542 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a18      	ldr	r2, [pc, #96]	; (800554c <HAL_TIM_Base_Start_IT+0x98>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00e      	beq.n	800550c <HAL_TIM_Base_Start_IT+0x58>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f6:	d009      	beq.n	800550c <HAL_TIM_Base_Start_IT+0x58>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a14      	ldr	r2, [pc, #80]	; (8005550 <HAL_TIM_Base_Start_IT+0x9c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d004      	beq.n	800550c <HAL_TIM_Base_Start_IT+0x58>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a13      	ldr	r2, [pc, #76]	; (8005554 <HAL_TIM_Base_Start_IT+0xa0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d111      	bne.n	8005530 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b06      	cmp	r3, #6
 800551c:	d010      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552e:	e007      	b.n	8005540 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800

08005558 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0201 	bic.w	r2, r2, #1
 800556e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6a1a      	ldr	r2, [r3, #32]
 8005576:	f241 1311 	movw	r3, #4369	; 0x1111
 800557a:	4013      	ands	r3, r2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10f      	bne.n	80055a0 <HAL_TIM_Base_Stop_IT+0x48>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6a1a      	ldr	r2, [r3, #32]
 8005586:	f240 4344 	movw	r3, #1092	; 0x444
 800558a:	4013      	ands	r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d107      	bne.n	80055a0 <HAL_TIM_Base_Stop_IT+0x48>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0201 	bic.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr

080055b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e041      	b.n	800564a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f839 	bl	8005652 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	f000 fb9a 	bl	8005d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d109      	bne.n	8005688 <HAL_TIM_PWM_Start+0x24>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b01      	cmp	r3, #1
 800567e:	bf14      	ite	ne
 8005680:	2301      	movne	r3, #1
 8005682:	2300      	moveq	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	e022      	b.n	80056ce <HAL_TIM_PWM_Start+0x6a>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b04      	cmp	r3, #4
 800568c:	d109      	bne.n	80056a2 <HAL_TIM_PWM_Start+0x3e>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b01      	cmp	r3, #1
 8005698:	bf14      	ite	ne
 800569a:	2301      	movne	r3, #1
 800569c:	2300      	moveq	r3, #0
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	e015      	b.n	80056ce <HAL_TIM_PWM_Start+0x6a>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d109      	bne.n	80056bc <HAL_TIM_PWM_Start+0x58>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	bf14      	ite	ne
 80056b4:	2301      	movne	r3, #1
 80056b6:	2300      	moveq	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	e008      	b.n	80056ce <HAL_TIM_PWM_Start+0x6a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	bf14      	ite	ne
 80056c8:	2301      	movne	r3, #1
 80056ca:	2300      	moveq	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e05e      	b.n	8005794 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d104      	bne.n	80056e6 <HAL_TIM_PWM_Start+0x82>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e4:	e013      	b.n	800570e <HAL_TIM_PWM_Start+0xaa>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d104      	bne.n	80056f6 <HAL_TIM_PWM_Start+0x92>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056f4:	e00b      	b.n	800570e <HAL_TIM_PWM_Start+0xaa>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d104      	bne.n	8005706 <HAL_TIM_PWM_Start+0xa2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005704:	e003      	b.n	800570e <HAL_TIM_PWM_Start+0xaa>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2202      	movs	r2, #2
 800570a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2201      	movs	r2, #1
 8005714:	6839      	ldr	r1, [r7, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fd88 	bl	800622c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1e      	ldr	r2, [pc, #120]	; (800579c <HAL_TIM_PWM_Start+0x138>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d107      	bne.n	8005736 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005734:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a18      	ldr	r2, [pc, #96]	; (800579c <HAL_TIM_PWM_Start+0x138>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00e      	beq.n	800575e <HAL_TIM_PWM_Start+0xfa>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005748:	d009      	beq.n	800575e <HAL_TIM_PWM_Start+0xfa>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a14      	ldr	r2, [pc, #80]	; (80057a0 <HAL_TIM_PWM_Start+0x13c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <HAL_TIM_PWM_Start+0xfa>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a12      	ldr	r2, [pc, #72]	; (80057a4 <HAL_TIM_PWM_Start+0x140>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d111      	bne.n	8005782 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b06      	cmp	r3, #6
 800576e:	d010      	beq.n	8005792 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005780:	e007      	b.n	8005792 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0201 	orr.w	r2, r2, #1
 8005790:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40012c00 	.word	0x40012c00
 80057a0:	40000400 	.word	0x40000400
 80057a4:	40000800 	.word	0x40000800

080057a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d122      	bne.n	8005804 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d11b      	bne.n	8005804 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0202 	mvn.w	r2, #2
 80057d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fa76 	bl	8005cdc <HAL_TIM_IC_CaptureCallback>
 80057f0:	e005      	b.n	80057fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fa69 	bl	8005cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fa78 	bl	8005cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b04      	cmp	r3, #4
 8005810:	d122      	bne.n	8005858 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b04      	cmp	r3, #4
 800581e:	d11b      	bne.n	8005858 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0204 	mvn.w	r2, #4
 8005828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fa4c 	bl	8005cdc <HAL_TIM_IC_CaptureCallback>
 8005844:	e005      	b.n	8005852 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fa3f 	bl	8005cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fa4e 	bl	8005cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b08      	cmp	r3, #8
 8005864:	d122      	bne.n	80058ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	2b08      	cmp	r3, #8
 8005872:	d11b      	bne.n	80058ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0208 	mvn.w	r2, #8
 800587c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2204      	movs	r2, #4
 8005882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fa22 	bl	8005cdc <HAL_TIM_IC_CaptureCallback>
 8005898:	e005      	b.n	80058a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fa15 	bl	8005cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fa24 	bl	8005cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	2b10      	cmp	r3, #16
 80058b8:	d122      	bne.n	8005900 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0310 	and.w	r3, r3, #16
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d11b      	bne.n	8005900 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0210 	mvn.w	r2, #16
 80058d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2208      	movs	r2, #8
 80058d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f9f8 	bl	8005cdc <HAL_TIM_IC_CaptureCallback>
 80058ec:	e005      	b.n	80058fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9eb 	bl	8005cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f9fa 	bl	8005cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b01      	cmp	r3, #1
 800590c:	d10e      	bne.n	800592c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b01      	cmp	r3, #1
 800591a:	d107      	bne.n	800592c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0201 	mvn.w	r2, #1
 8005924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fc f94e 	bl	8001bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005936:	2b80      	cmp	r3, #128	; 0x80
 8005938:	d10e      	bne.n	8005958 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005944:	2b80      	cmp	r3, #128	; 0x80
 8005946:	d107      	bne.n	8005958 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fcf5 	bl	8006342 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005962:	2b40      	cmp	r3, #64	; 0x40
 8005964:	d10e      	bne.n	8005984 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005970:	2b40      	cmp	r3, #64	; 0x40
 8005972:	d107      	bne.n	8005984 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800597c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f9be 	bl	8005d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b20      	cmp	r3, #32
 8005990:	d10e      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b20      	cmp	r3, #32
 800599e:	d107      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0220 	mvn.w	r2, #32
 80059a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fcc0 	bl	8006330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059b0:	bf00      	nop
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e0ae      	b.n	8005b34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b0c      	cmp	r3, #12
 80059e2:	f200 809f 	bhi.w	8005b24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059e6:	a201      	add	r2, pc, #4	; (adr r2, 80059ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ec:	08005a21 	.word	0x08005a21
 80059f0:	08005b25 	.word	0x08005b25
 80059f4:	08005b25 	.word	0x08005b25
 80059f8:	08005b25 	.word	0x08005b25
 80059fc:	08005a61 	.word	0x08005a61
 8005a00:	08005b25 	.word	0x08005b25
 8005a04:	08005b25 	.word	0x08005b25
 8005a08:	08005b25 	.word	0x08005b25
 8005a0c:	08005aa3 	.word	0x08005aa3
 8005a10:	08005b25 	.word	0x08005b25
 8005a14:	08005b25 	.word	0x08005b25
 8005a18:	08005b25 	.word	0x08005b25
 8005a1c:	08005ae3 	.word	0x08005ae3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 f9e2 	bl	8005df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0208 	orr.w	r2, r2, #8
 8005a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0204 	bic.w	r2, r2, #4
 8005a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6999      	ldr	r1, [r3, #24]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	619a      	str	r2, [r3, #24]
      break;
 8005a5e:	e064      	b.n	8005b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fa28 	bl	8005ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6999      	ldr	r1, [r3, #24]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	021a      	lsls	r2, r3, #8
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	619a      	str	r2, [r3, #24]
      break;
 8005aa0:	e043      	b.n	8005b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fa71 	bl	8005f90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69da      	ldr	r2, [r3, #28]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f042 0208 	orr.w	r2, r2, #8
 8005abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0204 	bic.w	r2, r2, #4
 8005acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69d9      	ldr	r1, [r3, #28]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	61da      	str	r2, [r3, #28]
      break;
 8005ae0:	e023      	b.n	8005b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fabb 	bl	8006064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69d9      	ldr	r1, [r3, #28]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	021a      	lsls	r2, r3, #8
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	61da      	str	r2, [r3, #28]
      break;
 8005b22:	e002      	b.n	8005b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	75fb      	strb	r3, [r7, #23]
      break;
 8005b28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_TIM_ConfigClockSource+0x1c>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e0b4      	b.n	8005cc2 <HAL_TIM_ConfigClockSource+0x186>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b90:	d03e      	beq.n	8005c10 <HAL_TIM_ConfigClockSource+0xd4>
 8005b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b96:	f200 8087 	bhi.w	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9e:	f000 8086 	beq.w	8005cae <HAL_TIM_ConfigClockSource+0x172>
 8005ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba6:	d87f      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba8:	2b70      	cmp	r3, #112	; 0x70
 8005baa:	d01a      	beq.n	8005be2 <HAL_TIM_ConfigClockSource+0xa6>
 8005bac:	2b70      	cmp	r3, #112	; 0x70
 8005bae:	d87b      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb0:	2b60      	cmp	r3, #96	; 0x60
 8005bb2:	d050      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0x11a>
 8005bb4:	2b60      	cmp	r3, #96	; 0x60
 8005bb6:	d877      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb8:	2b50      	cmp	r3, #80	; 0x50
 8005bba:	d03c      	beq.n	8005c36 <HAL_TIM_ConfigClockSource+0xfa>
 8005bbc:	2b50      	cmp	r3, #80	; 0x50
 8005bbe:	d873      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d058      	beq.n	8005c76 <HAL_TIM_ConfigClockSource+0x13a>
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d86f      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc8:	2b30      	cmp	r3, #48	; 0x30
 8005bca:	d064      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15a>
 8005bcc:	2b30      	cmp	r3, #48	; 0x30
 8005bce:	d86b      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	d060      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15a>
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d867      	bhi.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d05c      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15a>
 8005bdc:	2b10      	cmp	r3, #16
 8005bde:	d05a      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x15a>
 8005be0:	e062      	b.n	8005ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bf2:	f000 fafc 	bl	80061ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	609a      	str	r2, [r3, #8]
      break;
 8005c0e:	e04f      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c20:	f000 fae5 	bl	80061ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c32:	609a      	str	r2, [r3, #8]
      break;
 8005c34:	e03c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c42:	461a      	mov	r2, r3
 8005c44:	f000 fa5c 	bl	8006100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2150      	movs	r1, #80	; 0x50
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fab3 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005c54:	e02c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c62:	461a      	mov	r2, r3
 8005c64:	f000 fa7a 	bl	800615c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2160      	movs	r1, #96	; 0x60
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 faa3 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005c74:	e01c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c82:	461a      	mov	r2, r3
 8005c84:	f000 fa3c 	bl	8006100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2140      	movs	r1, #64	; 0x40
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fa93 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005c94:	e00c      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	f000 fa8a 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005ca6:	e003      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cac:	e000      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr

08005cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr

08005d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr

08005d12 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(const TIM_HandleTypeDef *htim)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  return htim->State;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d20:	b2db      	uxtb	r3, r3
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc80      	pop	{r7}
 8005d2a:	4770      	bx	lr

08005d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a29      	ldr	r2, [pc, #164]	; (8005de4 <TIM_Base_SetConfig+0xb8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00b      	beq.n	8005d5c <TIM_Base_SetConfig+0x30>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4a:	d007      	beq.n	8005d5c <TIM_Base_SetConfig+0x30>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a26      	ldr	r2, [pc, #152]	; (8005de8 <TIM_Base_SetConfig+0xbc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d003      	beq.n	8005d5c <TIM_Base_SetConfig+0x30>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a25      	ldr	r2, [pc, #148]	; (8005dec <TIM_Base_SetConfig+0xc0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d108      	bne.n	8005d6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a1c      	ldr	r2, [pc, #112]	; (8005de4 <TIM_Base_SetConfig+0xb8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00b      	beq.n	8005d8e <TIM_Base_SetConfig+0x62>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d7c:	d007      	beq.n	8005d8e <TIM_Base_SetConfig+0x62>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a19      	ldr	r2, [pc, #100]	; (8005de8 <TIM_Base_SetConfig+0xbc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_Base_SetConfig+0x62>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a18      	ldr	r2, [pc, #96]	; (8005dec <TIM_Base_SetConfig+0xc0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d108      	bne.n	8005da0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a07      	ldr	r2, [pc, #28]	; (8005de4 <TIM_Base_SetConfig+0xb8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d103      	bne.n	8005dd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	615a      	str	r2, [r3, #20]
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr
 8005de4:	40012c00 	.word	0x40012c00
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800

08005df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f023 0201 	bic.w	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 0302 	bic.w	r3, r3, #2
 8005e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a1c      	ldr	r2, [pc, #112]	; (8005eb8 <TIM_OC1_SetConfig+0xc8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d10c      	bne.n	8005e66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0308 	bic.w	r3, r3, #8
 8005e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f023 0304 	bic.w	r3, r3, #4
 8005e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <TIM_OC1_SetConfig+0xc8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d111      	bne.n	8005e92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	621a      	str	r2, [r3, #32]
}
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc80      	pop	{r7}
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40012c00 	.word	0x40012c00

08005ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	f023 0210 	bic.w	r2, r3, #16
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f023 0320 	bic.w	r3, r3, #32
 8005f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a1d      	ldr	r2, [pc, #116]	; (8005f8c <TIM_OC2_SetConfig+0xd0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d10d      	bne.n	8005f38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a14      	ldr	r2, [pc, #80]	; (8005f8c <TIM_OC2_SetConfig+0xd0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d113      	bne.n	8005f68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr
 8005f8c:	40012c00 	.word	0x40012c00

08005f90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a1d      	ldr	r2, [pc, #116]	; (8006060 <TIM_OC3_SetConfig+0xd0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d10d      	bne.n	800600a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a14      	ldr	r2, [pc, #80]	; (8006060 <TIM_OC3_SetConfig+0xd0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d113      	bne.n	800603a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	621a      	str	r2, [r3, #32]
}
 8006054:	bf00      	nop
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40012c00 	.word	0x40012c00

08006064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800609a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	021b      	lsls	r3, r3, #8
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	031b      	lsls	r3, r3, #12
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a0f      	ldr	r2, [pc, #60]	; (80060fc <TIM_OC4_SetConfig+0x98>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d109      	bne.n	80060d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	019b      	lsls	r3, r3, #6
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr
 80060fc:	40012c00 	.word	0x40012c00

08006100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f023 0201 	bic.w	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800612a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f023 030a 	bic.w	r3, r3, #10
 800613c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr

0800615c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	f023 0210 	bic.w	r2, r3, #16
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	031b      	lsls	r3, r3, #12
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006198:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	621a      	str	r2, [r3, #32]
}
 80061b0:	bf00      	nop
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr

080061ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f043 0307 	orr.w	r3, r3, #7
 80061dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	609a      	str	r2, [r3, #8]
}
 80061e4:	bf00      	nop
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr

080061ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b087      	sub	sp, #28
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
 80061fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006208:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	021a      	lsls	r2, r3, #8
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	431a      	orrs	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4313      	orrs	r3, r2
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	609a      	str	r2, [r3, #8]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr

0800622c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f003 031f 	and.w	r3, r3, #31
 800623e:	2201      	movs	r2, #1
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	43db      	mvns	r3, r3
 800624e:	401a      	ands	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1a      	ldr	r2, [r3, #32]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 031f 	and.w	r3, r3, #31
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	fa01 f303 	lsl.w	r3, r1, r3
 8006264:	431a      	orrs	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006288:	2302      	movs	r3, #2
 800628a:	e046      	b.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a16      	ldr	r2, [pc, #88]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00e      	beq.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d8:	d009      	beq.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a12      	ldr	r2, [pc, #72]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a10      	ldr	r2, [pc, #64]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d10c      	bne.n	8006308 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	bc80      	pop	{r7}
 8006322:	4770      	bx	lr
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800

08006330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	bc80      	pop	{r7}
 8006340:	4770      	bx	lr

08006342 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr

08006354 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4a06      	ldr	r2, [pc, #24]	; (800637c <vApplicationGetIdleTaskMemory+0x28>)
 8006364:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4a05      	ldr	r2, [pc, #20]	; (8006380 <vApplicationGetIdleTaskMemory+0x2c>)
 800636a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2280      	movs	r2, #128	; 0x80
 8006370:	601a      	str	r2, [r3, #0]
}
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr
 800637c:	20000454 	.word	0x20000454
 8006380:	200004fc 	.word	0x200004fc

08006384 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4a07      	ldr	r2, [pc, #28]	; (80063b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006394:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	4a06      	ldr	r2, [pc, #24]	; (80063b4 <vApplicationGetTimerTaskMemory+0x30>)
 800639a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063a2:	601a      	str	r2, [r3, #0]
}
 80063a4:	bf00      	nop
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	200006fc 	.word	0x200006fc
 80063b4:	200007a4 	.word	0x200007a4

080063b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f103 0208 	add.w	r2, r3, #8
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f04f 32ff 	mov.w	r2, #4294967295
 80063d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f103 0208 	add.w	r2, r3, #8
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f103 0208 	add.w	r2, r3, #8
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bc80      	pop	{r7}
 80063f4:	4770      	bx	lr

080063f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	bc80      	pop	{r7}
 800640c:	4770      	bx	lr

0800640e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	601a      	str	r2, [r3, #0]
}
 800644a:	bf00      	nop
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr

08006454 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646a:	d103      	bne.n	8006474 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	e00c      	b.n	800648e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3308      	adds	r3, #8
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	e002      	b.n	8006482 <vListInsert+0x2e>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	429a      	cmp	r2, r3
 800648c:	d2f6      	bcs.n	800647c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	601a      	str	r2, [r3, #0]
}
 80064ba:	bf00      	nop
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr

080064c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6892      	ldr	r2, [r2, #8]
 80064da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6852      	ldr	r2, [r2, #4]
 80064e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d103      	bne.n	80064f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	1e5a      	subs	r2, r3, #1
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	bc80      	pop	{r7}
 8006514:	4770      	bx	lr
	...

08006518 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006542:	f002 fa0b 	bl	800895c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654e:	68f9      	ldr	r1, [r7, #12]
 8006550:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006552:	fb01 f303 	mul.w	r3, r1, r3
 8006556:	441a      	add	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006572:	3b01      	subs	r3, #1
 8006574:	68f9      	ldr	r1, [r7, #12]
 8006576:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006578:	fb01 f303 	mul.w	r3, r1, r3
 800657c:	441a      	add	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	22ff      	movs	r2, #255	; 0xff
 8006586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	22ff      	movs	r2, #255	; 0xff
 800658e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d114      	bne.n	80065c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01a      	beq.n	80065d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3310      	adds	r3, #16
 80065a4:	4618      	mov	r0, r3
 80065a6:	f001 fad9 	bl	8007b5c <xTaskRemoveFromEventList>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d012      	beq.n	80065d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065b0:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <xQueueGenericReset+0xcc>)
 80065b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	e009      	b.n	80065d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3310      	adds	r3, #16
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff fef6 	bl	80063b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3324      	adds	r3, #36	; 0x24
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff fef1 	bl	80063b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80065d6:	f002 f9f1 	bl	80089bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80065da:	2301      	movs	r3, #1
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	e000ed04 	.word	0xe000ed04

080065e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08e      	sub	sp, #56	; 0x38
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800660e:	bf00      	nop
 8006610:	e7fe      	b.n	8006610 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10a      	bne.n	800662e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
}
 800662a:	bf00      	nop
 800662c:	e7fe      	b.n	800662c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <xQueueGenericCreateStatic+0x52>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <xQueueGenericCreateStatic+0x56>
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <xQueueGenericCreateStatic+0x58>
 800663e:	2300      	movs	r3, #0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	623b      	str	r3, [r7, #32]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d102      	bne.n	8006666 <xQueueGenericCreateStatic+0x7e>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <xQueueGenericCreateStatic+0x82>
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <xQueueGenericCreateStatic+0x84>
 800666a:	2300      	movs	r3, #0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	61fb      	str	r3, [r7, #28]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006686:	2350      	movs	r3, #80	; 0x50
 8006688:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b50      	cmp	r3, #80	; 0x50
 800668e:	d00a      	beq.n	80066a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	61bb      	str	r3, [r7, #24]
}
 80066a2:	bf00      	nop
 80066a4:	e7fe      	b.n	80066a4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00d      	beq.n	80066cc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066b8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	4613      	mov	r3, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	68b9      	ldr	r1, [r7, #8]
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 f843 	bl	8006752 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3730      	adds	r7, #48	; 0x30
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b08a      	sub	sp, #40	; 0x28
 80066da:	af02      	add	r7, sp, #8
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	4613      	mov	r3, r2
 80066e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <xQueueGenericCreate+0x2a>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	613b      	str	r3, [r7, #16]
}
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d102      	bne.n	800670c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006706:	2300      	movs	r3, #0
 8006708:	61fb      	str	r3, [r7, #28]
 800670a:	e004      	b.n	8006716 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	fb02 f303 	mul.w	r3, r2, r3
 8006714:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	3350      	adds	r3, #80	; 0x50
 800671a:	4618      	mov	r0, r3
 800671c:	f002 fa1e 	bl	8008b5c <pvPortMalloc>
 8006720:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00f      	beq.n	8006748 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	3350      	adds	r3, #80	; 0x50
 800672c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006736:	79fa      	ldrb	r2, [r7, #7]
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	4613      	mov	r3, r2
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 f805 	bl	8006752 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006748:	69bb      	ldr	r3, [r7, #24]
	}
 800674a:	4618      	mov	r0, r3
 800674c:	3720      	adds	r7, #32
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
 800675e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	e002      	b.n	8006774 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006780:	2101      	movs	r1, #1
 8006782:	69b8      	ldr	r0, [r7, #24]
 8006784:	f7ff fec8 	bl	8006518 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	78fa      	ldrb	r2, [r7, #3]
 800678c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006790:	bf00      	nop
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08e      	sub	sp, #56	; 0x38
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067a6:	2300      	movs	r3, #0
 80067a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <xQueueGenericSend+0x32>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d103      	bne.n	80067d8 <xQueueGenericSend+0x40>
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <xQueueGenericSend+0x44>
 80067d8:	2301      	movs	r3, #1
 80067da:	e000      	b.n	80067de <xQueueGenericSend+0x46>
 80067dc:	2300      	movs	r3, #0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <xQueueGenericSend+0x60>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067f4:	bf00      	nop
 80067f6:	e7fe      	b.n	80067f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d103      	bne.n	8006806 <xQueueGenericSend+0x6e>
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <xQueueGenericSend+0x72>
 8006806:	2301      	movs	r3, #1
 8006808:	e000      	b.n	800680c <xQueueGenericSend+0x74>
 800680a:	2300      	movs	r3, #0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <xQueueGenericSend+0x8e>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	623b      	str	r3, [r7, #32]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006826:	f001 fb5f 	bl	8007ee8 <xTaskGetSchedulerState>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d102      	bne.n	8006836 <xQueueGenericSend+0x9e>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <xQueueGenericSend+0xa2>
 8006836:	2301      	movs	r3, #1
 8006838:	e000      	b.n	800683c <xQueueGenericSend+0xa4>
 800683a:	2300      	movs	r3, #0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <xQueueGenericSend+0xbe>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	61fb      	str	r3, [r7, #28]
}
 8006852:	bf00      	nop
 8006854:	e7fe      	b.n	8006854 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006856:	f002 f881 	bl	800895c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006862:	429a      	cmp	r2, r3
 8006864:	d302      	bcc.n	800686c <xQueueGenericSend+0xd4>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d129      	bne.n	80068c0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006872:	f000 fa07 	bl	8006c84 <prvCopyDataToQueue>
 8006876:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d010      	beq.n	80068a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	3324      	adds	r3, #36	; 0x24
 8006884:	4618      	mov	r0, r3
 8006886:	f001 f969 	bl	8007b5c <xTaskRemoveFromEventList>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d013      	beq.n	80068b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006890:	4b3f      	ldr	r3, [pc, #252]	; (8006990 <xQueueGenericSend+0x1f8>)
 8006892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	e00a      	b.n	80068b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d007      	beq.n	80068b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068a8:	4b39      	ldr	r3, [pc, #228]	; (8006990 <xQueueGenericSend+0x1f8>)
 80068aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80068b8:	f002 f880 	bl	80089bc <vPortExitCritical>
				return pdPASS;
 80068bc:	2301      	movs	r3, #1
 80068be:	e063      	b.n	8006988 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d103      	bne.n	80068ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068c6:	f002 f879 	bl	80089bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	e05c      	b.n	8006988 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d106      	bne.n	80068e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068d4:	f107 0314 	add.w	r3, r7, #20
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 f9a3 	bl	8007c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068de:	2301      	movs	r3, #1
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068e2:	f002 f86b 	bl	80089bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068e6:	f000 ff0d 	bl	8007704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068ea:	f002 f837 	bl	800895c <vPortEnterCritical>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068f4:	b25b      	sxtb	r3, r3
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	d103      	bne.n	8006904 <xQueueGenericSend+0x16c>
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800690a:	b25b      	sxtb	r3, r3
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	d103      	bne.n	800691a <xQueueGenericSend+0x182>
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800691a:	f002 f84f 	bl	80089bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800691e:	1d3a      	adds	r2, r7, #4
 8006920:	f107 0314 	add.w	r3, r7, #20
 8006924:	4611      	mov	r1, r2
 8006926:	4618      	mov	r0, r3
 8006928:	f001 f992 	bl	8007c50 <xTaskCheckForTimeOut>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d124      	bne.n	800697c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006932:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006934:	f000 fa9e 	bl	8006e74 <prvIsQueueFull>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d018      	beq.n	8006970 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	3310      	adds	r3, #16
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f001 f8b8 	bl	8007abc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800694c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800694e:	f000 fa29 	bl	8006da4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006952:	f000 fee5 	bl	8007720 <xTaskResumeAll>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	f47f af7c 	bne.w	8006856 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800695e:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <xQueueGenericSend+0x1f8>)
 8006960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	e772      	b.n	8006856 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006972:	f000 fa17 	bl	8006da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006976:	f000 fed3 	bl	8007720 <xTaskResumeAll>
 800697a:	e76c      	b.n	8006856 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800697c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800697e:	f000 fa11 	bl	8006da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006982:	f000 fecd 	bl	8007720 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006986:	2300      	movs	r3, #0
		}
	}
}
 8006988:	4618      	mov	r0, r3
 800698a:	3738      	adds	r7, #56	; 0x38
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	e000ed04 	.word	0xe000ed04

08006994 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08e      	sub	sp, #56	; 0x38
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d103      	bne.n	80069d0 <xQueueGenericSendFromISR+0x3c>
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <xQueueGenericSendFromISR+0x40>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <xQueueGenericSendFromISR+0x42>
 80069d4:	2300      	movs	r3, #0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10a      	bne.n	80069f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	623b      	str	r3, [r7, #32]
}
 80069ec:	bf00      	nop
 80069ee:	e7fe      	b.n	80069ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d103      	bne.n	80069fe <xQueueGenericSendFromISR+0x6a>
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d101      	bne.n	8006a02 <xQueueGenericSendFromISR+0x6e>
 80069fe:	2301      	movs	r3, #1
 8006a00:	e000      	b.n	8006a04 <xQueueGenericSendFromISR+0x70>
 8006a02:	2300      	movs	r3, #0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10a      	bne.n	8006a1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	61fb      	str	r3, [r7, #28]
}
 8006a1a:	bf00      	nop
 8006a1c:	e7fe      	b.n	8006a1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a1e:	f002 f85f 	bl	8008ae0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a22:	f3ef 8211 	mrs	r2, BASEPRI
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	61ba      	str	r2, [r7, #24]
 8006a38:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <xQueueGenericSendFromISR+0xbc>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d12c      	bne.n	8006aaa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a60:	f000 f910 	bl	8006c84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a64:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6c:	d112      	bne.n	8006a94 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d016      	beq.n	8006aa4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	3324      	adds	r3, #36	; 0x24
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f001 f86e 	bl	8007b5c <xTaskRemoveFromEventList>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00e      	beq.n	8006aa4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00b      	beq.n	8006aa4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	e007      	b.n	8006aa4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a98:	3301      	adds	r3, #1
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	b25a      	sxtb	r2, r3
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006aa8:	e001      	b.n	8006aae <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ab8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3738      	adds	r7, #56	; 0x38
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08c      	sub	sp, #48	; 0x30
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10a      	bne.n	8006af4 <xQueueReceive+0x30>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	623b      	str	r3, [r7, #32]
}
 8006af0:	bf00      	nop
 8006af2:	e7fe      	b.n	8006af2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d103      	bne.n	8006b02 <xQueueReceive+0x3e>
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <xQueueReceive+0x42>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <xQueueReceive+0x44>
 8006b06:	2300      	movs	r3, #0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <xQueueReceive+0x5e>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	61fb      	str	r3, [r7, #28]
}
 8006b1e:	bf00      	nop
 8006b20:	e7fe      	b.n	8006b20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b22:	f001 f9e1 	bl	8007ee8 <xTaskGetSchedulerState>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d102      	bne.n	8006b32 <xQueueReceive+0x6e>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <xQueueReceive+0x72>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <xQueueReceive+0x74>
 8006b36:	2300      	movs	r3, #0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <xQueueReceive+0x8e>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	61bb      	str	r3, [r7, #24]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b52:	f001 ff03 	bl	800895c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d01f      	beq.n	8006ba2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b66:	f000 f8f7 	bl	8006d58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	1e5a      	subs	r2, r3, #1
 8006b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00f      	beq.n	8006b9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	3310      	adds	r3, #16
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 ffec 	bl	8007b5c <xTaskRemoveFromEventList>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d007      	beq.n	8006b9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b8a:	4b3d      	ldr	r3, [pc, #244]	; (8006c80 <xQueueReceive+0x1bc>)
 8006b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b9a:	f001 ff0f 	bl	80089bc <vPortExitCritical>
				return pdPASS;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e069      	b.n	8006c76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d103      	bne.n	8006bb0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ba8:	f001 ff08 	bl	80089bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bac:	2300      	movs	r3, #0
 8006bae:	e062      	b.n	8006c76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bb6:	f107 0310 	add.w	r3, r7, #16
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f001 f832 	bl	8007c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bc4:	f001 fefa 	bl	80089bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bc8:	f000 fd9c 	bl	8007704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bcc:	f001 fec6 	bl	800895c <vPortEnterCritical>
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bd6:	b25b      	sxtb	r3, r3
 8006bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bdc:	d103      	bne.n	8006be6 <xQueueReceive+0x122>
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bec:	b25b      	sxtb	r3, r3
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf2:	d103      	bne.n	8006bfc <xQueueReceive+0x138>
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bfc:	f001 fede 	bl	80089bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c00:	1d3a      	adds	r2, r7, #4
 8006c02:	f107 0310 	add.w	r3, r7, #16
 8006c06:	4611      	mov	r1, r2
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f001 f821 	bl	8007c50 <xTaskCheckForTimeOut>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d123      	bne.n	8006c5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c16:	f000 f917 	bl	8006e48 <prvIsQueueEmpty>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d017      	beq.n	8006c50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	3324      	adds	r3, #36	; 0x24
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	4611      	mov	r1, r2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 ff47 	bl	8007abc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c30:	f000 f8b8 	bl	8006da4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c34:	f000 fd74 	bl	8007720 <xTaskResumeAll>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d189      	bne.n	8006b52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006c3e:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <xQueueReceive+0x1bc>)
 8006c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	e780      	b.n	8006b52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c52:	f000 f8a7 	bl	8006da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c56:	f000 fd63 	bl	8007720 <xTaskResumeAll>
 8006c5a:	e77a      	b.n	8006b52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c5e:	f000 f8a1 	bl	8006da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c62:	f000 fd5d 	bl	8007720 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c68:	f000 f8ee 	bl	8006e48 <prvIsQueueEmpty>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f43f af6f 	beq.w	8006b52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3730      	adds	r7, #48	; 0x30
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	e000ed04 	.word	0xe000ed04

08006c84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c90:	2300      	movs	r3, #0
 8006c92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10d      	bne.n	8006cbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d14d      	bne.n	8006d46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 f938 	bl	8007f24 <xTaskPriorityDisinherit>
 8006cb4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	605a      	str	r2, [r3, #4]
 8006cbc:	e043      	b.n	8006d46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d119      	bne.n	8006cf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6898      	ldr	r0, [r3, #8]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ccc:	461a      	mov	r2, r3
 8006cce:	68b9      	ldr	r1, [r7, #8]
 8006cd0:	f002 f9d6 	bl	8009080 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	441a      	add	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d32b      	bcc.n	8006d46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	609a      	str	r2, [r3, #8]
 8006cf6:	e026      	b.n	8006d46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	68d8      	ldr	r0, [r3, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	461a      	mov	r2, r3
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	f002 f9bc 	bl	8009080 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	425b      	negs	r3, r3
 8006d12:	441a      	add	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d207      	bcs.n	8006d34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	425b      	negs	r3, r3
 8006d2e:	441a      	add	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d105      	bne.n	8006d46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d4e:	697b      	ldr	r3, [r7, #20]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d018      	beq.n	8006d9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	441a      	add	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d303      	bcc.n	8006d8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68d9      	ldr	r1, [r3, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	461a      	mov	r2, r3
 8006d96:	6838      	ldr	r0, [r7, #0]
 8006d98:	f002 f972 	bl	8009080 <memcpy>
	}
}
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006dac:	f001 fdd6 	bl	800895c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006db6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006db8:	e011      	b.n	8006dde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d012      	beq.n	8006de8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3324      	adds	r3, #36	; 0x24
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fec8 	bl	8007b5c <xTaskRemoveFromEventList>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006dd2:	f000 ff9f 	bl	8007d14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dce9      	bgt.n	8006dba <prvUnlockQueue+0x16>
 8006de6:	e000      	b.n	8006dea <prvUnlockQueue+0x46>
					break;
 8006de8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	22ff      	movs	r2, #255	; 0xff
 8006dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006df2:	f001 fde3 	bl	80089bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006df6:	f001 fdb1 	bl	800895c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e02:	e011      	b.n	8006e28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d012      	beq.n	8006e32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3310      	adds	r3, #16
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fea3 	bl	8007b5c <xTaskRemoveFromEventList>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e1c:	f000 ff7a 	bl	8007d14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	dce9      	bgt.n	8006e04 <prvUnlockQueue+0x60>
 8006e30:	e000      	b.n	8006e34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	22ff      	movs	r2, #255	; 0xff
 8006e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e3c:	f001 fdbe 	bl	80089bc <vPortExitCritical>
}
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e50:	f001 fd84 	bl	800895c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d102      	bne.n	8006e62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e001      	b.n	8006e66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e66:	f001 fda9 	bl	80089bc <vPortExitCritical>

	return xReturn;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e7c:	f001 fd6e 	bl	800895c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d102      	bne.n	8006e92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	e001      	b.n	8006e96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e96:	f001 fd91 	bl	80089bc <vPortExitCritical>

	return xReturn;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	e014      	b.n	8006ede <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006eb4:	4a0e      	ldr	r2, [pc, #56]	; (8006ef0 <vQueueAddToRegistry+0x4c>)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10b      	bne.n	8006ed8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ec0:	490b      	ldr	r1, [pc, #44]	; (8006ef0 <vQueueAddToRegistry+0x4c>)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006eca:	4a09      	ldr	r2, [pc, #36]	; (8006ef0 <vQueueAddToRegistry+0x4c>)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ed6:	e006      	b.n	8006ee6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b07      	cmp	r3, #7
 8006ee2:	d9e7      	bls.n	8006eb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bc80      	pop	{r7}
 8006eee:	4770      	bx	lr
 8006ef0:	20000ba4 	.word	0x20000ba4

08006ef4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f04:	f001 fd2a 	bl	800895c <vPortEnterCritical>
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f0e:	b25b      	sxtb	r3, r3
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d103      	bne.n	8006f1e <vQueueWaitForMessageRestricted+0x2a>
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f24:	b25b      	sxtb	r3, r3
 8006f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2a:	d103      	bne.n	8006f34 <vQueueWaitForMessageRestricted+0x40>
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f34:	f001 fd42 	bl	80089bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d106      	bne.n	8006f4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	3324      	adds	r3, #36	; 0x24
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	68b9      	ldr	r1, [r7, #8]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fddb 	bl	8007b04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f4e:	6978      	ldr	r0, [r7, #20]
 8006f50:	f7ff ff28 	bl	8006da4 <prvUnlockQueue>
	}
 8006f54:	bf00      	nop
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08e      	sub	sp, #56	; 0x38
 8006f60:	af04      	add	r7, sp, #16
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10a      	bne.n	8006f86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	623b      	str	r3, [r7, #32]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <xTaskCreateStatic+0x46>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	61fb      	str	r3, [r7, #28]
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006fa2:	23a8      	movs	r3, #168	; 0xa8
 8006fa4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2ba8      	cmp	r3, #168	; 0xa8
 8006faa:	d00a      	beq.n	8006fc2 <xTaskCreateStatic+0x66>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	61bb      	str	r3, [r7, #24]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d01e      	beq.n	8007006 <xTaskCreateStatic+0xaa>
 8006fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d01b      	beq.n	8007006 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fd6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	9303      	str	r3, [sp, #12]
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	9302      	str	r3, [sp, #8]
 8006fe8:	f107 0314 	add.w	r3, r7, #20
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 f851 	bl	80070a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007000:	f000 f8ec 	bl	80071dc <prvAddNewTaskToReadyList>
 8007004:	e001      	b.n	800700a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007006:	2300      	movs	r3, #0
 8007008:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800700a:	697b      	ldr	r3, [r7, #20]
	}
 800700c:	4618      	mov	r0, r3
 800700e:	3728      	adds	r7, #40	; 0x28
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08c      	sub	sp, #48	; 0x30
 8007018:	af04      	add	r7, sp, #16
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	4613      	mov	r3, r2
 8007022:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4618      	mov	r0, r3
 800702a:	f001 fd97 	bl	8008b5c <pvPortMalloc>
 800702e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00e      	beq.n	8007054 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007036:	20a8      	movs	r0, #168	; 0xa8
 8007038:	f001 fd90 	bl	8008b5c <pvPortMalloc>
 800703c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	631a      	str	r2, [r3, #48]	; 0x30
 800704a:	e005      	b.n	8007058 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800704c:	6978      	ldr	r0, [r7, #20]
 800704e:	f001 fe49 	bl	8008ce4 <vPortFree>
 8007052:	e001      	b.n	8007058 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007054:	2300      	movs	r3, #0
 8007056:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d017      	beq.n	800708e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007066:	88fa      	ldrh	r2, [r7, #6]
 8007068:	2300      	movs	r3, #0
 800706a:	9303      	str	r3, [sp, #12]
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	9302      	str	r3, [sp, #8]
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	9301      	str	r3, [sp, #4]
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	68b9      	ldr	r1, [r7, #8]
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f80f 	bl	80070a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007082:	69f8      	ldr	r0, [r7, #28]
 8007084:	f000 f8aa 	bl	80071dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007088:	2301      	movs	r3, #1
 800708a:	61bb      	str	r3, [r7, #24]
 800708c:	e002      	b.n	8007094 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800708e:	f04f 33ff 	mov.w	r3, #4294967295
 8007092:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007094:	69bb      	ldr	r3, [r7, #24]
	}
 8007096:	4618      	mov	r0, r3
 8007098:	3720      	adds	r7, #32
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b088      	sub	sp, #32
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	461a      	mov	r2, r3
 80070b8:	21a5      	movs	r1, #165	; 0xa5
 80070ba:	f001 ff47 	bl	8008f4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070c8:	3b01      	subs	r3, #1
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	f023 0307 	bic.w	r3, r3, #7
 80070d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	f003 0307 	and.w	r3, r3, #7
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	617b      	str	r3, [r7, #20]
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070f8:	2300      	movs	r3, #0
 80070fa:	61fb      	str	r3, [r7, #28]
 80070fc:	e012      	b.n	8007124 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	4413      	add	r3, r2
 8007104:	7819      	ldrb	r1, [r3, #0]
 8007106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	4413      	add	r3, r2
 800710c:	3334      	adds	r3, #52	; 0x34
 800710e:	460a      	mov	r2, r1
 8007110:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	4413      	add	r3, r2
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d006      	beq.n	800712c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	3301      	adds	r3, #1
 8007122:	61fb      	str	r3, [r7, #28]
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	2b0f      	cmp	r3, #15
 8007128:	d9e9      	bls.n	80070fe <prvInitialiseNewTask+0x5e>
 800712a:	e000      	b.n	800712e <prvInitialiseNewTask+0x8e>
		{
			break;
 800712c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007138:	2b37      	cmp	r3, #55	; 0x37
 800713a:	d901      	bls.n	8007140 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800713c:	2337      	movs	r3, #55	; 0x37
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007144:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800714a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	2200      	movs	r2, #0
 8007150:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	3304      	adds	r3, #4
 8007156:	4618      	mov	r0, r3
 8007158:	f7ff f94d 	bl	80063f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	3318      	adds	r3, #24
 8007160:	4618      	mov	r0, r3
 8007162:	f7ff f948 	bl	80063f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800716a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800717a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	2200      	movs	r2, #0
 8007180:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	2200      	movs	r2, #0
 8007188:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	3354      	adds	r3, #84	; 0x54
 8007190:	224c      	movs	r2, #76	; 0x4c
 8007192:	2100      	movs	r1, #0
 8007194:	4618      	mov	r0, r3
 8007196:	f001 fed9 	bl	8008f4c <memset>
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	4a0c      	ldr	r2, [pc, #48]	; (80071d0 <prvInitialiseNewTask+0x130>)
 800719e:	659a      	str	r2, [r3, #88]	; 0x58
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	4a0c      	ldr	r2, [pc, #48]	; (80071d4 <prvInitialiseNewTask+0x134>)
 80071a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	4a0b      	ldr	r2, [pc, #44]	; (80071d8 <prvInitialiseNewTask+0x138>)
 80071aa:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	68f9      	ldr	r1, [r7, #12]
 80071b0:	69b8      	ldr	r0, [r7, #24]
 80071b2:	f001 fadf 	bl	8008774 <pxPortInitialiseStack>
 80071b6:	4602      	mov	r2, r0
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071c8:	bf00      	nop
 80071ca:	3720      	adds	r7, #32
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20001e30 	.word	0x20001e30
 80071d4:	20001e98 	.word	0x20001e98
 80071d8:	20001f00 	.word	0x20001f00

080071dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80071e4:	f001 fbba 	bl	800895c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071e8:	4b2d      	ldr	r3, [pc, #180]	; (80072a0 <prvAddNewTaskToReadyList+0xc4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3301      	adds	r3, #1
 80071ee:	4a2c      	ldr	r2, [pc, #176]	; (80072a0 <prvAddNewTaskToReadyList+0xc4>)
 80071f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071f2:	4b2c      	ldr	r3, [pc, #176]	; (80072a4 <prvAddNewTaskToReadyList+0xc8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d109      	bne.n	800720e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071fa:	4a2a      	ldr	r2, [pc, #168]	; (80072a4 <prvAddNewTaskToReadyList+0xc8>)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007200:	4b27      	ldr	r3, [pc, #156]	; (80072a0 <prvAddNewTaskToReadyList+0xc4>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d110      	bne.n	800722a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007208:	f000 fda8 	bl	8007d5c <prvInitialiseTaskLists>
 800720c:	e00d      	b.n	800722a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800720e:	4b26      	ldr	r3, [pc, #152]	; (80072a8 <prvAddNewTaskToReadyList+0xcc>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d109      	bne.n	800722a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007216:	4b23      	ldr	r3, [pc, #140]	; (80072a4 <prvAddNewTaskToReadyList+0xc8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	429a      	cmp	r2, r3
 8007222:	d802      	bhi.n	800722a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007224:	4a1f      	ldr	r2, [pc, #124]	; (80072a4 <prvAddNewTaskToReadyList+0xc8>)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800722a:	4b20      	ldr	r3, [pc, #128]	; (80072ac <prvAddNewTaskToReadyList+0xd0>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3301      	adds	r3, #1
 8007230:	4a1e      	ldr	r2, [pc, #120]	; (80072ac <prvAddNewTaskToReadyList+0xd0>)
 8007232:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007234:	4b1d      	ldr	r3, [pc, #116]	; (80072ac <prvAddNewTaskToReadyList+0xd0>)
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007240:	4b1b      	ldr	r3, [pc, #108]	; (80072b0 <prvAddNewTaskToReadyList+0xd4>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d903      	bls.n	8007250 <prvAddNewTaskToReadyList+0x74>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	4a18      	ldr	r2, [pc, #96]	; (80072b0 <prvAddNewTaskToReadyList+0xd4>)
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007254:	4613      	mov	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4a15      	ldr	r2, [pc, #84]	; (80072b4 <prvAddNewTaskToReadyList+0xd8>)
 800725e:	441a      	add	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3304      	adds	r3, #4
 8007264:	4619      	mov	r1, r3
 8007266:	4610      	mov	r0, r2
 8007268:	f7ff f8d1 	bl	800640e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800726c:	f001 fba6 	bl	80089bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007270:	4b0d      	ldr	r3, [pc, #52]	; (80072a8 <prvAddNewTaskToReadyList+0xcc>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00e      	beq.n	8007296 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007278:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <prvAddNewTaskToReadyList+0xc8>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007282:	429a      	cmp	r2, r3
 8007284:	d207      	bcs.n	8007296 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007286:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <prvAddNewTaskToReadyList+0xdc>)
 8007288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007296:	bf00      	nop
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	200010b8 	.word	0x200010b8
 80072a4:	20000be4 	.word	0x20000be4
 80072a8:	200010c4 	.word	0x200010c4
 80072ac:	200010d4 	.word	0x200010d4
 80072b0:	200010c0 	.word	0x200010c0
 80072b4:	20000be8 	.word	0x20000be8
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80072c4:	f001 fb4a 	bl	800895c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d102      	bne.n	80072d4 <vTaskDelete+0x18>
 80072ce:	4b2c      	ldr	r3, [pc, #176]	; (8007380 <vTaskDelete+0xc4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	e000      	b.n	80072d6 <vTaskDelete+0x1a>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3304      	adds	r3, #4
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff f8f1 	bl	80064c4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d004      	beq.n	80072f4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3318      	adds	r3, #24
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff f8e8 	bl	80064c4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80072f4:	4b23      	ldr	r3, [pc, #140]	; (8007384 <vTaskDelete+0xc8>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3301      	adds	r3, #1
 80072fa:	4a22      	ldr	r2, [pc, #136]	; (8007384 <vTaskDelete+0xc8>)
 80072fc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80072fe:	4b20      	ldr	r3, [pc, #128]	; (8007380 <vTaskDelete+0xc4>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	429a      	cmp	r2, r3
 8007306:	d10b      	bne.n	8007320 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3304      	adds	r3, #4
 800730c:	4619      	mov	r1, r3
 800730e:	481e      	ldr	r0, [pc, #120]	; (8007388 <vTaskDelete+0xcc>)
 8007310:	f7ff f87d 	bl	800640e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007314:	4b1d      	ldr	r3, [pc, #116]	; (800738c <vTaskDelete+0xd0>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3301      	adds	r3, #1
 800731a:	4a1c      	ldr	r2, [pc, #112]	; (800738c <vTaskDelete+0xd0>)
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	e009      	b.n	8007334 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007320:	4b1b      	ldr	r3, [pc, #108]	; (8007390 <vTaskDelete+0xd4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3b01      	subs	r3, #1
 8007326:	4a1a      	ldr	r2, [pc, #104]	; (8007390 <vTaskDelete+0xd4>)
 8007328:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 fd84 	bl	8007e38 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007330:	f000 fdb6 	bl	8007ea0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007334:	f001 fb42 	bl	80089bc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007338:	4b16      	ldr	r3, [pc, #88]	; (8007394 <vTaskDelete+0xd8>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01b      	beq.n	8007378 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8007340:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <vTaskDelete+0xc4>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	429a      	cmp	r2, r3
 8007348:	d116      	bne.n	8007378 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800734a:	4b13      	ldr	r3, [pc, #76]	; (8007398 <vTaskDelete+0xdc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <vTaskDelete+0xac>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	60bb      	str	r3, [r7, #8]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007368:	4b0c      	ldr	r3, [pc, #48]	; (800739c <vTaskDelete+0xe0>)
 800736a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007378:	bf00      	nop
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	20000be4 	.word	0x20000be4
 8007384:	200010d4 	.word	0x200010d4
 8007388:	2000108c 	.word	0x2000108c
 800738c:	200010a0 	.word	0x200010a0
 8007390:	200010b8 	.word	0x200010b8
 8007394:	200010c4 	.word	0x200010c4
 8007398:	200010e0 	.word	0x200010e0
 800739c:	e000ed04 	.word	0xe000ed04

080073a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d017      	beq.n	80073e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80073b2:	4b13      	ldr	r3, [pc, #76]	; (8007400 <vTaskDelay+0x60>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <vTaskDelay+0x30>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	60bb      	str	r3, [r7, #8]
}
 80073cc:	bf00      	nop
 80073ce:	e7fe      	b.n	80073ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80073d0:	f000 f998 	bl	8007704 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073d4:	2100      	movs	r1, #0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fe12 	bl	8008000 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073dc:	f000 f9a0 	bl	8007720 <xTaskResumeAll>
 80073e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d107      	bne.n	80073f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80073e8:	4b06      	ldr	r3, [pc, #24]	; (8007404 <vTaskDelay+0x64>)
 80073ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073f8:	bf00      	nop
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	200010e0 	.word	0x200010e0
 8007404:	e000ed04 	.word	0xe000ed04

08007408 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007410:	f001 faa4 	bl	800895c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d102      	bne.n	8007420 <vTaskSuspend+0x18>
 800741a:	4b30      	ldr	r3, [pc, #192]	; (80074dc <vTaskSuspend+0xd4>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	e000      	b.n	8007422 <vTaskSuspend+0x1a>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3304      	adds	r3, #4
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff f84b 	bl	80064c4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	2b00      	cmp	r3, #0
 8007434:	d004      	beq.n	8007440 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3318      	adds	r3, #24
 800743a:	4618      	mov	r0, r3
 800743c:	f7ff f842 	bl	80064c4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3304      	adds	r3, #4
 8007444:	4619      	mov	r1, r3
 8007446:	4826      	ldr	r0, [pc, #152]	; (80074e0 <vTaskSuspend+0xd8>)
 8007448:	f7fe ffe1 	bl	800640e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b01      	cmp	r3, #1
 8007456:	d103      	bne.n	8007460 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007460:	f001 faac 	bl	80089bc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007464:	4b1f      	ldr	r3, [pc, #124]	; (80074e4 <vTaskSuspend+0xdc>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d005      	beq.n	8007478 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800746c:	f001 fa76 	bl	800895c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007470:	f000 fd16 	bl	8007ea0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007474:	f001 faa2 	bl	80089bc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007478:	4b18      	ldr	r3, [pc, #96]	; (80074dc <vTaskSuspend+0xd4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	429a      	cmp	r2, r3
 8007480:	d127      	bne.n	80074d2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8007482:	4b18      	ldr	r3, [pc, #96]	; (80074e4 <vTaskSuspend+0xdc>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d017      	beq.n	80074ba <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800748a:	4b17      	ldr	r3, [pc, #92]	; (80074e8 <vTaskSuspend+0xe0>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00a      	beq.n	80074a8 <vTaskSuspend+0xa0>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	60bb      	str	r3, [r7, #8]
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80074a8:	4b10      	ldr	r3, [pc, #64]	; (80074ec <vTaskSuspend+0xe4>)
 80074aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074b8:	e00b      	b.n	80074d2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80074ba:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <vTaskSuspend+0xd8>)
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <vTaskSuspend+0xe8>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d103      	bne.n	80074ce <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80074c6:	4b05      	ldr	r3, [pc, #20]	; (80074dc <vTaskSuspend+0xd4>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]
	}
 80074cc:	e001      	b.n	80074d2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80074ce:	f000 fa91 	bl	80079f4 <vTaskSwitchContext>
	}
 80074d2:	bf00      	nop
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20000be4 	.word	0x20000be4
 80074e0:	200010a4 	.word	0x200010a4
 80074e4:	200010c4 	.word	0x200010c4
 80074e8:	200010e0 	.word	0x200010e0
 80074ec:	e000ed04 	.word	0xe000ed04
 80074f0:	200010b8 	.word	0x200010b8

080074f4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	60fb      	str	r3, [r7, #12]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	4a0e      	ldr	r2, [pc, #56]	; (8007560 <prvTaskIsTaskSuspended+0x6c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d101      	bne.n	800752e <prvTaskIsTaskSuspended+0x3a>
 800752a:	2301      	movs	r3, #1
 800752c:	e000      	b.n	8007530 <prvTaskIsTaskSuspended+0x3c>
 800752e:	2300      	movs	r3, #0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00f      	beq.n	8007554 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007538:	4a0a      	ldr	r2, [pc, #40]	; (8007564 <prvTaskIsTaskSuspended+0x70>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d00a      	beq.n	8007554 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <prvTaskIsTaskSuspended+0x56>
 8007546:	2301      	movs	r3, #1
 8007548:	e000      	b.n	800754c <prvTaskIsTaskSuspended+0x58>
 800754a:	2300      	movs	r3, #0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8007550:	2301      	movs	r3, #1
 8007552:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007554:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007556:	4618      	mov	r0, r3
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	bc80      	pop	{r7}
 800755e:	4770      	bx	lr
 8007560:	200010a4 	.word	0x200010a4
 8007564:	20001078 	.word	0x20001078

08007568 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10a      	bne.n	8007590 <vTaskResume+0x28>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	60bb      	str	r3, [r7, #8]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d03a      	beq.n	800760c <vTaskResume+0xa4>
 8007596:	4b1f      	ldr	r3, [pc, #124]	; (8007614 <vTaskResume+0xac>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	429a      	cmp	r2, r3
 800759e:	d035      	beq.n	800760c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80075a0:	f001 f9dc 	bl	800895c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f7ff ffa5 	bl	80074f4 <prvTaskIsTaskSuspended>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d02b      	beq.n	8007608 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3304      	adds	r3, #4
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fe ff85 	bl	80064c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075be:	4b16      	ldr	r3, [pc, #88]	; (8007618 <vTaskResume+0xb0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d903      	bls.n	80075ce <vTaskResume+0x66>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	4a13      	ldr	r2, [pc, #76]	; (8007618 <vTaskResume+0xb0>)
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d2:	4613      	mov	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4a10      	ldr	r2, [pc, #64]	; (800761c <vTaskResume+0xb4>)
 80075dc:	441a      	add	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3304      	adds	r3, #4
 80075e2:	4619      	mov	r1, r3
 80075e4:	4610      	mov	r0, r2
 80075e6:	f7fe ff12 	bl	800640e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ee:	4b09      	ldr	r3, [pc, #36]	; (8007614 <vTaskResume+0xac>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d307      	bcc.n	8007608 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80075f8:	4b09      	ldr	r3, [pc, #36]	; (8007620 <vTaskResume+0xb8>)
 80075fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007608:	f001 f9d8 	bl	80089bc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800760c:	bf00      	nop
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	20000be4 	.word	0x20000be4
 8007618:	200010c0 	.word	0x200010c0
 800761c:	20000be8 	.word	0x20000be8
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b08a      	sub	sp, #40	; 0x28
 8007628:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800762a:	2300      	movs	r3, #0
 800762c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800762e:	2300      	movs	r3, #0
 8007630:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007632:	463a      	mov	r2, r7
 8007634:	1d39      	adds	r1, r7, #4
 8007636:	f107 0308 	add.w	r3, r7, #8
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe fe8a 	bl	8006354 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	9202      	str	r2, [sp, #8]
 8007648:	9301      	str	r3, [sp, #4]
 800764a:	2300      	movs	r3, #0
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	2300      	movs	r3, #0
 8007650:	460a      	mov	r2, r1
 8007652:	4924      	ldr	r1, [pc, #144]	; (80076e4 <vTaskStartScheduler+0xc0>)
 8007654:	4824      	ldr	r0, [pc, #144]	; (80076e8 <vTaskStartScheduler+0xc4>)
 8007656:	f7ff fc81 	bl	8006f5c <xTaskCreateStatic>
 800765a:	4603      	mov	r3, r0
 800765c:	4a23      	ldr	r2, [pc, #140]	; (80076ec <vTaskStartScheduler+0xc8>)
 800765e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007660:	4b22      	ldr	r3, [pc, #136]	; (80076ec <vTaskStartScheduler+0xc8>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007668:	2301      	movs	r3, #1
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	e001      	b.n	8007672 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d102      	bne.n	800767e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007678:	f000 fd16 	bl	80080a8 <xTimerCreateTimerTask>
 800767c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d11b      	bne.n	80076bc <vTaskStartScheduler+0x98>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	613b      	str	r3, [r7, #16]
}
 8007696:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007698:	4b15      	ldr	r3, [pc, #84]	; (80076f0 <vTaskStartScheduler+0xcc>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3354      	adds	r3, #84	; 0x54
 800769e:	4a15      	ldr	r2, [pc, #84]	; (80076f4 <vTaskStartScheduler+0xd0>)
 80076a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076a2:	4b15      	ldr	r3, [pc, #84]	; (80076f8 <vTaskStartScheduler+0xd4>)
 80076a4:	f04f 32ff 	mov.w	r2, #4294967295
 80076a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076aa:	4b14      	ldr	r3, [pc, #80]	; (80076fc <vTaskStartScheduler+0xd8>)
 80076ac:	2201      	movs	r2, #1
 80076ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80076b0:	4b13      	ldr	r3, [pc, #76]	; (8007700 <vTaskStartScheduler+0xdc>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076b6:	f001 f8df 	bl	8008878 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076ba:	e00e      	b.n	80076da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c2:	d10a      	bne.n	80076da <vTaskStartScheduler+0xb6>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	60fb      	str	r3, [r7, #12]
}
 80076d6:	bf00      	nop
 80076d8:	e7fe      	b.n	80076d8 <vTaskStartScheduler+0xb4>
}
 80076da:	bf00      	nop
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	08009c88 	.word	0x08009c88
 80076e8:	08007d2d 	.word	0x08007d2d
 80076ec:	200010dc 	.word	0x200010dc
 80076f0:	20000be4 	.word	0x20000be4
 80076f4:	2000007c 	.word	0x2000007c
 80076f8:	200010d8 	.word	0x200010d8
 80076fc:	200010c4 	.word	0x200010c4
 8007700:	200010bc 	.word	0x200010bc

08007704 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007708:	4b04      	ldr	r3, [pc, #16]	; (800771c <vTaskSuspendAll+0x18>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3301      	adds	r3, #1
 800770e:	4a03      	ldr	r2, [pc, #12]	; (800771c <vTaskSuspendAll+0x18>)
 8007710:	6013      	str	r3, [r2, #0]
}
 8007712:	bf00      	nop
 8007714:	46bd      	mov	sp, r7
 8007716:	bc80      	pop	{r7}
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	200010e0 	.word	0x200010e0

08007720 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800772a:	2300      	movs	r3, #0
 800772c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800772e:	4b42      	ldr	r3, [pc, #264]	; (8007838 <xTaskResumeAll+0x118>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10a      	bne.n	800774c <xTaskResumeAll+0x2c>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	603b      	str	r3, [r7, #0]
}
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800774c:	f001 f906 	bl	800895c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007750:	4b39      	ldr	r3, [pc, #228]	; (8007838 <xTaskResumeAll+0x118>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3b01      	subs	r3, #1
 8007756:	4a38      	ldr	r2, [pc, #224]	; (8007838 <xTaskResumeAll+0x118>)
 8007758:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800775a:	4b37      	ldr	r3, [pc, #220]	; (8007838 <xTaskResumeAll+0x118>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d162      	bne.n	8007828 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007762:	4b36      	ldr	r3, [pc, #216]	; (800783c <xTaskResumeAll+0x11c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d05e      	beq.n	8007828 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800776a:	e02f      	b.n	80077cc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800776c:	4b34      	ldr	r3, [pc, #208]	; (8007840 <xTaskResumeAll+0x120>)
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	3318      	adds	r3, #24
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe fea3 	bl	80064c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3304      	adds	r3, #4
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe fe9e 	bl	80064c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778c:	4b2d      	ldr	r3, [pc, #180]	; (8007844 <xTaskResumeAll+0x124>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	429a      	cmp	r2, r3
 8007792:	d903      	bls.n	800779c <xTaskResumeAll+0x7c>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	4a2a      	ldr	r2, [pc, #168]	; (8007844 <xTaskResumeAll+0x124>)
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a0:	4613      	mov	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4a27      	ldr	r2, [pc, #156]	; (8007848 <xTaskResumeAll+0x128>)
 80077aa:	441a      	add	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3304      	adds	r3, #4
 80077b0:	4619      	mov	r1, r3
 80077b2:	4610      	mov	r0, r2
 80077b4:	f7fe fe2b 	bl	800640e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077bc:	4b23      	ldr	r3, [pc, #140]	; (800784c <xTaskResumeAll+0x12c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d302      	bcc.n	80077cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80077c6:	4b22      	ldr	r3, [pc, #136]	; (8007850 <xTaskResumeAll+0x130>)
 80077c8:	2201      	movs	r2, #1
 80077ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077cc:	4b1c      	ldr	r3, [pc, #112]	; (8007840 <xTaskResumeAll+0x120>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1cb      	bne.n	800776c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077da:	f000 fb61 	bl	8007ea0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80077de:	4b1d      	ldr	r3, [pc, #116]	; (8007854 <xTaskResumeAll+0x134>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d010      	beq.n	800780c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077ea:	f000 f845 	bl	8007878 <xTaskIncrementTick>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80077f4:	4b16      	ldr	r3, [pc, #88]	; (8007850 <xTaskResumeAll+0x130>)
 80077f6:	2201      	movs	r2, #1
 80077f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1f1      	bne.n	80077ea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007806:	4b13      	ldr	r3, [pc, #76]	; (8007854 <xTaskResumeAll+0x134>)
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800780c:	4b10      	ldr	r3, [pc, #64]	; (8007850 <xTaskResumeAll+0x130>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d009      	beq.n	8007828 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007814:	2301      	movs	r3, #1
 8007816:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007818:	4b0f      	ldr	r3, [pc, #60]	; (8007858 <xTaskResumeAll+0x138>)
 800781a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007828:	f001 f8c8 	bl	80089bc <vPortExitCritical>

	return xAlreadyYielded;
 800782c:	68bb      	ldr	r3, [r7, #8]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	200010e0 	.word	0x200010e0
 800783c:	200010b8 	.word	0x200010b8
 8007840:	20001078 	.word	0x20001078
 8007844:	200010c0 	.word	0x200010c0
 8007848:	20000be8 	.word	0x20000be8
 800784c:	20000be4 	.word	0x20000be4
 8007850:	200010cc 	.word	0x200010cc
 8007854:	200010c8 	.word	0x200010c8
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007862:	4b04      	ldr	r3, [pc, #16]	; (8007874 <xTaskGetTickCount+0x18>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007868:	687b      	ldr	r3, [r7, #4]
}
 800786a:	4618      	mov	r0, r3
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	bc80      	pop	{r7}
 8007872:	4770      	bx	lr
 8007874:	200010bc 	.word	0x200010bc

08007878 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007882:	4b51      	ldr	r3, [pc, #324]	; (80079c8 <xTaskIncrementTick+0x150>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	f040 808e 	bne.w	80079a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800788c:	4b4f      	ldr	r3, [pc, #316]	; (80079cc <xTaskIncrementTick+0x154>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3301      	adds	r3, #1
 8007892:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007894:	4a4d      	ldr	r2, [pc, #308]	; (80079cc <xTaskIncrementTick+0x154>)
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d120      	bne.n	80078e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80078a0:	4b4b      	ldr	r3, [pc, #300]	; (80079d0 <xTaskIncrementTick+0x158>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	603b      	str	r3, [r7, #0]
}
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <xTaskIncrementTick+0x46>
 80078c0:	4b43      	ldr	r3, [pc, #268]	; (80079d0 <xTaskIncrementTick+0x158>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	4b43      	ldr	r3, [pc, #268]	; (80079d4 <xTaskIncrementTick+0x15c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a41      	ldr	r2, [pc, #260]	; (80079d0 <xTaskIncrementTick+0x158>)
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	4a41      	ldr	r2, [pc, #260]	; (80079d4 <xTaskIncrementTick+0x15c>)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6013      	str	r3, [r2, #0]
 80078d4:	4b40      	ldr	r3, [pc, #256]	; (80079d8 <xTaskIncrementTick+0x160>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3301      	adds	r3, #1
 80078da:	4a3f      	ldr	r2, [pc, #252]	; (80079d8 <xTaskIncrementTick+0x160>)
 80078dc:	6013      	str	r3, [r2, #0]
 80078de:	f000 fadf 	bl	8007ea0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078e2:	4b3e      	ldr	r3, [pc, #248]	; (80079dc <xTaskIncrementTick+0x164>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d34e      	bcc.n	800798a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078ec:	4b38      	ldr	r3, [pc, #224]	; (80079d0 <xTaskIncrementTick+0x158>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <xTaskIncrementTick+0x82>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <xTaskIncrementTick+0x84>
 80078fa:	2300      	movs	r3, #0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d004      	beq.n	800790a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007900:	4b36      	ldr	r3, [pc, #216]	; (80079dc <xTaskIncrementTick+0x164>)
 8007902:	f04f 32ff 	mov.w	r2, #4294967295
 8007906:	601a      	str	r2, [r3, #0]
					break;
 8007908:	e03f      	b.n	800798a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800790a:	4b31      	ldr	r3, [pc, #196]	; (80079d0 <xTaskIncrementTick+0x158>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	429a      	cmp	r2, r3
 8007920:	d203      	bcs.n	800792a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007922:	4a2e      	ldr	r2, [pc, #184]	; (80079dc <xTaskIncrementTick+0x164>)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6013      	str	r3, [r2, #0]
						break;
 8007928:	e02f      	b.n	800798a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	3304      	adds	r3, #4
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe fdc8 	bl	80064c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007938:	2b00      	cmp	r3, #0
 800793a:	d004      	beq.n	8007946 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	3318      	adds	r3, #24
 8007940:	4618      	mov	r0, r3
 8007942:	f7fe fdbf 	bl	80064c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	4b25      	ldr	r3, [pc, #148]	; (80079e0 <xTaskIncrementTick+0x168>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d903      	bls.n	800795a <xTaskIncrementTick+0xe2>
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	4a22      	ldr	r2, [pc, #136]	; (80079e0 <xTaskIncrementTick+0x168>)
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4a1f      	ldr	r2, [pc, #124]	; (80079e4 <xTaskIncrementTick+0x16c>)
 8007968:	441a      	add	r2, r3
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	3304      	adds	r3, #4
 800796e:	4619      	mov	r1, r3
 8007970:	4610      	mov	r0, r2
 8007972:	f7fe fd4c 	bl	800640e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797a:	4b1b      	ldr	r3, [pc, #108]	; (80079e8 <xTaskIncrementTick+0x170>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	429a      	cmp	r2, r3
 8007982:	d3b3      	bcc.n	80078ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007984:	2301      	movs	r3, #1
 8007986:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007988:	e7b0      	b.n	80078ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800798a:	4b17      	ldr	r3, [pc, #92]	; (80079e8 <xTaskIncrementTick+0x170>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007990:	4914      	ldr	r1, [pc, #80]	; (80079e4 <xTaskIncrementTick+0x16c>)
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	440b      	add	r3, r1
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d907      	bls.n	80079b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80079a2:	2301      	movs	r3, #1
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	e004      	b.n	80079b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80079a8:	4b10      	ldr	r3, [pc, #64]	; (80079ec <xTaskIncrementTick+0x174>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3301      	adds	r3, #1
 80079ae:	4a0f      	ldr	r2, [pc, #60]	; (80079ec <xTaskIncrementTick+0x174>)
 80079b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80079b2:	4b0f      	ldr	r3, [pc, #60]	; (80079f0 <xTaskIncrementTick+0x178>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80079ba:	2301      	movs	r3, #1
 80079bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80079be:	697b      	ldr	r3, [r7, #20]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	200010e0 	.word	0x200010e0
 80079cc:	200010bc 	.word	0x200010bc
 80079d0:	20001070 	.word	0x20001070
 80079d4:	20001074 	.word	0x20001074
 80079d8:	200010d0 	.word	0x200010d0
 80079dc:	200010d8 	.word	0x200010d8
 80079e0:	200010c0 	.word	0x200010c0
 80079e4:	20000be8 	.word	0x20000be8
 80079e8:	20000be4 	.word	0x20000be4
 80079ec:	200010c8 	.word	0x200010c8
 80079f0:	200010cc 	.word	0x200010cc

080079f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079fa:	4b2a      	ldr	r3, [pc, #168]	; (8007aa4 <vTaskSwitchContext+0xb0>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a02:	4b29      	ldr	r3, [pc, #164]	; (8007aa8 <vTaskSwitchContext+0xb4>)
 8007a04:	2201      	movs	r2, #1
 8007a06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a08:	e046      	b.n	8007a98 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007a0a:	4b27      	ldr	r3, [pc, #156]	; (8007aa8 <vTaskSwitchContext+0xb4>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007a10:	4b26      	ldr	r3, [pc, #152]	; (8007aac <vTaskSwitchContext+0xb8>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	e010      	b.n	8007a3a <vTaskSwitchContext+0x46>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10a      	bne.n	8007a34 <vTaskSwitchContext+0x40>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	607b      	str	r3, [r7, #4]
}
 8007a30:	bf00      	nop
 8007a32:	e7fe      	b.n	8007a32 <vTaskSwitchContext+0x3e>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	491d      	ldr	r1, [pc, #116]	; (8007ab0 <vTaskSwitchContext+0xbc>)
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	440b      	add	r3, r1
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d0e4      	beq.n	8007a18 <vTaskSwitchContext+0x24>
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4613      	mov	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4a15      	ldr	r2, [pc, #84]	; (8007ab0 <vTaskSwitchContext+0xbc>)
 8007a5a:	4413      	add	r3, r2
 8007a5c:	60bb      	str	r3, [r7, #8]
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	605a      	str	r2, [r3, #4]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	3308      	adds	r3, #8
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d104      	bne.n	8007a7e <vTaskSwitchContext+0x8a>
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	605a      	str	r2, [r3, #4]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	4a0b      	ldr	r2, [pc, #44]	; (8007ab4 <vTaskSwitchContext+0xc0>)
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	4a08      	ldr	r2, [pc, #32]	; (8007aac <vTaskSwitchContext+0xb8>)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a8e:	4b09      	ldr	r3, [pc, #36]	; (8007ab4 <vTaskSwitchContext+0xc0>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3354      	adds	r3, #84	; 0x54
 8007a94:	4a08      	ldr	r2, [pc, #32]	; (8007ab8 <vTaskSwitchContext+0xc4>)
 8007a96:	6013      	str	r3, [r2, #0]
}
 8007a98:	bf00      	nop
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	200010e0 	.word	0x200010e0
 8007aa8:	200010cc 	.word	0x200010cc
 8007aac:	200010c0 	.word	0x200010c0
 8007ab0:	20000be8 	.word	0x20000be8
 8007ab4:	20000be4 	.word	0x20000be4
 8007ab8:	2000007c 	.word	0x2000007c

08007abc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10a      	bne.n	8007ae2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	60fb      	str	r3, [r7, #12]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ae2:	4b07      	ldr	r3, [pc, #28]	; (8007b00 <vTaskPlaceOnEventList+0x44>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3318      	adds	r3, #24
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7fe fcb2 	bl	8006454 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007af0:	2101      	movs	r1, #1
 8007af2:	6838      	ldr	r0, [r7, #0]
 8007af4:	f000 fa84 	bl	8008000 <prvAddCurrentTaskToDelayedList>
}
 8007af8:	bf00      	nop
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	20000be4 	.word	0x20000be4

08007b04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10a      	bne.n	8007b2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	617b      	str	r3, [r7, #20]
}
 8007b28:	bf00      	nop
 8007b2a:	e7fe      	b.n	8007b2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3318      	adds	r3, #24
 8007b32:	4619      	mov	r1, r3
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f7fe fc6a 	bl	800640e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b40:	f04f 33ff 	mov.w	r3, #4294967295
 8007b44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	68b8      	ldr	r0, [r7, #8]
 8007b4a:	f000 fa59 	bl	8008000 <prvAddCurrentTaskToDelayedList>
	}
 8007b4e:	bf00      	nop
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20000be4 	.word	0x20000be4

08007b5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	60fb      	str	r3, [r7, #12]
}
 8007b84:	bf00      	nop
 8007b86:	e7fe      	b.n	8007b86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	3318      	adds	r3, #24
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fc99 	bl	80064c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b92:	4b1e      	ldr	r3, [pc, #120]	; (8007c0c <xTaskRemoveFromEventList+0xb0>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d11d      	bne.n	8007bd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fc90 	bl	80064c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba8:	4b19      	ldr	r3, [pc, #100]	; (8007c10 <xTaskRemoveFromEventList+0xb4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d903      	bls.n	8007bb8 <xTaskRemoveFromEventList+0x5c>
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb4:	4a16      	ldr	r2, [pc, #88]	; (8007c10 <xTaskRemoveFromEventList+0xb4>)
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4a13      	ldr	r2, [pc, #76]	; (8007c14 <xTaskRemoveFromEventList+0xb8>)
 8007bc6:	441a      	add	r2, r3
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	3304      	adds	r3, #4
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	f7fe fc1d 	bl	800640e <vListInsertEnd>
 8007bd4:	e005      	b.n	8007be2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	3318      	adds	r3, #24
 8007bda:	4619      	mov	r1, r3
 8007bdc:	480e      	ldr	r0, [pc, #56]	; (8007c18 <xTaskRemoveFromEventList+0xbc>)
 8007bde:	f7fe fc16 	bl	800640e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be6:	4b0d      	ldr	r3, [pc, #52]	; (8007c1c <xTaskRemoveFromEventList+0xc0>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d905      	bls.n	8007bfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bf4:	4b0a      	ldr	r3, [pc, #40]	; (8007c20 <xTaskRemoveFromEventList+0xc4>)
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	e001      	b.n	8007c00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007c00:	697b      	ldr	r3, [r7, #20]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	200010e0 	.word	0x200010e0
 8007c10:	200010c0 	.word	0x200010c0
 8007c14:	20000be8 	.word	0x20000be8
 8007c18:	20001078 	.word	0x20001078
 8007c1c:	20000be4 	.word	0x20000be4
 8007c20:	200010cc 	.word	0x200010cc

08007c24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c2c:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <vTaskInternalSetTimeOutState+0x24>)
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c34:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <vTaskInternalSetTimeOutState+0x28>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	605a      	str	r2, [r3, #4]
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	200010d0 	.word	0x200010d0
 8007c4c:	200010bc 	.word	0x200010bc

08007c50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10a      	bne.n	8007c76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	613b      	str	r3, [r7, #16]
}
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	60fb      	str	r3, [r7, #12]
}
 8007c8e:	bf00      	nop
 8007c90:	e7fe      	b.n	8007c90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c92:	f000 fe63 	bl	800895c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c96:	4b1d      	ldr	r3, [pc, #116]	; (8007d0c <xTaskCheckForTimeOut+0xbc>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cae:	d102      	bne.n	8007cb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61fb      	str	r3, [r7, #28]
 8007cb4:	e023      	b.n	8007cfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4b15      	ldr	r3, [pc, #84]	; (8007d10 <xTaskCheckForTimeOut+0xc0>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d007      	beq.n	8007cd2 <xTaskCheckForTimeOut+0x82>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d302      	bcc.n	8007cd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	61fb      	str	r3, [r7, #28]
 8007cd0:	e015      	b.n	8007cfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d20b      	bcs.n	8007cf4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	1ad2      	subs	r2, r2, r3
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff ff9b 	bl	8007c24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	61fb      	str	r3, [r7, #28]
 8007cf2:	e004      	b.n	8007cfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cfe:	f000 fe5d 	bl	80089bc <vPortExitCritical>

	return xReturn;
 8007d02:	69fb      	ldr	r3, [r7, #28]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3720      	adds	r7, #32
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	200010bc 	.word	0x200010bc
 8007d10:	200010d0 	.word	0x200010d0

08007d14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d14:	b480      	push	{r7}
 8007d16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d18:	4b03      	ldr	r3, [pc, #12]	; (8007d28 <vTaskMissedYield+0x14>)
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	601a      	str	r2, [r3, #0]
}
 8007d1e:	bf00      	nop
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bc80      	pop	{r7}
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	200010cc 	.word	0x200010cc

08007d2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d34:	f000 f852 	bl	8007ddc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d38:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <prvIdleTask+0x28>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d9f9      	bls.n	8007d34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d40:	4b05      	ldr	r3, [pc, #20]	; (8007d58 <prvIdleTask+0x2c>)
 8007d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d50:	e7f0      	b.n	8007d34 <prvIdleTask+0x8>
 8007d52:	bf00      	nop
 8007d54:	20000be8 	.word	0x20000be8
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d62:	2300      	movs	r3, #0
 8007d64:	607b      	str	r3, [r7, #4]
 8007d66:	e00c      	b.n	8007d82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4a12      	ldr	r2, [pc, #72]	; (8007dbc <prvInitialiseTaskLists+0x60>)
 8007d74:	4413      	add	r3, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fb1e 	bl	80063b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	607b      	str	r3, [r7, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b37      	cmp	r3, #55	; 0x37
 8007d86:	d9ef      	bls.n	8007d68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d88:	480d      	ldr	r0, [pc, #52]	; (8007dc0 <prvInitialiseTaskLists+0x64>)
 8007d8a:	f7fe fb15 	bl	80063b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d8e:	480d      	ldr	r0, [pc, #52]	; (8007dc4 <prvInitialiseTaskLists+0x68>)
 8007d90:	f7fe fb12 	bl	80063b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d94:	480c      	ldr	r0, [pc, #48]	; (8007dc8 <prvInitialiseTaskLists+0x6c>)
 8007d96:	f7fe fb0f 	bl	80063b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d9a:	480c      	ldr	r0, [pc, #48]	; (8007dcc <prvInitialiseTaskLists+0x70>)
 8007d9c:	f7fe fb0c 	bl	80063b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007da0:	480b      	ldr	r0, [pc, #44]	; (8007dd0 <prvInitialiseTaskLists+0x74>)
 8007da2:	f7fe fb09 	bl	80063b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007da6:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <prvInitialiseTaskLists+0x78>)
 8007da8:	4a05      	ldr	r2, [pc, #20]	; (8007dc0 <prvInitialiseTaskLists+0x64>)
 8007daa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007dac:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <prvInitialiseTaskLists+0x7c>)
 8007dae:	4a05      	ldr	r2, [pc, #20]	; (8007dc4 <prvInitialiseTaskLists+0x68>)
 8007db0:	601a      	str	r2, [r3, #0]
}
 8007db2:	bf00      	nop
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	20000be8 	.word	0x20000be8
 8007dc0:	20001048 	.word	0x20001048
 8007dc4:	2000105c 	.word	0x2000105c
 8007dc8:	20001078 	.word	0x20001078
 8007dcc:	2000108c 	.word	0x2000108c
 8007dd0:	200010a4 	.word	0x200010a4
 8007dd4:	20001070 	.word	0x20001070
 8007dd8:	20001074 	.word	0x20001074

08007ddc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007de2:	e019      	b.n	8007e18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007de4:	f000 fdba 	bl	800895c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007de8:	4b10      	ldr	r3, [pc, #64]	; (8007e2c <prvCheckTasksWaitingTermination+0x50>)
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3304      	adds	r3, #4
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fe fb65 	bl	80064c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dfa:	4b0d      	ldr	r3, [pc, #52]	; (8007e30 <prvCheckTasksWaitingTermination+0x54>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	4a0b      	ldr	r2, [pc, #44]	; (8007e30 <prvCheckTasksWaitingTermination+0x54>)
 8007e02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e04:	4b0b      	ldr	r3, [pc, #44]	; (8007e34 <prvCheckTasksWaitingTermination+0x58>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	4a0a      	ldr	r2, [pc, #40]	; (8007e34 <prvCheckTasksWaitingTermination+0x58>)
 8007e0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e0e:	f000 fdd5 	bl	80089bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f810 	bl	8007e38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e18:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <prvCheckTasksWaitingTermination+0x58>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e1      	bne.n	8007de4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e20:	bf00      	nop
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	2000108c 	.word	0x2000108c
 8007e30:	200010b8 	.word	0x200010b8
 8007e34:	200010a0 	.word	0x200010a0

08007e38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3354      	adds	r3, #84	; 0x54
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 f899 	bl	8008f7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d108      	bne.n	8007e66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f000 ff43 	bl	8008ce4 <vPortFree>
				vPortFree( pxTCB );
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 ff40 	bl	8008ce4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e64:	e018      	b.n	8007e98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d103      	bne.n	8007e78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 ff37 	bl	8008ce4 <vPortFree>
	}
 8007e76:	e00f      	b.n	8007e98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d00a      	beq.n	8007e98 <prvDeleteTCB+0x60>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	60fb      	str	r3, [r7, #12]
}
 8007e94:	bf00      	nop
 8007e96:	e7fe      	b.n	8007e96 <prvDeleteTCB+0x5e>
	}
 8007e98:	bf00      	nop
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ea6:	4b0e      	ldr	r3, [pc, #56]	; (8007ee0 <prvResetNextTaskUnblockTime+0x40>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <prvResetNextTaskUnblockTime+0x14>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e000      	b.n	8007eb6 <prvResetNextTaskUnblockTime+0x16>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d004      	beq.n	8007ec4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007eba:	4b0a      	ldr	r3, [pc, #40]	; (8007ee4 <prvResetNextTaskUnblockTime+0x44>)
 8007ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ec2:	e008      	b.n	8007ed6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ec4:	4b06      	ldr	r3, [pc, #24]	; (8007ee0 <prvResetNextTaskUnblockTime+0x40>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	4a04      	ldr	r2, [pc, #16]	; (8007ee4 <prvResetNextTaskUnblockTime+0x44>)
 8007ed4:	6013      	str	r3, [r2, #0]
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bc80      	pop	{r7}
 8007ede:	4770      	bx	lr
 8007ee0:	20001070 	.word	0x20001070
 8007ee4:	200010d8 	.word	0x200010d8

08007ee8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007eee:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <xTaskGetSchedulerState+0x34>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d102      	bne.n	8007efc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	607b      	str	r3, [r7, #4]
 8007efa:	e008      	b.n	8007f0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007efc:	4b08      	ldr	r3, [pc, #32]	; (8007f20 <xTaskGetSchedulerState+0x38>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d102      	bne.n	8007f0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f04:	2302      	movs	r3, #2
 8007f06:	607b      	str	r3, [r7, #4]
 8007f08:	e001      	b.n	8007f0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f0e:	687b      	ldr	r3, [r7, #4]
	}
 8007f10:	4618      	mov	r0, r3
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	200010c4 	.word	0x200010c4
 8007f20:	200010e0 	.word	0x200010e0

08007f24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f30:	2300      	movs	r3, #0
 8007f32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d056      	beq.n	8007fe8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f3a:	4b2e      	ldr	r3, [pc, #184]	; (8007ff4 <xTaskPriorityDisinherit+0xd0>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d00a      	beq.n	8007f5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	60fb      	str	r3, [r7, #12]
}
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10a      	bne.n	8007f78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	60bb      	str	r3, [r7, #8]
}
 8007f74:	bf00      	nop
 8007f76:	e7fe      	b.n	8007f76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f7c:	1e5a      	subs	r2, r3, #1
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d02c      	beq.n	8007fe8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d128      	bne.n	8007fe8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe fa92 	bl	80064c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb8:	4b0f      	ldr	r3, [pc, #60]	; (8007ff8 <xTaskPriorityDisinherit+0xd4>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d903      	bls.n	8007fc8 <xTaskPriorityDisinherit+0xa4>
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	4a0c      	ldr	r2, [pc, #48]	; (8007ff8 <xTaskPriorityDisinherit+0xd4>)
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fcc:	4613      	mov	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4a09      	ldr	r2, [pc, #36]	; (8007ffc <xTaskPriorityDisinherit+0xd8>)
 8007fd6:	441a      	add	r2, r3
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	3304      	adds	r3, #4
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	f7fe fa15 	bl	800640e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fe8:	697b      	ldr	r3, [r7, #20]
	}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20000be4 	.word	0x20000be4
 8007ff8:	200010c0 	.word	0x200010c0
 8007ffc:	20000be8 	.word	0x20000be8

08008000 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800800a:	4b21      	ldr	r3, [pc, #132]	; (8008090 <prvAddCurrentTaskToDelayedList+0x90>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008010:	4b20      	ldr	r3, [pc, #128]	; (8008094 <prvAddCurrentTaskToDelayedList+0x94>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3304      	adds	r3, #4
 8008016:	4618      	mov	r0, r3
 8008018:	f7fe fa54 	bl	80064c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008022:	d10a      	bne.n	800803a <prvAddCurrentTaskToDelayedList+0x3a>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d007      	beq.n	800803a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800802a:	4b1a      	ldr	r3, [pc, #104]	; (8008094 <prvAddCurrentTaskToDelayedList+0x94>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3304      	adds	r3, #4
 8008030:	4619      	mov	r1, r3
 8008032:	4819      	ldr	r0, [pc, #100]	; (8008098 <prvAddCurrentTaskToDelayedList+0x98>)
 8008034:	f7fe f9eb 	bl	800640e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008038:	e026      	b.n	8008088 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4413      	add	r3, r2
 8008040:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008042:	4b14      	ldr	r3, [pc, #80]	; (8008094 <prvAddCurrentTaskToDelayedList+0x94>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	429a      	cmp	r2, r3
 8008050:	d209      	bcs.n	8008066 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008052:	4b12      	ldr	r3, [pc, #72]	; (800809c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	4b0f      	ldr	r3, [pc, #60]	; (8008094 <prvAddCurrentTaskToDelayedList+0x94>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3304      	adds	r3, #4
 800805c:	4619      	mov	r1, r3
 800805e:	4610      	mov	r0, r2
 8008060:	f7fe f9f8 	bl	8006454 <vListInsert>
}
 8008064:	e010      	b.n	8008088 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008066:	4b0e      	ldr	r3, [pc, #56]	; (80080a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <prvAddCurrentTaskToDelayedList+0x94>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	3304      	adds	r3, #4
 8008070:	4619      	mov	r1, r3
 8008072:	4610      	mov	r0, r2
 8008074:	f7fe f9ee 	bl	8006454 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008078:	4b0a      	ldr	r3, [pc, #40]	; (80080a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	429a      	cmp	r2, r3
 8008080:	d202      	bcs.n	8008088 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008082:	4a08      	ldr	r2, [pc, #32]	; (80080a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	6013      	str	r3, [r2, #0]
}
 8008088:	bf00      	nop
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	200010bc 	.word	0x200010bc
 8008094:	20000be4 	.word	0x20000be4
 8008098:	200010a4 	.word	0x200010a4
 800809c:	20001074 	.word	0x20001074
 80080a0:	20001070 	.word	0x20001070
 80080a4:	200010d8 	.word	0x200010d8

080080a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08a      	sub	sp, #40	; 0x28
 80080ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80080b2:	f000 fb1f 	bl	80086f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80080b6:	4b1c      	ldr	r3, [pc, #112]	; (8008128 <xTimerCreateTimerTask+0x80>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d021      	beq.n	8008102 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80080be:	2300      	movs	r3, #0
 80080c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80080c6:	1d3a      	adds	r2, r7, #4
 80080c8:	f107 0108 	add.w	r1, r7, #8
 80080cc:	f107 030c 	add.w	r3, r7, #12
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fe f957 	bl	8006384 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	9202      	str	r2, [sp, #8]
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	2302      	movs	r3, #2
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	2300      	movs	r3, #0
 80080e6:	460a      	mov	r2, r1
 80080e8:	4910      	ldr	r1, [pc, #64]	; (800812c <xTimerCreateTimerTask+0x84>)
 80080ea:	4811      	ldr	r0, [pc, #68]	; (8008130 <xTimerCreateTimerTask+0x88>)
 80080ec:	f7fe ff36 	bl	8006f5c <xTaskCreateStatic>
 80080f0:	4603      	mov	r3, r0
 80080f2:	4a10      	ldr	r2, [pc, #64]	; (8008134 <xTimerCreateTimerTask+0x8c>)
 80080f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80080f6:	4b0f      	ldr	r3, [pc, #60]	; (8008134 <xTimerCreateTimerTask+0x8c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80080fe:	2301      	movs	r3, #1
 8008100:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10a      	bne.n	800811e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	613b      	str	r3, [r7, #16]
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800811e:	697b      	ldr	r3, [r7, #20]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20001114 	.word	0x20001114
 800812c:	08009c90 	.word	0x08009c90
 8008130:	080082fd 	.word	0x080082fd
 8008134:	20001118 	.word	0x20001118

08008138 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008138:	b580      	push	{r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008146:	2030      	movs	r0, #48	; 0x30
 8008148:	f000 fd08 	bl	8008b5c <pvPortMalloc>
 800814c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00d      	beq.n	8008170 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	68b9      	ldr	r1, [r7, #8]
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 f809 	bl	800817a <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8008170:	697b      	ldr	r3, [r7, #20]
	}
 8008172:	4618      	mov	r0, r3
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b086      	sub	sp, #24
 800817e:	af00      	add	r7, sp, #0
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	607a      	str	r2, [r7, #4]
 8008186:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10a      	bne.n	80081a4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	617b      	str	r3, [r7, #20]
}
 80081a0:	bf00      	nop
 80081a2:	e7fe      	b.n	80081a2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d015      	beq.n	80081d6 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80081aa:	f000 faa3 	bl	80086f4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	6a3a      	ldr	r2, [r7, #32]
 80081ca:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	3304      	adds	r3, #4
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fe f910 	bl	80063f6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80081d6:	bf00      	nop
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08a      	sub	sp, #40	; 0x28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10a      	bne.n	800820e <xTimerGenericCommand+0x2e>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	623b      	str	r3, [r7, #32]
}
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800820e:	4b1a      	ldr	r3, [pc, #104]	; (8008278 <xTimerGenericCommand+0x98>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d02a      	beq.n	800826c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b05      	cmp	r3, #5
 8008226:	dc18      	bgt.n	800825a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008228:	f7ff fe5e 	bl	8007ee8 <xTaskGetSchedulerState>
 800822c:	4603      	mov	r3, r0
 800822e:	2b02      	cmp	r3, #2
 8008230:	d109      	bne.n	8008246 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008232:	4b11      	ldr	r3, [pc, #68]	; (8008278 <xTimerGenericCommand+0x98>)
 8008234:	6818      	ldr	r0, [r3, #0]
 8008236:	f107 0110 	add.w	r1, r7, #16
 800823a:	2300      	movs	r3, #0
 800823c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823e:	f7fe faab 	bl	8006798 <xQueueGenericSend>
 8008242:	6278      	str	r0, [r7, #36]	; 0x24
 8008244:	e012      	b.n	800826c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008246:	4b0c      	ldr	r3, [pc, #48]	; (8008278 <xTimerGenericCommand+0x98>)
 8008248:	6818      	ldr	r0, [r3, #0]
 800824a:	f107 0110 	add.w	r1, r7, #16
 800824e:	2300      	movs	r3, #0
 8008250:	2200      	movs	r2, #0
 8008252:	f7fe faa1 	bl	8006798 <xQueueGenericSend>
 8008256:	6278      	str	r0, [r7, #36]	; 0x24
 8008258:	e008      	b.n	800826c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800825a:	4b07      	ldr	r3, [pc, #28]	; (8008278 <xTimerGenericCommand+0x98>)
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	f107 0110 	add.w	r1, r7, #16
 8008262:	2300      	movs	r3, #0
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	f7fe fb95 	bl	8006994 <xQueueGenericSendFromISR>
 800826a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800826e:	4618      	mov	r0, r3
 8008270:	3728      	adds	r7, #40	; 0x28
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	20001114 	.word	0x20001114

0800827c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b088      	sub	sp, #32
 8008280:	af02      	add	r7, sp, #8
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008286:	4b1c      	ldr	r3, [pc, #112]	; (80082f8 <prvProcessExpiredTimer+0x7c>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	3304      	adds	r3, #4
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe f915 	bl	80064c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d122      	bne.n	80082e8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	699a      	ldr	r2, [r3, #24]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	18d1      	adds	r1, r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	6978      	ldr	r0, [r7, #20]
 80082b0:	f000 f8c8 	bl	8008444 <prvInsertTimerInActiveList>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d016      	beq.n	80082e8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082ba:	2300      	movs	r3, #0
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	2300      	movs	r3, #0
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	2100      	movs	r1, #0
 80082c4:	6978      	ldr	r0, [r7, #20]
 80082c6:	f7ff ff8b 	bl	80081e0 <xTimerGenericCommand>
 80082ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10a      	bne.n	80082e8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	60fb      	str	r3, [r7, #12]
}
 80082e4:	bf00      	nop
 80082e6:	e7fe      	b.n	80082e6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	6978      	ldr	r0, [r7, #20]
 80082ee:	4798      	blx	r3
}
 80082f0:	bf00      	nop
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	2000110c 	.word	0x2000110c

080082fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008304:	f107 0308 	add.w	r3, r7, #8
 8008308:	4618      	mov	r0, r3
 800830a:	f000 f857 	bl	80083bc <prvGetNextExpireTime>
 800830e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	4619      	mov	r1, r3
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f000 f803 	bl	8008320 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800831a:	f000 f8d5 	bl	80084c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800831e:	e7f1      	b.n	8008304 <prvTimerTask+0x8>

08008320 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800832a:	f7ff f9eb 	bl	8007704 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800832e:	f107 0308 	add.w	r3, r7, #8
 8008332:	4618      	mov	r0, r3
 8008334:	f000 f866 	bl	8008404 <prvSampleTimeNow>
 8008338:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d130      	bne.n	80083a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10a      	bne.n	800835c <prvProcessTimerOrBlockTask+0x3c>
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	429a      	cmp	r2, r3
 800834c:	d806      	bhi.n	800835c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800834e:	f7ff f9e7 	bl	8007720 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008352:	68f9      	ldr	r1, [r7, #12]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff ff91 	bl	800827c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800835a:	e024      	b.n	80083a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d008      	beq.n	8008374 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008362:	4b13      	ldr	r3, [pc, #76]	; (80083b0 <prvProcessTimerOrBlockTask+0x90>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	bf0c      	ite	eq
 800836c:	2301      	moveq	r3, #1
 800836e:	2300      	movne	r3, #0
 8008370:	b2db      	uxtb	r3, r3
 8008372:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008374:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <prvProcessTimerOrBlockTask+0x94>)
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	4619      	mov	r1, r3
 8008382:	f7fe fdb7 	bl	8006ef4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008386:	f7ff f9cb 	bl	8007720 <xTaskResumeAll>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10a      	bne.n	80083a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008390:	4b09      	ldr	r3, [pc, #36]	; (80083b8 <prvProcessTimerOrBlockTask+0x98>)
 8008392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	f3bf 8f6f 	isb	sy
}
 80083a0:	e001      	b.n	80083a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083a2:	f7ff f9bd 	bl	8007720 <xTaskResumeAll>
}
 80083a6:	bf00      	nop
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20001110 	.word	0x20001110
 80083b4:	20001114 	.word	0x20001114
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083c4:	4b0e      	ldr	r3, [pc, #56]	; (8008400 <prvGetNextExpireTime+0x44>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bf0c      	ite	eq
 80083ce:	2301      	moveq	r3, #1
 80083d0:	2300      	movne	r3, #0
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	461a      	mov	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d105      	bne.n	80083ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083e2:	4b07      	ldr	r3, [pc, #28]	; (8008400 <prvGetNextExpireTime+0x44>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	e001      	b.n	80083f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083f2:	68fb      	ldr	r3, [r7, #12]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bc80      	pop	{r7}
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	2000110c 	.word	0x2000110c

08008404 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800840c:	f7ff fa26 	bl	800785c <xTaskGetTickCount>
 8008410:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008412:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <prvSampleTimeNow+0x3c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	429a      	cmp	r2, r3
 800841a:	d205      	bcs.n	8008428 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800841c:	f000 f908 	bl	8008630 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	e002      	b.n	800842e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800842e:	4a04      	ldr	r2, [pc, #16]	; (8008440 <prvSampleTimeNow+0x3c>)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008434:	68fb      	ldr	r3, [r7, #12]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	2000111c 	.word	0x2000111c

08008444 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008452:	2300      	movs	r3, #0
 8008454:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	429a      	cmp	r2, r3
 8008468:	d812      	bhi.n	8008490 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	1ad2      	subs	r2, r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	429a      	cmp	r2, r3
 8008476:	d302      	bcc.n	800847e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008478:	2301      	movs	r3, #1
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	e01b      	b.n	80084b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800847e:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <prvInsertTimerInActiveList+0x7c>)
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	3304      	adds	r3, #4
 8008486:	4619      	mov	r1, r3
 8008488:	4610      	mov	r0, r2
 800848a:	f7fd ffe3 	bl	8006454 <vListInsert>
 800848e:	e012      	b.n	80084b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	d206      	bcs.n	80084a6 <prvInsertTimerInActiveList+0x62>
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	429a      	cmp	r2, r3
 800849e:	d302      	bcc.n	80084a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084a0:	2301      	movs	r3, #1
 80084a2:	617b      	str	r3, [r7, #20]
 80084a4:	e007      	b.n	80084b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084a6:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <prvInsertTimerInActiveList+0x80>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3304      	adds	r3, #4
 80084ae:	4619      	mov	r1, r3
 80084b0:	4610      	mov	r0, r2
 80084b2:	f7fd ffcf 	bl	8006454 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084b6:	697b      	ldr	r3, [r7, #20]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	20001110 	.word	0x20001110
 80084c4:	2000110c 	.word	0x2000110c

080084c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08e      	sub	sp, #56	; 0x38
 80084cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084ce:	e09d      	b.n	800860c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	da18      	bge.n	8008508 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084d6:	1d3b      	adds	r3, r7, #4
 80084d8:	3304      	adds	r3, #4
 80084da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80084dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10a      	bne.n	80084f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	61fb      	str	r3, [r7, #28]
}
 80084f4:	bf00      	nop
 80084f6:	e7fe      	b.n	80084f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084fe:	6850      	ldr	r0, [r2, #4]
 8008500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008502:	6892      	ldr	r2, [r2, #8]
 8008504:	4611      	mov	r1, r2
 8008506:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	db7e      	blt.n	800860c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d004      	beq.n	8008524 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800851a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851c:	3304      	adds	r3, #4
 800851e:	4618      	mov	r0, r3
 8008520:	f7fd ffd0 	bl	80064c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008524:	463b      	mov	r3, r7
 8008526:	4618      	mov	r0, r3
 8008528:	f7ff ff6c 	bl	8008404 <prvSampleTimeNow>
 800852c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b09      	cmp	r3, #9
 8008532:	d86a      	bhi.n	800860a <prvProcessReceivedCommands+0x142>
 8008534:	a201      	add	r2, pc, #4	; (adr r2, 800853c <prvProcessReceivedCommands+0x74>)
 8008536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853a:	bf00      	nop
 800853c:	08008565 	.word	0x08008565
 8008540:	08008565 	.word	0x08008565
 8008544:	08008565 	.word	0x08008565
 8008548:	0800860d 	.word	0x0800860d
 800854c:	080085c1 	.word	0x080085c1
 8008550:	080085f9 	.word	0x080085f9
 8008554:	08008565 	.word	0x08008565
 8008558:	08008565 	.word	0x08008565
 800855c:	0800860d 	.word	0x0800860d
 8008560:	080085c1 	.word	0x080085c1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	18d1      	adds	r1, r2, r3
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008572:	f7ff ff67 	bl	8008444 <prvInsertTimerInActiveList>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d047      	beq.n	800860c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008582:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d13f      	bne.n	800860c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	441a      	add	r2, r3
 8008594:	2300      	movs	r3, #0
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	2300      	movs	r3, #0
 800859a:	2100      	movs	r1, #0
 800859c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800859e:	f7ff fe1f 	bl	80081e0 <xTimerGenericCommand>
 80085a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d130      	bne.n	800860c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	61bb      	str	r3, [r7, #24]
}
 80085bc:	bf00      	nop
 80085be:	e7fe      	b.n	80085be <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10a      	bne.n	80085e4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	617b      	str	r3, [r7, #20]
}
 80085e0:	bf00      	nop
 80085e2:	e7fe      	b.n	80085e2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	699a      	ldr	r2, [r3, #24]
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	18d1      	adds	r1, r2, r3
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085f2:	f7ff ff27 	bl	8008444 <prvInsertTimerInActiveList>
					break;
 80085f6:	e009      	b.n	800860c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d104      	bne.n	800860c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008604:	f000 fb6e 	bl	8008ce4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008608:	e000      	b.n	800860c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800860a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800860c:	4b07      	ldr	r3, [pc, #28]	; (800862c <prvProcessReceivedCommands+0x164>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	1d39      	adds	r1, r7, #4
 8008612:	2200      	movs	r2, #0
 8008614:	4618      	mov	r0, r3
 8008616:	f7fe fa55 	bl	8006ac4 <xQueueReceive>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	f47f af57 	bne.w	80084d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008622:	bf00      	nop
 8008624:	bf00      	nop
 8008626:	3730      	adds	r7, #48	; 0x30
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	20001114 	.word	0x20001114

08008630 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b088      	sub	sp, #32
 8008634:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008636:	e045      	b.n	80086c4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008638:	4b2c      	ldr	r3, [pc, #176]	; (80086ec <prvSwitchTimerLists+0xbc>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008642:	4b2a      	ldr	r3, [pc, #168]	; (80086ec <prvSwitchTimerLists+0xbc>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3304      	adds	r3, #4
 8008650:	4618      	mov	r0, r3
 8008652:	f7fd ff37 	bl	80064c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d12e      	bne.n	80086c4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	4413      	add	r3, r2
 800866e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	429a      	cmp	r2, r3
 8008676:	d90e      	bls.n	8008696 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008684:	4b19      	ldr	r3, [pc, #100]	; (80086ec <prvSwitchTimerLists+0xbc>)
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3304      	adds	r3, #4
 800868c:	4619      	mov	r1, r3
 800868e:	4610      	mov	r0, r2
 8008690:	f7fd fee0 	bl	8006454 <vListInsert>
 8008694:	e016      	b.n	80086c4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008696:	2300      	movs	r3, #0
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	2300      	movs	r3, #0
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	2100      	movs	r1, #0
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f7ff fd9d 	bl	80081e0 <xTimerGenericCommand>
 80086a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10a      	bne.n	80086c4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	603b      	str	r3, [r7, #0]
}
 80086c0:	bf00      	nop
 80086c2:	e7fe      	b.n	80086c2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086c4:	4b09      	ldr	r3, [pc, #36]	; (80086ec <prvSwitchTimerLists+0xbc>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1b4      	bne.n	8008638 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80086ce:	4b07      	ldr	r3, [pc, #28]	; (80086ec <prvSwitchTimerLists+0xbc>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80086d4:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <prvSwitchTimerLists+0xc0>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a04      	ldr	r2, [pc, #16]	; (80086ec <prvSwitchTimerLists+0xbc>)
 80086da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80086dc:	4a04      	ldr	r2, [pc, #16]	; (80086f0 <prvSwitchTimerLists+0xc0>)
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	6013      	str	r3, [r2, #0]
}
 80086e2:	bf00      	nop
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	2000110c 	.word	0x2000110c
 80086f0:	20001110 	.word	0x20001110

080086f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80086fa:	f000 f92f 	bl	800895c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80086fe:	4b15      	ldr	r3, [pc, #84]	; (8008754 <prvCheckForValidListAndQueue+0x60>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d120      	bne.n	8008748 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008706:	4814      	ldr	r0, [pc, #80]	; (8008758 <prvCheckForValidListAndQueue+0x64>)
 8008708:	f7fd fe56 	bl	80063b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800870c:	4813      	ldr	r0, [pc, #76]	; (800875c <prvCheckForValidListAndQueue+0x68>)
 800870e:	f7fd fe53 	bl	80063b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008712:	4b13      	ldr	r3, [pc, #76]	; (8008760 <prvCheckForValidListAndQueue+0x6c>)
 8008714:	4a10      	ldr	r2, [pc, #64]	; (8008758 <prvCheckForValidListAndQueue+0x64>)
 8008716:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008718:	4b12      	ldr	r3, [pc, #72]	; (8008764 <prvCheckForValidListAndQueue+0x70>)
 800871a:	4a10      	ldr	r2, [pc, #64]	; (800875c <prvCheckForValidListAndQueue+0x68>)
 800871c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800871e:	2300      	movs	r3, #0
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	4b11      	ldr	r3, [pc, #68]	; (8008768 <prvCheckForValidListAndQueue+0x74>)
 8008724:	4a11      	ldr	r2, [pc, #68]	; (800876c <prvCheckForValidListAndQueue+0x78>)
 8008726:	2110      	movs	r1, #16
 8008728:	200a      	movs	r0, #10
 800872a:	f7fd ff5d 	bl	80065e8 <xQueueGenericCreateStatic>
 800872e:	4603      	mov	r3, r0
 8008730:	4a08      	ldr	r2, [pc, #32]	; (8008754 <prvCheckForValidListAndQueue+0x60>)
 8008732:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008734:	4b07      	ldr	r3, [pc, #28]	; (8008754 <prvCheckForValidListAndQueue+0x60>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d005      	beq.n	8008748 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800873c:	4b05      	ldr	r3, [pc, #20]	; (8008754 <prvCheckForValidListAndQueue+0x60>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	490b      	ldr	r1, [pc, #44]	; (8008770 <prvCheckForValidListAndQueue+0x7c>)
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe fbae 	bl	8006ea4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008748:	f000 f938 	bl	80089bc <vPortExitCritical>
}
 800874c:	bf00      	nop
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20001114 	.word	0x20001114
 8008758:	200010e4 	.word	0x200010e4
 800875c:	200010f8 	.word	0x200010f8
 8008760:	2000110c 	.word	0x2000110c
 8008764:	20001110 	.word	0x20001110
 8008768:	200011c0 	.word	0x200011c0
 800876c:	20001120 	.word	0x20001120
 8008770:	08009c98 	.word	0x08009c98

08008774 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3b04      	subs	r3, #4
 8008784:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800878c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	3b04      	subs	r3, #4
 8008792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f023 0201 	bic.w	r2, r3, #1
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3b04      	subs	r3, #4
 80087a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087a4:	4a08      	ldr	r2, [pc, #32]	; (80087c8 <pxPortInitialiseStack+0x54>)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3b14      	subs	r3, #20
 80087ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3b20      	subs	r3, #32
 80087ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087bc:	68fb      	ldr	r3, [r7, #12]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bc80      	pop	{r7}
 80087c6:	4770      	bx	lr
 80087c8:	080087cd 	.word	0x080087cd

080087cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80087d6:	4b12      	ldr	r3, [pc, #72]	; (8008820 <prvTaskExitError+0x54>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087de:	d00a      	beq.n	80087f6 <prvTaskExitError+0x2a>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	60fb      	str	r3, [r7, #12]
}
 80087f2:	bf00      	nop
 80087f4:	e7fe      	b.n	80087f4 <prvTaskExitError+0x28>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	60bb      	str	r3, [r7, #8]
}
 8008808:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800880a:	bf00      	nop
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0fc      	beq.n	800880c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008812:	bf00      	nop
 8008814:	bf00      	nop
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	bc80      	pop	{r7}
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	2000002c 	.word	0x2000002c
	...

08008830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008830:	4b07      	ldr	r3, [pc, #28]	; (8008850 <pxCurrentTCBConst2>)
 8008832:	6819      	ldr	r1, [r3, #0]
 8008834:	6808      	ldr	r0, [r1, #0]
 8008836:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800883a:	f380 8809 	msr	PSP, r0
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f04f 0000 	mov.w	r0, #0
 8008846:	f380 8811 	msr	BASEPRI, r0
 800884a:	f04e 0e0d 	orr.w	lr, lr, #13
 800884e:	4770      	bx	lr

08008850 <pxCurrentTCBConst2>:
 8008850:	20000be4 	.word	0x20000be4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop

08008858 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008858:	4806      	ldr	r0, [pc, #24]	; (8008874 <prvPortStartFirstTask+0x1c>)
 800885a:	6800      	ldr	r0, [r0, #0]
 800885c:	6800      	ldr	r0, [r0, #0]
 800885e:	f380 8808 	msr	MSP, r0
 8008862:	b662      	cpsie	i
 8008864:	b661      	cpsie	f
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	df00      	svc	0
 8008870:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008872:	bf00      	nop
 8008874:	e000ed08 	.word	0xe000ed08

08008878 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800887e:	4b32      	ldr	r3, [pc, #200]	; (8008948 <xPortStartScheduler+0xd0>)
 8008880:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	22ff      	movs	r2, #255	; 0xff
 800888e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	b2db      	uxtb	r3, r3
 8008896:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008898:	78fb      	ldrb	r3, [r7, #3]
 800889a:	b2db      	uxtb	r3, r3
 800889c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80088a0:	b2da      	uxtb	r2, r3
 80088a2:	4b2a      	ldr	r3, [pc, #168]	; (800894c <xPortStartScheduler+0xd4>)
 80088a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80088a6:	4b2a      	ldr	r3, [pc, #168]	; (8008950 <xPortStartScheduler+0xd8>)
 80088a8:	2207      	movs	r2, #7
 80088aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088ac:	e009      	b.n	80088c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80088ae:	4b28      	ldr	r3, [pc, #160]	; (8008950 <xPortStartScheduler+0xd8>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	4a26      	ldr	r2, [pc, #152]	; (8008950 <xPortStartScheduler+0xd8>)
 80088b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	005b      	lsls	r3, r3, #1
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088c2:	78fb      	ldrb	r3, [r7, #3]
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ca:	2b80      	cmp	r3, #128	; 0x80
 80088cc:	d0ef      	beq.n	80088ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088ce:	4b20      	ldr	r3, [pc, #128]	; (8008950 <xPortStartScheduler+0xd8>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f1c3 0307 	rsb	r3, r3, #7
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	d00a      	beq.n	80088f0 <xPortStartScheduler+0x78>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	60bb      	str	r3, [r7, #8]
}
 80088ec:	bf00      	nop
 80088ee:	e7fe      	b.n	80088ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088f0:	4b17      	ldr	r3, [pc, #92]	; (8008950 <xPortStartScheduler+0xd8>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	021b      	lsls	r3, r3, #8
 80088f6:	4a16      	ldr	r2, [pc, #88]	; (8008950 <xPortStartScheduler+0xd8>)
 80088f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088fa:	4b15      	ldr	r3, [pc, #84]	; (8008950 <xPortStartScheduler+0xd8>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008902:	4a13      	ldr	r2, [pc, #76]	; (8008950 <xPortStartScheduler+0xd8>)
 8008904:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	b2da      	uxtb	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800890e:	4b11      	ldr	r3, [pc, #68]	; (8008954 <xPortStartScheduler+0xdc>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a10      	ldr	r2, [pc, #64]	; (8008954 <xPortStartScheduler+0xdc>)
 8008914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008918:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800891a:	4b0e      	ldr	r3, [pc, #56]	; (8008954 <xPortStartScheduler+0xdc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a0d      	ldr	r2, [pc, #52]	; (8008954 <xPortStartScheduler+0xdc>)
 8008920:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008924:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008926:	f000 f8b9 	bl	8008a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800892a:	4b0b      	ldr	r3, [pc, #44]	; (8008958 <xPortStartScheduler+0xe0>)
 800892c:	2200      	movs	r2, #0
 800892e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008930:	f7ff ff92 	bl	8008858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008934:	f7ff f85e 	bl	80079f4 <vTaskSwitchContext>
	prvTaskExitError();
 8008938:	f7ff ff48 	bl	80087cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	e000e400 	.word	0xe000e400
 800894c:	20001210 	.word	0x20001210
 8008950:	20001214 	.word	0x20001214
 8008954:	e000ed20 	.word	0xe000ed20
 8008958:	2000002c 	.word	0x2000002c

0800895c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	607b      	str	r3, [r7, #4]
}
 8008974:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008976:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <vPortEnterCritical+0x58>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3301      	adds	r3, #1
 800897c:	4a0d      	ldr	r2, [pc, #52]	; (80089b4 <vPortEnterCritical+0x58>)
 800897e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008980:	4b0c      	ldr	r3, [pc, #48]	; (80089b4 <vPortEnterCritical+0x58>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d10f      	bne.n	80089a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008988:	4b0b      	ldr	r3, [pc, #44]	; (80089b8 <vPortEnterCritical+0x5c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00a      	beq.n	80089a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	603b      	str	r3, [r7, #0]
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <vPortEnterCritical+0x4a>
	}
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bc80      	pop	{r7}
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	2000002c 	.word	0x2000002c
 80089b8:	e000ed04 	.word	0xe000ed04

080089bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089c2:	4b11      	ldr	r3, [pc, #68]	; (8008a08 <vPortExitCritical+0x4c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10a      	bne.n	80089e0 <vPortExitCritical+0x24>
	__asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	607b      	str	r3, [r7, #4]
}
 80089dc:	bf00      	nop
 80089de:	e7fe      	b.n	80089de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80089e0:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <vPortExitCritical+0x4c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3b01      	subs	r3, #1
 80089e6:	4a08      	ldr	r2, [pc, #32]	; (8008a08 <vPortExitCritical+0x4c>)
 80089e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089ea:	4b07      	ldr	r3, [pc, #28]	; (8008a08 <vPortExitCritical+0x4c>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d105      	bne.n	80089fe <vPortExitCritical+0x42>
 80089f2:	2300      	movs	r3, #0
 80089f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	f383 8811 	msr	BASEPRI, r3
}
 80089fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80089fe:	bf00      	nop
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bc80      	pop	{r7}
 8008a06:	4770      	bx	lr
 8008a08:	2000002c 	.word	0x2000002c
 8008a0c:	00000000 	.word	0x00000000

08008a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a10:	f3ef 8009 	mrs	r0, PSP
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	4b0d      	ldr	r3, [pc, #52]	; (8008a50 <pxCurrentTCBConst>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a20:	6010      	str	r0, [r2, #0]
 8008a22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008a26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008a2a:	f380 8811 	msr	BASEPRI, r0
 8008a2e:	f7fe ffe1 	bl	80079f4 <vTaskSwitchContext>
 8008a32:	f04f 0000 	mov.w	r0, #0
 8008a36:	f380 8811 	msr	BASEPRI, r0
 8008a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a3e:	6819      	ldr	r1, [r3, #0]
 8008a40:	6808      	ldr	r0, [r1, #0]
 8008a42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a46:	f380 8809 	msr	PSP, r0
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	4770      	bx	lr

08008a50 <pxCurrentTCBConst>:
 8008a50:	20000be4 	.word	0x20000be4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop

08008a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	607b      	str	r3, [r7, #4]
}
 8008a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a72:	f7fe ff01 	bl	8007878 <xTaskIncrementTick>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a7c:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <SysTick_Handler+0x40>)
 8008a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	2300      	movs	r3, #0
 8008a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	f383 8811 	msr	BASEPRI, r3
}
 8008a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	e000ed04 	.word	0xe000ed04

08008a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	; (8008acc <vPortSetupTimerInterrupt+0x30>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008aa6:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <vPortSetupTimerInterrupt+0x34>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008aac:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <vPortSetupTimerInterrupt+0x38>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a09      	ldr	r2, [pc, #36]	; (8008ad8 <vPortSetupTimerInterrupt+0x3c>)
 8008ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab6:	099b      	lsrs	r3, r3, #6
 8008ab8:	4a08      	ldr	r2, [pc, #32]	; (8008adc <vPortSetupTimerInterrupt+0x40>)
 8008aba:	3b01      	subs	r3, #1
 8008abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008abe:	4b03      	ldr	r3, [pc, #12]	; (8008acc <vPortSetupTimerInterrupt+0x30>)
 8008ac0:	2207      	movs	r2, #7
 8008ac2:	601a      	str	r2, [r3, #0]
}
 8008ac4:	bf00      	nop
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bc80      	pop	{r7}
 8008aca:	4770      	bx	lr
 8008acc:	e000e010 	.word	0xe000e010
 8008ad0:	e000e018 	.word	0xe000e018
 8008ad4:	20000020 	.word	0x20000020
 8008ad8:	10624dd3 	.word	0x10624dd3
 8008adc:	e000e014 	.word	0xe000e014

08008ae0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ae6:	f3ef 8305 	mrs	r3, IPSR
 8008aea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2b0f      	cmp	r3, #15
 8008af0:	d914      	bls.n	8008b1c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008af2:	4a16      	ldr	r2, [pc, #88]	; (8008b4c <vPortValidateInterruptPriority+0x6c>)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4413      	add	r3, r2
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008afc:	4b14      	ldr	r3, [pc, #80]	; (8008b50 <vPortValidateInterruptPriority+0x70>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	7afa      	ldrb	r2, [r7, #11]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d20a      	bcs.n	8008b1c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	607b      	str	r3, [r7, #4]
}
 8008b18:	bf00      	nop
 8008b1a:	e7fe      	b.n	8008b1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b1c:	4b0d      	ldr	r3, [pc, #52]	; (8008b54 <vPortValidateInterruptPriority+0x74>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008b24:	4b0c      	ldr	r3, [pc, #48]	; (8008b58 <vPortValidateInterruptPriority+0x78>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d90a      	bls.n	8008b42 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	603b      	str	r3, [r7, #0]
}
 8008b3e:	bf00      	nop
 8008b40:	e7fe      	b.n	8008b40 <vPortValidateInterruptPriority+0x60>
	}
 8008b42:	bf00      	nop
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bc80      	pop	{r7}
 8008b4a:	4770      	bx	lr
 8008b4c:	e000e3f0 	.word	0xe000e3f0
 8008b50:	20001210 	.word	0x20001210
 8008b54:	e000ed0c 	.word	0xe000ed0c
 8008b58:	20001214 	.word	0x20001214

08008b5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08a      	sub	sp, #40	; 0x28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b64:	2300      	movs	r3, #0
 8008b66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b68:	f7fe fdcc 	bl	8007704 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b6c:	4b58      	ldr	r3, [pc, #352]	; (8008cd0 <pvPortMalloc+0x174>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b74:	f000 f910 	bl	8008d98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b78:	4b56      	ldr	r3, [pc, #344]	; (8008cd4 <pvPortMalloc+0x178>)
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4013      	ands	r3, r2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f040 808e 	bne.w	8008ca2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01d      	beq.n	8008bc8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008b8c:	2208      	movs	r2, #8
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4413      	add	r3, r2
 8008b92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f003 0307 	and.w	r3, r3, #7
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d014      	beq.n	8008bc8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f023 0307 	bic.w	r3, r3, #7
 8008ba4:	3308      	adds	r3, #8
 8008ba6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f003 0307 	and.w	r3, r3, #7
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <pvPortMalloc+0x6c>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	617b      	str	r3, [r7, #20]
}
 8008bc4:	bf00      	nop
 8008bc6:	e7fe      	b.n	8008bc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d069      	beq.n	8008ca2 <pvPortMalloc+0x146>
 8008bce:	4b42      	ldr	r3, [pc, #264]	; (8008cd8 <pvPortMalloc+0x17c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d864      	bhi.n	8008ca2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008bd8:	4b40      	ldr	r3, [pc, #256]	; (8008cdc <pvPortMalloc+0x180>)
 8008bda:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008bdc:	4b3f      	ldr	r3, [pc, #252]	; (8008cdc <pvPortMalloc+0x180>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008be2:	e004      	b.n	8008bee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d903      	bls.n	8008c00 <pvPortMalloc+0xa4>
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1f1      	bne.n	8008be4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c00:	4b33      	ldr	r3, [pc, #204]	; (8008cd0 <pvPortMalloc+0x174>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d04b      	beq.n	8008ca2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2208      	movs	r2, #8
 8008c10:	4413      	add	r3, r2
 8008c12:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	1ad2      	subs	r2, r2, r3
 8008c24:	2308      	movs	r3, #8
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d91f      	bls.n	8008c6c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4413      	add	r3, r2
 8008c32:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	f003 0307 	and.w	r3, r3, #7
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00a      	beq.n	8008c54 <pvPortMalloc+0xf8>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	613b      	str	r3, [r7, #16]
}
 8008c50:	bf00      	nop
 8008c52:	e7fe      	b.n	8008c52 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	1ad2      	subs	r2, r2, r3
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c66:	69b8      	ldr	r0, [r7, #24]
 8008c68:	f000 f8f8 	bl	8008e5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c6c:	4b1a      	ldr	r3, [pc, #104]	; (8008cd8 <pvPortMalloc+0x17c>)
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	4a18      	ldr	r2, [pc, #96]	; (8008cd8 <pvPortMalloc+0x17c>)
 8008c78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c7a:	4b17      	ldr	r3, [pc, #92]	; (8008cd8 <pvPortMalloc+0x17c>)
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	4b18      	ldr	r3, [pc, #96]	; (8008ce0 <pvPortMalloc+0x184>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d203      	bcs.n	8008c8e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c86:	4b14      	ldr	r3, [pc, #80]	; (8008cd8 <pvPortMalloc+0x17c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a15      	ldr	r2, [pc, #84]	; (8008ce0 <pvPortMalloc+0x184>)
 8008c8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	4b10      	ldr	r3, [pc, #64]	; (8008cd4 <pvPortMalloc+0x178>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	431a      	orrs	r2, r3
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ca2:	f7fe fd3d 	bl	8007720 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00a      	beq.n	8008cc6 <pvPortMalloc+0x16a>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	60fb      	str	r3, [r7, #12]
}
 8008cc2:	bf00      	nop
 8008cc4:	e7fe      	b.n	8008cc4 <pvPortMalloc+0x168>
	return pvReturn;
 8008cc6:	69fb      	ldr	r3, [r7, #28]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3728      	adds	r7, #40	; 0x28
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	20001e20 	.word	0x20001e20
 8008cd4:	20001e2c 	.word	0x20001e2c
 8008cd8:	20001e24 	.word	0x20001e24
 8008cdc:	20001e18 	.word	0x20001e18
 8008ce0:	20001e28 	.word	0x20001e28

08008ce4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d048      	beq.n	8008d88 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cf6:	2308      	movs	r3, #8
 8008cf8:	425b      	negs	r3, r3
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	4b21      	ldr	r3, [pc, #132]	; (8008d90 <vPortFree+0xac>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10a      	bne.n	8008d28 <vPortFree+0x44>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	60fb      	str	r3, [r7, #12]
}
 8008d24:	bf00      	nop
 8008d26:	e7fe      	b.n	8008d26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00a      	beq.n	8008d46 <vPortFree+0x62>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	60bb      	str	r3, [r7, #8]
}
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	4b11      	ldr	r3, [pc, #68]	; (8008d90 <vPortFree+0xac>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d019      	beq.n	8008d88 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d115      	bne.n	8008d88 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <vPortFree+0xac>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	43db      	mvns	r3, r3
 8008d66:	401a      	ands	r2, r3
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d6c:	f7fe fcca 	bl	8007704 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	4b07      	ldr	r3, [pc, #28]	; (8008d94 <vPortFree+0xb0>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4413      	add	r3, r2
 8008d7a:	4a06      	ldr	r2, [pc, #24]	; (8008d94 <vPortFree+0xb0>)
 8008d7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d7e:	6938      	ldr	r0, [r7, #16]
 8008d80:	f000 f86c 	bl	8008e5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008d84:	f7fe fccc 	bl	8007720 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d88:	bf00      	nop
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	20001e2c 	.word	0x20001e2c
 8008d94:	20001e24 	.word	0x20001e24

08008d98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008da2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008da4:	4b27      	ldr	r3, [pc, #156]	; (8008e44 <prvHeapInit+0xac>)
 8008da6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f003 0307 	and.w	r3, r3, #7
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00c      	beq.n	8008dcc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3307      	adds	r3, #7
 8008db6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0307 	bic.w	r3, r3, #7
 8008dbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	4a1f      	ldr	r2, [pc, #124]	; (8008e44 <prvHeapInit+0xac>)
 8008dc8:	4413      	add	r3, r2
 8008dca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008dd0:	4a1d      	ldr	r2, [pc, #116]	; (8008e48 <prvHeapInit+0xb0>)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008dd6:	4b1c      	ldr	r3, [pc, #112]	; (8008e48 <prvHeapInit+0xb0>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	4413      	add	r3, r2
 8008de2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008de4:	2208      	movs	r2, #8
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	1a9b      	subs	r3, r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0307 	bic.w	r3, r3, #7
 8008df2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4a15      	ldr	r2, [pc, #84]	; (8008e4c <prvHeapInit+0xb4>)
 8008df8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008dfa:	4b14      	ldr	r3, [pc, #80]	; (8008e4c <prvHeapInit+0xb4>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e02:	4b12      	ldr	r3, [pc, #72]	; (8008e4c <prvHeapInit+0xb4>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2200      	movs	r2, #0
 8008e08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	1ad2      	subs	r2, r2, r3
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e18:	4b0c      	ldr	r3, [pc, #48]	; (8008e4c <prvHeapInit+0xb4>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	4a0a      	ldr	r2, [pc, #40]	; (8008e50 <prvHeapInit+0xb8>)
 8008e26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	4a09      	ldr	r2, [pc, #36]	; (8008e54 <prvHeapInit+0xbc>)
 8008e2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e30:	4b09      	ldr	r3, [pc, #36]	; (8008e58 <prvHeapInit+0xc0>)
 8008e32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e36:	601a      	str	r2, [r3, #0]
}
 8008e38:	bf00      	nop
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bc80      	pop	{r7}
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	20001218 	.word	0x20001218
 8008e48:	20001e18 	.word	0x20001e18
 8008e4c:	20001e20 	.word	0x20001e20
 8008e50:	20001e28 	.word	0x20001e28
 8008e54:	20001e24 	.word	0x20001e24
 8008e58:	20001e2c 	.word	0x20001e2c

08008e5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e64:	4b27      	ldr	r3, [pc, #156]	; (8008f04 <prvInsertBlockIntoFreeList+0xa8>)
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	e002      	b.n	8008e70 <prvInsertBlockIntoFreeList+0x14>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d8f7      	bhi.n	8008e6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	4413      	add	r3, r2
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d108      	bne.n	8008e9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	441a      	add	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	441a      	add	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d118      	bne.n	8008ee4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	4b14      	ldr	r3, [pc, #80]	; (8008f08 <prvInsertBlockIntoFreeList+0xac>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d00d      	beq.n	8008eda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	441a      	add	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	e008      	b.n	8008eec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008eda:	4b0b      	ldr	r3, [pc, #44]	; (8008f08 <prvInsertBlockIntoFreeList+0xac>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	601a      	str	r2, [r3, #0]
 8008ee2:	e003      	b.n	8008eec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d002      	beq.n	8008efa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008efa:	bf00      	nop
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bc80      	pop	{r7}
 8008f02:	4770      	bx	lr
 8008f04:	20001e18 	.word	0x20001e18
 8008f08:	20001e20 	.word	0x20001e20

08008f0c <siprintf>:
 8008f0c:	b40e      	push	{r1, r2, r3}
 8008f0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f12:	b500      	push	{lr}
 8008f14:	b09c      	sub	sp, #112	; 0x70
 8008f16:	ab1d      	add	r3, sp, #116	; 0x74
 8008f18:	9002      	str	r0, [sp, #8]
 8008f1a:	9006      	str	r0, [sp, #24]
 8008f1c:	9107      	str	r1, [sp, #28]
 8008f1e:	9104      	str	r1, [sp, #16]
 8008f20:	4808      	ldr	r0, [pc, #32]	; (8008f44 <siprintf+0x38>)
 8008f22:	4909      	ldr	r1, [pc, #36]	; (8008f48 <siprintf+0x3c>)
 8008f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f28:	9105      	str	r1, [sp, #20]
 8008f2a:	6800      	ldr	r0, [r0, #0]
 8008f2c:	a902      	add	r1, sp, #8
 8008f2e:	9301      	str	r3, [sp, #4]
 8008f30:	f000 fa02 	bl	8009338 <_svfiprintf_r>
 8008f34:	2200      	movs	r2, #0
 8008f36:	9b02      	ldr	r3, [sp, #8]
 8008f38:	701a      	strb	r2, [r3, #0]
 8008f3a:	b01c      	add	sp, #112	; 0x70
 8008f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f40:	b003      	add	sp, #12
 8008f42:	4770      	bx	lr
 8008f44:	2000007c 	.word	0x2000007c
 8008f48:	ffff0208 	.word	0xffff0208

08008f4c <memset>:
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	4402      	add	r2, r0
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d100      	bne.n	8008f56 <memset+0xa>
 8008f54:	4770      	bx	lr
 8008f56:	f803 1b01 	strb.w	r1, [r3], #1
 8008f5a:	e7f9      	b.n	8008f50 <memset+0x4>

08008f5c <strcat>:
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	b510      	push	{r4, lr}
 8008f60:	7814      	ldrb	r4, [r2, #0]
 8008f62:	4613      	mov	r3, r2
 8008f64:	3201      	adds	r2, #1
 8008f66:	2c00      	cmp	r4, #0
 8008f68:	d1fa      	bne.n	8008f60 <strcat+0x4>
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f70:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f74:	2a00      	cmp	r2, #0
 8008f76:	d1f9      	bne.n	8008f6c <strcat+0x10>
 8008f78:	bd10      	pop	{r4, pc}
	...

08008f7c <_reclaim_reent>:
 8008f7c:	4b29      	ldr	r3, [pc, #164]	; (8009024 <_reclaim_reent+0xa8>)
 8008f7e:	b570      	push	{r4, r5, r6, lr}
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4604      	mov	r4, r0
 8008f84:	4283      	cmp	r3, r0
 8008f86:	d04b      	beq.n	8009020 <_reclaim_reent+0xa4>
 8008f88:	69c3      	ldr	r3, [r0, #28]
 8008f8a:	b143      	cbz	r3, 8008f9e <_reclaim_reent+0x22>
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d144      	bne.n	800901c <_reclaim_reent+0xa0>
 8008f92:	69e3      	ldr	r3, [r4, #28]
 8008f94:	6819      	ldr	r1, [r3, #0]
 8008f96:	b111      	cbz	r1, 8008f9e <_reclaim_reent+0x22>
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f000 f87f 	bl	800909c <_free_r>
 8008f9e:	6961      	ldr	r1, [r4, #20]
 8008fa0:	b111      	cbz	r1, 8008fa8 <_reclaim_reent+0x2c>
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 f87a 	bl	800909c <_free_r>
 8008fa8:	69e1      	ldr	r1, [r4, #28]
 8008faa:	b111      	cbz	r1, 8008fb2 <_reclaim_reent+0x36>
 8008fac:	4620      	mov	r0, r4
 8008fae:	f000 f875 	bl	800909c <_free_r>
 8008fb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008fb4:	b111      	cbz	r1, 8008fbc <_reclaim_reent+0x40>
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 f870 	bl	800909c <_free_r>
 8008fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fbe:	b111      	cbz	r1, 8008fc6 <_reclaim_reent+0x4a>
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f000 f86b 	bl	800909c <_free_r>
 8008fc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008fc8:	b111      	cbz	r1, 8008fd0 <_reclaim_reent+0x54>
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f000 f866 	bl	800909c <_free_r>
 8008fd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008fd2:	b111      	cbz	r1, 8008fda <_reclaim_reent+0x5e>
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f000 f861 	bl	800909c <_free_r>
 8008fda:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008fdc:	b111      	cbz	r1, 8008fe4 <_reclaim_reent+0x68>
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f000 f85c 	bl	800909c <_free_r>
 8008fe4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008fe6:	b111      	cbz	r1, 8008fee <_reclaim_reent+0x72>
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f000 f857 	bl	800909c <_free_r>
 8008fee:	6a23      	ldr	r3, [r4, #32]
 8008ff0:	b1b3      	cbz	r3, 8009020 <_reclaim_reent+0xa4>
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ff8:	4718      	bx	r3
 8008ffa:	5949      	ldr	r1, [r1, r5]
 8008ffc:	b941      	cbnz	r1, 8009010 <_reclaim_reent+0x94>
 8008ffe:	3504      	adds	r5, #4
 8009000:	69e3      	ldr	r3, [r4, #28]
 8009002:	2d80      	cmp	r5, #128	; 0x80
 8009004:	68d9      	ldr	r1, [r3, #12]
 8009006:	d1f8      	bne.n	8008ffa <_reclaim_reent+0x7e>
 8009008:	4620      	mov	r0, r4
 800900a:	f000 f847 	bl	800909c <_free_r>
 800900e:	e7c0      	b.n	8008f92 <_reclaim_reent+0x16>
 8009010:	680e      	ldr	r6, [r1, #0]
 8009012:	4620      	mov	r0, r4
 8009014:	f000 f842 	bl	800909c <_free_r>
 8009018:	4631      	mov	r1, r6
 800901a:	e7ef      	b.n	8008ffc <_reclaim_reent+0x80>
 800901c:	2500      	movs	r5, #0
 800901e:	e7ef      	b.n	8009000 <_reclaim_reent+0x84>
 8009020:	bd70      	pop	{r4, r5, r6, pc}
 8009022:	bf00      	nop
 8009024:	2000007c 	.word	0x2000007c

08009028 <__errno>:
 8009028:	4b01      	ldr	r3, [pc, #4]	; (8009030 <__errno+0x8>)
 800902a:	6818      	ldr	r0, [r3, #0]
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	2000007c 	.word	0x2000007c

08009034 <__libc_init_array>:
 8009034:	b570      	push	{r4, r5, r6, lr}
 8009036:	2600      	movs	r6, #0
 8009038:	4d0c      	ldr	r5, [pc, #48]	; (800906c <__libc_init_array+0x38>)
 800903a:	4c0d      	ldr	r4, [pc, #52]	; (8009070 <__libc_init_array+0x3c>)
 800903c:	1b64      	subs	r4, r4, r5
 800903e:	10a4      	asrs	r4, r4, #2
 8009040:	42a6      	cmp	r6, r4
 8009042:	d109      	bne.n	8009058 <__libc_init_array+0x24>
 8009044:	f000 fc7a 	bl	800993c <_init>
 8009048:	2600      	movs	r6, #0
 800904a:	4d0a      	ldr	r5, [pc, #40]	; (8009074 <__libc_init_array+0x40>)
 800904c:	4c0a      	ldr	r4, [pc, #40]	; (8009078 <__libc_init_array+0x44>)
 800904e:	1b64      	subs	r4, r4, r5
 8009050:	10a4      	asrs	r4, r4, #2
 8009052:	42a6      	cmp	r6, r4
 8009054:	d105      	bne.n	8009062 <__libc_init_array+0x2e>
 8009056:	bd70      	pop	{r4, r5, r6, pc}
 8009058:	f855 3b04 	ldr.w	r3, [r5], #4
 800905c:	4798      	blx	r3
 800905e:	3601      	adds	r6, #1
 8009060:	e7ee      	b.n	8009040 <__libc_init_array+0xc>
 8009062:	f855 3b04 	ldr.w	r3, [r5], #4
 8009066:	4798      	blx	r3
 8009068:	3601      	adds	r6, #1
 800906a:	e7f2      	b.n	8009052 <__libc_init_array+0x1e>
 800906c:	0800ae94 	.word	0x0800ae94
 8009070:	0800ae94 	.word	0x0800ae94
 8009074:	0800ae94 	.word	0x0800ae94
 8009078:	0800ae98 	.word	0x0800ae98

0800907c <__retarget_lock_acquire_recursive>:
 800907c:	4770      	bx	lr

0800907e <__retarget_lock_release_recursive>:
 800907e:	4770      	bx	lr

08009080 <memcpy>:
 8009080:	440a      	add	r2, r1
 8009082:	4291      	cmp	r1, r2
 8009084:	f100 33ff 	add.w	r3, r0, #4294967295
 8009088:	d100      	bne.n	800908c <memcpy+0xc>
 800908a:	4770      	bx	lr
 800908c:	b510      	push	{r4, lr}
 800908e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009092:	4291      	cmp	r1, r2
 8009094:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009098:	d1f9      	bne.n	800908e <memcpy+0xe>
 800909a:	bd10      	pop	{r4, pc}

0800909c <_free_r>:
 800909c:	b538      	push	{r3, r4, r5, lr}
 800909e:	4605      	mov	r5, r0
 80090a0:	2900      	cmp	r1, #0
 80090a2:	d040      	beq.n	8009126 <_free_r+0x8a>
 80090a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090a8:	1f0c      	subs	r4, r1, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	bfb8      	it	lt
 80090ae:	18e4      	addlt	r4, r4, r3
 80090b0:	f000 f8dc 	bl	800926c <__malloc_lock>
 80090b4:	4a1c      	ldr	r2, [pc, #112]	; (8009128 <_free_r+0x8c>)
 80090b6:	6813      	ldr	r3, [r2, #0]
 80090b8:	b933      	cbnz	r3, 80090c8 <_free_r+0x2c>
 80090ba:	6063      	str	r3, [r4, #4]
 80090bc:	6014      	str	r4, [r2, #0]
 80090be:	4628      	mov	r0, r5
 80090c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090c4:	f000 b8d8 	b.w	8009278 <__malloc_unlock>
 80090c8:	42a3      	cmp	r3, r4
 80090ca:	d908      	bls.n	80090de <_free_r+0x42>
 80090cc:	6820      	ldr	r0, [r4, #0]
 80090ce:	1821      	adds	r1, r4, r0
 80090d0:	428b      	cmp	r3, r1
 80090d2:	bf01      	itttt	eq
 80090d4:	6819      	ldreq	r1, [r3, #0]
 80090d6:	685b      	ldreq	r3, [r3, #4]
 80090d8:	1809      	addeq	r1, r1, r0
 80090da:	6021      	streq	r1, [r4, #0]
 80090dc:	e7ed      	b.n	80090ba <_free_r+0x1e>
 80090de:	461a      	mov	r2, r3
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	b10b      	cbz	r3, 80090e8 <_free_r+0x4c>
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	d9fa      	bls.n	80090de <_free_r+0x42>
 80090e8:	6811      	ldr	r1, [r2, #0]
 80090ea:	1850      	adds	r0, r2, r1
 80090ec:	42a0      	cmp	r0, r4
 80090ee:	d10b      	bne.n	8009108 <_free_r+0x6c>
 80090f0:	6820      	ldr	r0, [r4, #0]
 80090f2:	4401      	add	r1, r0
 80090f4:	1850      	adds	r0, r2, r1
 80090f6:	4283      	cmp	r3, r0
 80090f8:	6011      	str	r1, [r2, #0]
 80090fa:	d1e0      	bne.n	80090be <_free_r+0x22>
 80090fc:	6818      	ldr	r0, [r3, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	4408      	add	r0, r1
 8009102:	6010      	str	r0, [r2, #0]
 8009104:	6053      	str	r3, [r2, #4]
 8009106:	e7da      	b.n	80090be <_free_r+0x22>
 8009108:	d902      	bls.n	8009110 <_free_r+0x74>
 800910a:	230c      	movs	r3, #12
 800910c:	602b      	str	r3, [r5, #0]
 800910e:	e7d6      	b.n	80090be <_free_r+0x22>
 8009110:	6820      	ldr	r0, [r4, #0]
 8009112:	1821      	adds	r1, r4, r0
 8009114:	428b      	cmp	r3, r1
 8009116:	bf01      	itttt	eq
 8009118:	6819      	ldreq	r1, [r3, #0]
 800911a:	685b      	ldreq	r3, [r3, #4]
 800911c:	1809      	addeq	r1, r1, r0
 800911e:	6021      	streq	r1, [r4, #0]
 8009120:	6063      	str	r3, [r4, #4]
 8009122:	6054      	str	r4, [r2, #4]
 8009124:	e7cb      	b.n	80090be <_free_r+0x22>
 8009126:	bd38      	pop	{r3, r4, r5, pc}
 8009128:	20001f70 	.word	0x20001f70

0800912c <sbrk_aligned>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	4e0e      	ldr	r6, [pc, #56]	; (8009168 <sbrk_aligned+0x3c>)
 8009130:	460c      	mov	r4, r1
 8009132:	6831      	ldr	r1, [r6, #0]
 8009134:	4605      	mov	r5, r0
 8009136:	b911      	cbnz	r1, 800913e <sbrk_aligned+0x12>
 8009138:	f000 fbaa 	bl	8009890 <_sbrk_r>
 800913c:	6030      	str	r0, [r6, #0]
 800913e:	4621      	mov	r1, r4
 8009140:	4628      	mov	r0, r5
 8009142:	f000 fba5 	bl	8009890 <_sbrk_r>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	d00a      	beq.n	8009160 <sbrk_aligned+0x34>
 800914a:	1cc4      	adds	r4, r0, #3
 800914c:	f024 0403 	bic.w	r4, r4, #3
 8009150:	42a0      	cmp	r0, r4
 8009152:	d007      	beq.n	8009164 <sbrk_aligned+0x38>
 8009154:	1a21      	subs	r1, r4, r0
 8009156:	4628      	mov	r0, r5
 8009158:	f000 fb9a 	bl	8009890 <_sbrk_r>
 800915c:	3001      	adds	r0, #1
 800915e:	d101      	bne.n	8009164 <sbrk_aligned+0x38>
 8009160:	f04f 34ff 	mov.w	r4, #4294967295
 8009164:	4620      	mov	r0, r4
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	20001f74 	.word	0x20001f74

0800916c <_malloc_r>:
 800916c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009170:	1ccd      	adds	r5, r1, #3
 8009172:	f025 0503 	bic.w	r5, r5, #3
 8009176:	3508      	adds	r5, #8
 8009178:	2d0c      	cmp	r5, #12
 800917a:	bf38      	it	cc
 800917c:	250c      	movcc	r5, #12
 800917e:	2d00      	cmp	r5, #0
 8009180:	4607      	mov	r7, r0
 8009182:	db01      	blt.n	8009188 <_malloc_r+0x1c>
 8009184:	42a9      	cmp	r1, r5
 8009186:	d905      	bls.n	8009194 <_malloc_r+0x28>
 8009188:	230c      	movs	r3, #12
 800918a:	2600      	movs	r6, #0
 800918c:	603b      	str	r3, [r7, #0]
 800918e:	4630      	mov	r0, r6
 8009190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009194:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009268 <_malloc_r+0xfc>
 8009198:	f000 f868 	bl	800926c <__malloc_lock>
 800919c:	f8d8 3000 	ldr.w	r3, [r8]
 80091a0:	461c      	mov	r4, r3
 80091a2:	bb5c      	cbnz	r4, 80091fc <_malloc_r+0x90>
 80091a4:	4629      	mov	r1, r5
 80091a6:	4638      	mov	r0, r7
 80091a8:	f7ff ffc0 	bl	800912c <sbrk_aligned>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	4604      	mov	r4, r0
 80091b0:	d155      	bne.n	800925e <_malloc_r+0xf2>
 80091b2:	f8d8 4000 	ldr.w	r4, [r8]
 80091b6:	4626      	mov	r6, r4
 80091b8:	2e00      	cmp	r6, #0
 80091ba:	d145      	bne.n	8009248 <_malloc_r+0xdc>
 80091bc:	2c00      	cmp	r4, #0
 80091be:	d048      	beq.n	8009252 <_malloc_r+0xe6>
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	4631      	mov	r1, r6
 80091c4:	4638      	mov	r0, r7
 80091c6:	eb04 0903 	add.w	r9, r4, r3
 80091ca:	f000 fb61 	bl	8009890 <_sbrk_r>
 80091ce:	4581      	cmp	r9, r0
 80091d0:	d13f      	bne.n	8009252 <_malloc_r+0xe6>
 80091d2:	6821      	ldr	r1, [r4, #0]
 80091d4:	4638      	mov	r0, r7
 80091d6:	1a6d      	subs	r5, r5, r1
 80091d8:	4629      	mov	r1, r5
 80091da:	f7ff ffa7 	bl	800912c <sbrk_aligned>
 80091de:	3001      	adds	r0, #1
 80091e0:	d037      	beq.n	8009252 <_malloc_r+0xe6>
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	442b      	add	r3, r5
 80091e6:	6023      	str	r3, [r4, #0]
 80091e8:	f8d8 3000 	ldr.w	r3, [r8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d038      	beq.n	8009262 <_malloc_r+0xf6>
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	42a2      	cmp	r2, r4
 80091f4:	d12b      	bne.n	800924e <_malloc_r+0xe2>
 80091f6:	2200      	movs	r2, #0
 80091f8:	605a      	str	r2, [r3, #4]
 80091fa:	e00f      	b.n	800921c <_malloc_r+0xb0>
 80091fc:	6822      	ldr	r2, [r4, #0]
 80091fe:	1b52      	subs	r2, r2, r5
 8009200:	d41f      	bmi.n	8009242 <_malloc_r+0xd6>
 8009202:	2a0b      	cmp	r2, #11
 8009204:	d917      	bls.n	8009236 <_malloc_r+0xca>
 8009206:	1961      	adds	r1, r4, r5
 8009208:	42a3      	cmp	r3, r4
 800920a:	6025      	str	r5, [r4, #0]
 800920c:	bf18      	it	ne
 800920e:	6059      	strne	r1, [r3, #4]
 8009210:	6863      	ldr	r3, [r4, #4]
 8009212:	bf08      	it	eq
 8009214:	f8c8 1000 	streq.w	r1, [r8]
 8009218:	5162      	str	r2, [r4, r5]
 800921a:	604b      	str	r3, [r1, #4]
 800921c:	4638      	mov	r0, r7
 800921e:	f104 060b 	add.w	r6, r4, #11
 8009222:	f000 f829 	bl	8009278 <__malloc_unlock>
 8009226:	f026 0607 	bic.w	r6, r6, #7
 800922a:	1d23      	adds	r3, r4, #4
 800922c:	1af2      	subs	r2, r6, r3
 800922e:	d0ae      	beq.n	800918e <_malloc_r+0x22>
 8009230:	1b9b      	subs	r3, r3, r6
 8009232:	50a3      	str	r3, [r4, r2]
 8009234:	e7ab      	b.n	800918e <_malloc_r+0x22>
 8009236:	42a3      	cmp	r3, r4
 8009238:	6862      	ldr	r2, [r4, #4]
 800923a:	d1dd      	bne.n	80091f8 <_malloc_r+0x8c>
 800923c:	f8c8 2000 	str.w	r2, [r8]
 8009240:	e7ec      	b.n	800921c <_malloc_r+0xb0>
 8009242:	4623      	mov	r3, r4
 8009244:	6864      	ldr	r4, [r4, #4]
 8009246:	e7ac      	b.n	80091a2 <_malloc_r+0x36>
 8009248:	4634      	mov	r4, r6
 800924a:	6876      	ldr	r6, [r6, #4]
 800924c:	e7b4      	b.n	80091b8 <_malloc_r+0x4c>
 800924e:	4613      	mov	r3, r2
 8009250:	e7cc      	b.n	80091ec <_malloc_r+0x80>
 8009252:	230c      	movs	r3, #12
 8009254:	4638      	mov	r0, r7
 8009256:	603b      	str	r3, [r7, #0]
 8009258:	f000 f80e 	bl	8009278 <__malloc_unlock>
 800925c:	e797      	b.n	800918e <_malloc_r+0x22>
 800925e:	6025      	str	r5, [r4, #0]
 8009260:	e7dc      	b.n	800921c <_malloc_r+0xb0>
 8009262:	605b      	str	r3, [r3, #4]
 8009264:	deff      	udf	#255	; 0xff
 8009266:	bf00      	nop
 8009268:	20001f70 	.word	0x20001f70

0800926c <__malloc_lock>:
 800926c:	4801      	ldr	r0, [pc, #4]	; (8009274 <__malloc_lock+0x8>)
 800926e:	f7ff bf05 	b.w	800907c <__retarget_lock_acquire_recursive>
 8009272:	bf00      	nop
 8009274:	20001f6c 	.word	0x20001f6c

08009278 <__malloc_unlock>:
 8009278:	4801      	ldr	r0, [pc, #4]	; (8009280 <__malloc_unlock+0x8>)
 800927a:	f7ff bf00 	b.w	800907e <__retarget_lock_release_recursive>
 800927e:	bf00      	nop
 8009280:	20001f6c 	.word	0x20001f6c

08009284 <__ssputs_r>:
 8009284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009288:	461f      	mov	r7, r3
 800928a:	688e      	ldr	r6, [r1, #8]
 800928c:	4682      	mov	sl, r0
 800928e:	42be      	cmp	r6, r7
 8009290:	460c      	mov	r4, r1
 8009292:	4690      	mov	r8, r2
 8009294:	680b      	ldr	r3, [r1, #0]
 8009296:	d82c      	bhi.n	80092f2 <__ssputs_r+0x6e>
 8009298:	898a      	ldrh	r2, [r1, #12]
 800929a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800929e:	d026      	beq.n	80092ee <__ssputs_r+0x6a>
 80092a0:	6965      	ldr	r5, [r4, #20]
 80092a2:	6909      	ldr	r1, [r1, #16]
 80092a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092a8:	eba3 0901 	sub.w	r9, r3, r1
 80092ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092b0:	1c7b      	adds	r3, r7, #1
 80092b2:	444b      	add	r3, r9
 80092b4:	106d      	asrs	r5, r5, #1
 80092b6:	429d      	cmp	r5, r3
 80092b8:	bf38      	it	cc
 80092ba:	461d      	movcc	r5, r3
 80092bc:	0553      	lsls	r3, r2, #21
 80092be:	d527      	bpl.n	8009310 <__ssputs_r+0x8c>
 80092c0:	4629      	mov	r1, r5
 80092c2:	f7ff ff53 	bl	800916c <_malloc_r>
 80092c6:	4606      	mov	r6, r0
 80092c8:	b360      	cbz	r0, 8009324 <__ssputs_r+0xa0>
 80092ca:	464a      	mov	r2, r9
 80092cc:	6921      	ldr	r1, [r4, #16]
 80092ce:	f7ff fed7 	bl	8009080 <memcpy>
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092dc:	81a3      	strh	r3, [r4, #12]
 80092de:	6126      	str	r6, [r4, #16]
 80092e0:	444e      	add	r6, r9
 80092e2:	6026      	str	r6, [r4, #0]
 80092e4:	463e      	mov	r6, r7
 80092e6:	6165      	str	r5, [r4, #20]
 80092e8:	eba5 0509 	sub.w	r5, r5, r9
 80092ec:	60a5      	str	r5, [r4, #8]
 80092ee:	42be      	cmp	r6, r7
 80092f0:	d900      	bls.n	80092f4 <__ssputs_r+0x70>
 80092f2:	463e      	mov	r6, r7
 80092f4:	4632      	mov	r2, r6
 80092f6:	4641      	mov	r1, r8
 80092f8:	6820      	ldr	r0, [r4, #0]
 80092fa:	f000 faaf 	bl	800985c <memmove>
 80092fe:	2000      	movs	r0, #0
 8009300:	68a3      	ldr	r3, [r4, #8]
 8009302:	1b9b      	subs	r3, r3, r6
 8009304:	60a3      	str	r3, [r4, #8]
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	4433      	add	r3, r6
 800930a:	6023      	str	r3, [r4, #0]
 800930c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009310:	462a      	mov	r2, r5
 8009312:	f000 fadb 	bl	80098cc <_realloc_r>
 8009316:	4606      	mov	r6, r0
 8009318:	2800      	cmp	r0, #0
 800931a:	d1e0      	bne.n	80092de <__ssputs_r+0x5a>
 800931c:	4650      	mov	r0, sl
 800931e:	6921      	ldr	r1, [r4, #16]
 8009320:	f7ff febc 	bl	800909c <_free_r>
 8009324:	230c      	movs	r3, #12
 8009326:	f8ca 3000 	str.w	r3, [sl]
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	f04f 30ff 	mov.w	r0, #4294967295
 8009330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009334:	81a3      	strh	r3, [r4, #12]
 8009336:	e7e9      	b.n	800930c <__ssputs_r+0x88>

08009338 <_svfiprintf_r>:
 8009338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	4698      	mov	r8, r3
 800933e:	898b      	ldrh	r3, [r1, #12]
 8009340:	4607      	mov	r7, r0
 8009342:	061b      	lsls	r3, r3, #24
 8009344:	460d      	mov	r5, r1
 8009346:	4614      	mov	r4, r2
 8009348:	b09d      	sub	sp, #116	; 0x74
 800934a:	d50e      	bpl.n	800936a <_svfiprintf_r+0x32>
 800934c:	690b      	ldr	r3, [r1, #16]
 800934e:	b963      	cbnz	r3, 800936a <_svfiprintf_r+0x32>
 8009350:	2140      	movs	r1, #64	; 0x40
 8009352:	f7ff ff0b 	bl	800916c <_malloc_r>
 8009356:	6028      	str	r0, [r5, #0]
 8009358:	6128      	str	r0, [r5, #16]
 800935a:	b920      	cbnz	r0, 8009366 <_svfiprintf_r+0x2e>
 800935c:	230c      	movs	r3, #12
 800935e:	603b      	str	r3, [r7, #0]
 8009360:	f04f 30ff 	mov.w	r0, #4294967295
 8009364:	e0d0      	b.n	8009508 <_svfiprintf_r+0x1d0>
 8009366:	2340      	movs	r3, #64	; 0x40
 8009368:	616b      	str	r3, [r5, #20]
 800936a:	2300      	movs	r3, #0
 800936c:	9309      	str	r3, [sp, #36]	; 0x24
 800936e:	2320      	movs	r3, #32
 8009370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009374:	2330      	movs	r3, #48	; 0x30
 8009376:	f04f 0901 	mov.w	r9, #1
 800937a:	f8cd 800c 	str.w	r8, [sp, #12]
 800937e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009520 <_svfiprintf_r+0x1e8>
 8009382:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009386:	4623      	mov	r3, r4
 8009388:	469a      	mov	sl, r3
 800938a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800938e:	b10a      	cbz	r2, 8009394 <_svfiprintf_r+0x5c>
 8009390:	2a25      	cmp	r2, #37	; 0x25
 8009392:	d1f9      	bne.n	8009388 <_svfiprintf_r+0x50>
 8009394:	ebba 0b04 	subs.w	fp, sl, r4
 8009398:	d00b      	beq.n	80093b2 <_svfiprintf_r+0x7a>
 800939a:	465b      	mov	r3, fp
 800939c:	4622      	mov	r2, r4
 800939e:	4629      	mov	r1, r5
 80093a0:	4638      	mov	r0, r7
 80093a2:	f7ff ff6f 	bl	8009284 <__ssputs_r>
 80093a6:	3001      	adds	r0, #1
 80093a8:	f000 80a9 	beq.w	80094fe <_svfiprintf_r+0x1c6>
 80093ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093ae:	445a      	add	r2, fp
 80093b0:	9209      	str	r2, [sp, #36]	; 0x24
 80093b2:	f89a 3000 	ldrb.w	r3, [sl]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 80a1 	beq.w	80094fe <_svfiprintf_r+0x1c6>
 80093bc:	2300      	movs	r3, #0
 80093be:	f04f 32ff 	mov.w	r2, #4294967295
 80093c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093c6:	f10a 0a01 	add.w	sl, sl, #1
 80093ca:	9304      	str	r3, [sp, #16]
 80093cc:	9307      	str	r3, [sp, #28]
 80093ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093d2:	931a      	str	r3, [sp, #104]	; 0x68
 80093d4:	4654      	mov	r4, sl
 80093d6:	2205      	movs	r2, #5
 80093d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093dc:	4850      	ldr	r0, [pc, #320]	; (8009520 <_svfiprintf_r+0x1e8>)
 80093de:	f000 fa67 	bl	80098b0 <memchr>
 80093e2:	9a04      	ldr	r2, [sp, #16]
 80093e4:	b9d8      	cbnz	r0, 800941e <_svfiprintf_r+0xe6>
 80093e6:	06d0      	lsls	r0, r2, #27
 80093e8:	bf44      	itt	mi
 80093ea:	2320      	movmi	r3, #32
 80093ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093f0:	0711      	lsls	r1, r2, #28
 80093f2:	bf44      	itt	mi
 80093f4:	232b      	movmi	r3, #43	; 0x2b
 80093f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093fa:	f89a 3000 	ldrb.w	r3, [sl]
 80093fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009400:	d015      	beq.n	800942e <_svfiprintf_r+0xf6>
 8009402:	4654      	mov	r4, sl
 8009404:	2000      	movs	r0, #0
 8009406:	f04f 0c0a 	mov.w	ip, #10
 800940a:	9a07      	ldr	r2, [sp, #28]
 800940c:	4621      	mov	r1, r4
 800940e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009412:	3b30      	subs	r3, #48	; 0x30
 8009414:	2b09      	cmp	r3, #9
 8009416:	d94d      	bls.n	80094b4 <_svfiprintf_r+0x17c>
 8009418:	b1b0      	cbz	r0, 8009448 <_svfiprintf_r+0x110>
 800941a:	9207      	str	r2, [sp, #28]
 800941c:	e014      	b.n	8009448 <_svfiprintf_r+0x110>
 800941e:	eba0 0308 	sub.w	r3, r0, r8
 8009422:	fa09 f303 	lsl.w	r3, r9, r3
 8009426:	4313      	orrs	r3, r2
 8009428:	46a2      	mov	sl, r4
 800942a:	9304      	str	r3, [sp, #16]
 800942c:	e7d2      	b.n	80093d4 <_svfiprintf_r+0x9c>
 800942e:	9b03      	ldr	r3, [sp, #12]
 8009430:	1d19      	adds	r1, r3, #4
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	9103      	str	r1, [sp, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	bfbb      	ittet	lt
 800943a:	425b      	neglt	r3, r3
 800943c:	f042 0202 	orrlt.w	r2, r2, #2
 8009440:	9307      	strge	r3, [sp, #28]
 8009442:	9307      	strlt	r3, [sp, #28]
 8009444:	bfb8      	it	lt
 8009446:	9204      	strlt	r2, [sp, #16]
 8009448:	7823      	ldrb	r3, [r4, #0]
 800944a:	2b2e      	cmp	r3, #46	; 0x2e
 800944c:	d10c      	bne.n	8009468 <_svfiprintf_r+0x130>
 800944e:	7863      	ldrb	r3, [r4, #1]
 8009450:	2b2a      	cmp	r3, #42	; 0x2a
 8009452:	d134      	bne.n	80094be <_svfiprintf_r+0x186>
 8009454:	9b03      	ldr	r3, [sp, #12]
 8009456:	3402      	adds	r4, #2
 8009458:	1d1a      	adds	r2, r3, #4
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	9203      	str	r2, [sp, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	bfb8      	it	lt
 8009462:	f04f 33ff 	movlt.w	r3, #4294967295
 8009466:	9305      	str	r3, [sp, #20]
 8009468:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009524 <_svfiprintf_r+0x1ec>
 800946c:	2203      	movs	r2, #3
 800946e:	4650      	mov	r0, sl
 8009470:	7821      	ldrb	r1, [r4, #0]
 8009472:	f000 fa1d 	bl	80098b0 <memchr>
 8009476:	b138      	cbz	r0, 8009488 <_svfiprintf_r+0x150>
 8009478:	2240      	movs	r2, #64	; 0x40
 800947a:	9b04      	ldr	r3, [sp, #16]
 800947c:	eba0 000a 	sub.w	r0, r0, sl
 8009480:	4082      	lsls	r2, r0
 8009482:	4313      	orrs	r3, r2
 8009484:	3401      	adds	r4, #1
 8009486:	9304      	str	r3, [sp, #16]
 8009488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800948c:	2206      	movs	r2, #6
 800948e:	4826      	ldr	r0, [pc, #152]	; (8009528 <_svfiprintf_r+0x1f0>)
 8009490:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009494:	f000 fa0c 	bl	80098b0 <memchr>
 8009498:	2800      	cmp	r0, #0
 800949a:	d038      	beq.n	800950e <_svfiprintf_r+0x1d6>
 800949c:	4b23      	ldr	r3, [pc, #140]	; (800952c <_svfiprintf_r+0x1f4>)
 800949e:	bb1b      	cbnz	r3, 80094e8 <_svfiprintf_r+0x1b0>
 80094a0:	9b03      	ldr	r3, [sp, #12]
 80094a2:	3307      	adds	r3, #7
 80094a4:	f023 0307 	bic.w	r3, r3, #7
 80094a8:	3308      	adds	r3, #8
 80094aa:	9303      	str	r3, [sp, #12]
 80094ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ae:	4433      	add	r3, r6
 80094b0:	9309      	str	r3, [sp, #36]	; 0x24
 80094b2:	e768      	b.n	8009386 <_svfiprintf_r+0x4e>
 80094b4:	460c      	mov	r4, r1
 80094b6:	2001      	movs	r0, #1
 80094b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80094bc:	e7a6      	b.n	800940c <_svfiprintf_r+0xd4>
 80094be:	2300      	movs	r3, #0
 80094c0:	f04f 0c0a 	mov.w	ip, #10
 80094c4:	4619      	mov	r1, r3
 80094c6:	3401      	adds	r4, #1
 80094c8:	9305      	str	r3, [sp, #20]
 80094ca:	4620      	mov	r0, r4
 80094cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094d0:	3a30      	subs	r2, #48	; 0x30
 80094d2:	2a09      	cmp	r2, #9
 80094d4:	d903      	bls.n	80094de <_svfiprintf_r+0x1a6>
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0c6      	beq.n	8009468 <_svfiprintf_r+0x130>
 80094da:	9105      	str	r1, [sp, #20]
 80094dc:	e7c4      	b.n	8009468 <_svfiprintf_r+0x130>
 80094de:	4604      	mov	r4, r0
 80094e0:	2301      	movs	r3, #1
 80094e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80094e6:	e7f0      	b.n	80094ca <_svfiprintf_r+0x192>
 80094e8:	ab03      	add	r3, sp, #12
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	462a      	mov	r2, r5
 80094ee:	4638      	mov	r0, r7
 80094f0:	4b0f      	ldr	r3, [pc, #60]	; (8009530 <_svfiprintf_r+0x1f8>)
 80094f2:	a904      	add	r1, sp, #16
 80094f4:	f3af 8000 	nop.w
 80094f8:	1c42      	adds	r2, r0, #1
 80094fa:	4606      	mov	r6, r0
 80094fc:	d1d6      	bne.n	80094ac <_svfiprintf_r+0x174>
 80094fe:	89ab      	ldrh	r3, [r5, #12]
 8009500:	065b      	lsls	r3, r3, #25
 8009502:	f53f af2d 	bmi.w	8009360 <_svfiprintf_r+0x28>
 8009506:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009508:	b01d      	add	sp, #116	; 0x74
 800950a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950e:	ab03      	add	r3, sp, #12
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	462a      	mov	r2, r5
 8009514:	4638      	mov	r0, r7
 8009516:	4b06      	ldr	r3, [pc, #24]	; (8009530 <_svfiprintf_r+0x1f8>)
 8009518:	a904      	add	r1, sp, #16
 800951a:	f000 f87d 	bl	8009618 <_printf_i>
 800951e:	e7eb      	b.n	80094f8 <_svfiprintf_r+0x1c0>
 8009520:	0800ae5e 	.word	0x0800ae5e
 8009524:	0800ae64 	.word	0x0800ae64
 8009528:	0800ae68 	.word	0x0800ae68
 800952c:	00000000 	.word	0x00000000
 8009530:	08009285 	.word	0x08009285

08009534 <_printf_common>:
 8009534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009538:	4616      	mov	r6, r2
 800953a:	4699      	mov	r9, r3
 800953c:	688a      	ldr	r2, [r1, #8]
 800953e:	690b      	ldr	r3, [r1, #16]
 8009540:	4607      	mov	r7, r0
 8009542:	4293      	cmp	r3, r2
 8009544:	bfb8      	it	lt
 8009546:	4613      	movlt	r3, r2
 8009548:	6033      	str	r3, [r6, #0]
 800954a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800954e:	460c      	mov	r4, r1
 8009550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009554:	b10a      	cbz	r2, 800955a <_printf_common+0x26>
 8009556:	3301      	adds	r3, #1
 8009558:	6033      	str	r3, [r6, #0]
 800955a:	6823      	ldr	r3, [r4, #0]
 800955c:	0699      	lsls	r1, r3, #26
 800955e:	bf42      	ittt	mi
 8009560:	6833      	ldrmi	r3, [r6, #0]
 8009562:	3302      	addmi	r3, #2
 8009564:	6033      	strmi	r3, [r6, #0]
 8009566:	6825      	ldr	r5, [r4, #0]
 8009568:	f015 0506 	ands.w	r5, r5, #6
 800956c:	d106      	bne.n	800957c <_printf_common+0x48>
 800956e:	f104 0a19 	add.w	sl, r4, #25
 8009572:	68e3      	ldr	r3, [r4, #12]
 8009574:	6832      	ldr	r2, [r6, #0]
 8009576:	1a9b      	subs	r3, r3, r2
 8009578:	42ab      	cmp	r3, r5
 800957a:	dc2b      	bgt.n	80095d4 <_printf_common+0xa0>
 800957c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009580:	1e13      	subs	r3, r2, #0
 8009582:	6822      	ldr	r2, [r4, #0]
 8009584:	bf18      	it	ne
 8009586:	2301      	movne	r3, #1
 8009588:	0692      	lsls	r2, r2, #26
 800958a:	d430      	bmi.n	80095ee <_printf_common+0xba>
 800958c:	4649      	mov	r1, r9
 800958e:	4638      	mov	r0, r7
 8009590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009594:	47c0      	blx	r8
 8009596:	3001      	adds	r0, #1
 8009598:	d023      	beq.n	80095e2 <_printf_common+0xae>
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	6922      	ldr	r2, [r4, #16]
 800959e:	f003 0306 	and.w	r3, r3, #6
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	bf14      	ite	ne
 80095a6:	2500      	movne	r5, #0
 80095a8:	6833      	ldreq	r3, [r6, #0]
 80095aa:	f04f 0600 	mov.w	r6, #0
 80095ae:	bf08      	it	eq
 80095b0:	68e5      	ldreq	r5, [r4, #12]
 80095b2:	f104 041a 	add.w	r4, r4, #26
 80095b6:	bf08      	it	eq
 80095b8:	1aed      	subeq	r5, r5, r3
 80095ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80095be:	bf08      	it	eq
 80095c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095c4:	4293      	cmp	r3, r2
 80095c6:	bfc4      	itt	gt
 80095c8:	1a9b      	subgt	r3, r3, r2
 80095ca:	18ed      	addgt	r5, r5, r3
 80095cc:	42b5      	cmp	r5, r6
 80095ce:	d11a      	bne.n	8009606 <_printf_common+0xd2>
 80095d0:	2000      	movs	r0, #0
 80095d2:	e008      	b.n	80095e6 <_printf_common+0xb2>
 80095d4:	2301      	movs	r3, #1
 80095d6:	4652      	mov	r2, sl
 80095d8:	4649      	mov	r1, r9
 80095da:	4638      	mov	r0, r7
 80095dc:	47c0      	blx	r8
 80095de:	3001      	adds	r0, #1
 80095e0:	d103      	bne.n	80095ea <_printf_common+0xb6>
 80095e2:	f04f 30ff 	mov.w	r0, #4294967295
 80095e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ea:	3501      	adds	r5, #1
 80095ec:	e7c1      	b.n	8009572 <_printf_common+0x3e>
 80095ee:	2030      	movs	r0, #48	; 0x30
 80095f0:	18e1      	adds	r1, r4, r3
 80095f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095f6:	1c5a      	adds	r2, r3, #1
 80095f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095fc:	4422      	add	r2, r4
 80095fe:	3302      	adds	r3, #2
 8009600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009604:	e7c2      	b.n	800958c <_printf_common+0x58>
 8009606:	2301      	movs	r3, #1
 8009608:	4622      	mov	r2, r4
 800960a:	4649      	mov	r1, r9
 800960c:	4638      	mov	r0, r7
 800960e:	47c0      	blx	r8
 8009610:	3001      	adds	r0, #1
 8009612:	d0e6      	beq.n	80095e2 <_printf_common+0xae>
 8009614:	3601      	adds	r6, #1
 8009616:	e7d9      	b.n	80095cc <_printf_common+0x98>

08009618 <_printf_i>:
 8009618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800961c:	7e0f      	ldrb	r7, [r1, #24]
 800961e:	4691      	mov	r9, r2
 8009620:	2f78      	cmp	r7, #120	; 0x78
 8009622:	4680      	mov	r8, r0
 8009624:	460c      	mov	r4, r1
 8009626:	469a      	mov	sl, r3
 8009628:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800962a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800962e:	d807      	bhi.n	8009640 <_printf_i+0x28>
 8009630:	2f62      	cmp	r7, #98	; 0x62
 8009632:	d80a      	bhi.n	800964a <_printf_i+0x32>
 8009634:	2f00      	cmp	r7, #0
 8009636:	f000 80d5 	beq.w	80097e4 <_printf_i+0x1cc>
 800963a:	2f58      	cmp	r7, #88	; 0x58
 800963c:	f000 80c1 	beq.w	80097c2 <_printf_i+0x1aa>
 8009640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009648:	e03a      	b.n	80096c0 <_printf_i+0xa8>
 800964a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800964e:	2b15      	cmp	r3, #21
 8009650:	d8f6      	bhi.n	8009640 <_printf_i+0x28>
 8009652:	a101      	add	r1, pc, #4	; (adr r1, 8009658 <_printf_i+0x40>)
 8009654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009658:	080096b1 	.word	0x080096b1
 800965c:	080096c5 	.word	0x080096c5
 8009660:	08009641 	.word	0x08009641
 8009664:	08009641 	.word	0x08009641
 8009668:	08009641 	.word	0x08009641
 800966c:	08009641 	.word	0x08009641
 8009670:	080096c5 	.word	0x080096c5
 8009674:	08009641 	.word	0x08009641
 8009678:	08009641 	.word	0x08009641
 800967c:	08009641 	.word	0x08009641
 8009680:	08009641 	.word	0x08009641
 8009684:	080097cb 	.word	0x080097cb
 8009688:	080096f1 	.word	0x080096f1
 800968c:	08009785 	.word	0x08009785
 8009690:	08009641 	.word	0x08009641
 8009694:	08009641 	.word	0x08009641
 8009698:	080097ed 	.word	0x080097ed
 800969c:	08009641 	.word	0x08009641
 80096a0:	080096f1 	.word	0x080096f1
 80096a4:	08009641 	.word	0x08009641
 80096a8:	08009641 	.word	0x08009641
 80096ac:	0800978d 	.word	0x0800978d
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	1d1a      	adds	r2, r3, #4
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	602a      	str	r2, [r5, #0]
 80096b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096c0:	2301      	movs	r3, #1
 80096c2:	e0a0      	b.n	8009806 <_printf_i+0x1ee>
 80096c4:	6820      	ldr	r0, [r4, #0]
 80096c6:	682b      	ldr	r3, [r5, #0]
 80096c8:	0607      	lsls	r7, r0, #24
 80096ca:	f103 0104 	add.w	r1, r3, #4
 80096ce:	6029      	str	r1, [r5, #0]
 80096d0:	d501      	bpl.n	80096d6 <_printf_i+0xbe>
 80096d2:	681e      	ldr	r6, [r3, #0]
 80096d4:	e003      	b.n	80096de <_printf_i+0xc6>
 80096d6:	0646      	lsls	r6, r0, #25
 80096d8:	d5fb      	bpl.n	80096d2 <_printf_i+0xba>
 80096da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096de:	2e00      	cmp	r6, #0
 80096e0:	da03      	bge.n	80096ea <_printf_i+0xd2>
 80096e2:	232d      	movs	r3, #45	; 0x2d
 80096e4:	4276      	negs	r6, r6
 80096e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ea:	230a      	movs	r3, #10
 80096ec:	4859      	ldr	r0, [pc, #356]	; (8009854 <_printf_i+0x23c>)
 80096ee:	e012      	b.n	8009716 <_printf_i+0xfe>
 80096f0:	682b      	ldr	r3, [r5, #0]
 80096f2:	6820      	ldr	r0, [r4, #0]
 80096f4:	1d19      	adds	r1, r3, #4
 80096f6:	6029      	str	r1, [r5, #0]
 80096f8:	0605      	lsls	r5, r0, #24
 80096fa:	d501      	bpl.n	8009700 <_printf_i+0xe8>
 80096fc:	681e      	ldr	r6, [r3, #0]
 80096fe:	e002      	b.n	8009706 <_printf_i+0xee>
 8009700:	0641      	lsls	r1, r0, #25
 8009702:	d5fb      	bpl.n	80096fc <_printf_i+0xe4>
 8009704:	881e      	ldrh	r6, [r3, #0]
 8009706:	2f6f      	cmp	r7, #111	; 0x6f
 8009708:	bf0c      	ite	eq
 800970a:	2308      	moveq	r3, #8
 800970c:	230a      	movne	r3, #10
 800970e:	4851      	ldr	r0, [pc, #324]	; (8009854 <_printf_i+0x23c>)
 8009710:	2100      	movs	r1, #0
 8009712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009716:	6865      	ldr	r5, [r4, #4]
 8009718:	2d00      	cmp	r5, #0
 800971a:	bfa8      	it	ge
 800971c:	6821      	ldrge	r1, [r4, #0]
 800971e:	60a5      	str	r5, [r4, #8]
 8009720:	bfa4      	itt	ge
 8009722:	f021 0104 	bicge.w	r1, r1, #4
 8009726:	6021      	strge	r1, [r4, #0]
 8009728:	b90e      	cbnz	r6, 800972e <_printf_i+0x116>
 800972a:	2d00      	cmp	r5, #0
 800972c:	d04b      	beq.n	80097c6 <_printf_i+0x1ae>
 800972e:	4615      	mov	r5, r2
 8009730:	fbb6 f1f3 	udiv	r1, r6, r3
 8009734:	fb03 6711 	mls	r7, r3, r1, r6
 8009738:	5dc7      	ldrb	r7, [r0, r7]
 800973a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800973e:	4637      	mov	r7, r6
 8009740:	42bb      	cmp	r3, r7
 8009742:	460e      	mov	r6, r1
 8009744:	d9f4      	bls.n	8009730 <_printf_i+0x118>
 8009746:	2b08      	cmp	r3, #8
 8009748:	d10b      	bne.n	8009762 <_printf_i+0x14a>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	07de      	lsls	r6, r3, #31
 800974e:	d508      	bpl.n	8009762 <_printf_i+0x14a>
 8009750:	6923      	ldr	r3, [r4, #16]
 8009752:	6861      	ldr	r1, [r4, #4]
 8009754:	4299      	cmp	r1, r3
 8009756:	bfde      	ittt	le
 8009758:	2330      	movle	r3, #48	; 0x30
 800975a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800975e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009762:	1b52      	subs	r2, r2, r5
 8009764:	6122      	str	r2, [r4, #16]
 8009766:	464b      	mov	r3, r9
 8009768:	4621      	mov	r1, r4
 800976a:	4640      	mov	r0, r8
 800976c:	f8cd a000 	str.w	sl, [sp]
 8009770:	aa03      	add	r2, sp, #12
 8009772:	f7ff fedf 	bl	8009534 <_printf_common>
 8009776:	3001      	adds	r0, #1
 8009778:	d14a      	bne.n	8009810 <_printf_i+0x1f8>
 800977a:	f04f 30ff 	mov.w	r0, #4294967295
 800977e:	b004      	add	sp, #16
 8009780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	f043 0320 	orr.w	r3, r3, #32
 800978a:	6023      	str	r3, [r4, #0]
 800978c:	2778      	movs	r7, #120	; 0x78
 800978e:	4832      	ldr	r0, [pc, #200]	; (8009858 <_printf_i+0x240>)
 8009790:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	6829      	ldr	r1, [r5, #0]
 8009798:	061f      	lsls	r7, r3, #24
 800979a:	f851 6b04 	ldr.w	r6, [r1], #4
 800979e:	d402      	bmi.n	80097a6 <_printf_i+0x18e>
 80097a0:	065f      	lsls	r7, r3, #25
 80097a2:	bf48      	it	mi
 80097a4:	b2b6      	uxthmi	r6, r6
 80097a6:	07df      	lsls	r7, r3, #31
 80097a8:	bf48      	it	mi
 80097aa:	f043 0320 	orrmi.w	r3, r3, #32
 80097ae:	6029      	str	r1, [r5, #0]
 80097b0:	bf48      	it	mi
 80097b2:	6023      	strmi	r3, [r4, #0]
 80097b4:	b91e      	cbnz	r6, 80097be <_printf_i+0x1a6>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	f023 0320 	bic.w	r3, r3, #32
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	2310      	movs	r3, #16
 80097c0:	e7a6      	b.n	8009710 <_printf_i+0xf8>
 80097c2:	4824      	ldr	r0, [pc, #144]	; (8009854 <_printf_i+0x23c>)
 80097c4:	e7e4      	b.n	8009790 <_printf_i+0x178>
 80097c6:	4615      	mov	r5, r2
 80097c8:	e7bd      	b.n	8009746 <_printf_i+0x12e>
 80097ca:	682b      	ldr	r3, [r5, #0]
 80097cc:	6826      	ldr	r6, [r4, #0]
 80097ce:	1d18      	adds	r0, r3, #4
 80097d0:	6961      	ldr	r1, [r4, #20]
 80097d2:	6028      	str	r0, [r5, #0]
 80097d4:	0635      	lsls	r5, r6, #24
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	d501      	bpl.n	80097de <_printf_i+0x1c6>
 80097da:	6019      	str	r1, [r3, #0]
 80097dc:	e002      	b.n	80097e4 <_printf_i+0x1cc>
 80097de:	0670      	lsls	r0, r6, #25
 80097e0:	d5fb      	bpl.n	80097da <_printf_i+0x1c2>
 80097e2:	8019      	strh	r1, [r3, #0]
 80097e4:	2300      	movs	r3, #0
 80097e6:	4615      	mov	r5, r2
 80097e8:	6123      	str	r3, [r4, #16]
 80097ea:	e7bc      	b.n	8009766 <_printf_i+0x14e>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	2100      	movs	r1, #0
 80097f0:	1d1a      	adds	r2, r3, #4
 80097f2:	602a      	str	r2, [r5, #0]
 80097f4:	681d      	ldr	r5, [r3, #0]
 80097f6:	6862      	ldr	r2, [r4, #4]
 80097f8:	4628      	mov	r0, r5
 80097fa:	f000 f859 	bl	80098b0 <memchr>
 80097fe:	b108      	cbz	r0, 8009804 <_printf_i+0x1ec>
 8009800:	1b40      	subs	r0, r0, r5
 8009802:	6060      	str	r0, [r4, #4]
 8009804:	6863      	ldr	r3, [r4, #4]
 8009806:	6123      	str	r3, [r4, #16]
 8009808:	2300      	movs	r3, #0
 800980a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800980e:	e7aa      	b.n	8009766 <_printf_i+0x14e>
 8009810:	462a      	mov	r2, r5
 8009812:	4649      	mov	r1, r9
 8009814:	4640      	mov	r0, r8
 8009816:	6923      	ldr	r3, [r4, #16]
 8009818:	47d0      	blx	sl
 800981a:	3001      	adds	r0, #1
 800981c:	d0ad      	beq.n	800977a <_printf_i+0x162>
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	079b      	lsls	r3, r3, #30
 8009822:	d413      	bmi.n	800984c <_printf_i+0x234>
 8009824:	68e0      	ldr	r0, [r4, #12]
 8009826:	9b03      	ldr	r3, [sp, #12]
 8009828:	4298      	cmp	r0, r3
 800982a:	bfb8      	it	lt
 800982c:	4618      	movlt	r0, r3
 800982e:	e7a6      	b.n	800977e <_printf_i+0x166>
 8009830:	2301      	movs	r3, #1
 8009832:	4632      	mov	r2, r6
 8009834:	4649      	mov	r1, r9
 8009836:	4640      	mov	r0, r8
 8009838:	47d0      	blx	sl
 800983a:	3001      	adds	r0, #1
 800983c:	d09d      	beq.n	800977a <_printf_i+0x162>
 800983e:	3501      	adds	r5, #1
 8009840:	68e3      	ldr	r3, [r4, #12]
 8009842:	9903      	ldr	r1, [sp, #12]
 8009844:	1a5b      	subs	r3, r3, r1
 8009846:	42ab      	cmp	r3, r5
 8009848:	dcf2      	bgt.n	8009830 <_printf_i+0x218>
 800984a:	e7eb      	b.n	8009824 <_printf_i+0x20c>
 800984c:	2500      	movs	r5, #0
 800984e:	f104 0619 	add.w	r6, r4, #25
 8009852:	e7f5      	b.n	8009840 <_printf_i+0x228>
 8009854:	0800ae6f 	.word	0x0800ae6f
 8009858:	0800ae80 	.word	0x0800ae80

0800985c <memmove>:
 800985c:	4288      	cmp	r0, r1
 800985e:	b510      	push	{r4, lr}
 8009860:	eb01 0402 	add.w	r4, r1, r2
 8009864:	d902      	bls.n	800986c <memmove+0x10>
 8009866:	4284      	cmp	r4, r0
 8009868:	4623      	mov	r3, r4
 800986a:	d807      	bhi.n	800987c <memmove+0x20>
 800986c:	1e43      	subs	r3, r0, #1
 800986e:	42a1      	cmp	r1, r4
 8009870:	d008      	beq.n	8009884 <memmove+0x28>
 8009872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800987a:	e7f8      	b.n	800986e <memmove+0x12>
 800987c:	4601      	mov	r1, r0
 800987e:	4402      	add	r2, r0
 8009880:	428a      	cmp	r2, r1
 8009882:	d100      	bne.n	8009886 <memmove+0x2a>
 8009884:	bd10      	pop	{r4, pc}
 8009886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800988a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800988e:	e7f7      	b.n	8009880 <memmove+0x24>

08009890 <_sbrk_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	2300      	movs	r3, #0
 8009894:	4d05      	ldr	r5, [pc, #20]	; (80098ac <_sbrk_r+0x1c>)
 8009896:	4604      	mov	r4, r0
 8009898:	4608      	mov	r0, r1
 800989a:	602b      	str	r3, [r5, #0]
 800989c:	f7f9 f820 	bl	80028e0 <_sbrk>
 80098a0:	1c43      	adds	r3, r0, #1
 80098a2:	d102      	bne.n	80098aa <_sbrk_r+0x1a>
 80098a4:	682b      	ldr	r3, [r5, #0]
 80098a6:	b103      	cbz	r3, 80098aa <_sbrk_r+0x1a>
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	bd38      	pop	{r3, r4, r5, pc}
 80098ac:	20001f68 	.word	0x20001f68

080098b0 <memchr>:
 80098b0:	4603      	mov	r3, r0
 80098b2:	b510      	push	{r4, lr}
 80098b4:	b2c9      	uxtb	r1, r1
 80098b6:	4402      	add	r2, r0
 80098b8:	4293      	cmp	r3, r2
 80098ba:	4618      	mov	r0, r3
 80098bc:	d101      	bne.n	80098c2 <memchr+0x12>
 80098be:	2000      	movs	r0, #0
 80098c0:	e003      	b.n	80098ca <memchr+0x1a>
 80098c2:	7804      	ldrb	r4, [r0, #0]
 80098c4:	3301      	adds	r3, #1
 80098c6:	428c      	cmp	r4, r1
 80098c8:	d1f6      	bne.n	80098b8 <memchr+0x8>
 80098ca:	bd10      	pop	{r4, pc}

080098cc <_realloc_r>:
 80098cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d0:	4680      	mov	r8, r0
 80098d2:	4614      	mov	r4, r2
 80098d4:	460e      	mov	r6, r1
 80098d6:	b921      	cbnz	r1, 80098e2 <_realloc_r+0x16>
 80098d8:	4611      	mov	r1, r2
 80098da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098de:	f7ff bc45 	b.w	800916c <_malloc_r>
 80098e2:	b92a      	cbnz	r2, 80098f0 <_realloc_r+0x24>
 80098e4:	f7ff fbda 	bl	800909c <_free_r>
 80098e8:	4625      	mov	r5, r4
 80098ea:	4628      	mov	r0, r5
 80098ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f0:	f000 f81b 	bl	800992a <_malloc_usable_size_r>
 80098f4:	4284      	cmp	r4, r0
 80098f6:	4607      	mov	r7, r0
 80098f8:	d802      	bhi.n	8009900 <_realloc_r+0x34>
 80098fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098fe:	d812      	bhi.n	8009926 <_realloc_r+0x5a>
 8009900:	4621      	mov	r1, r4
 8009902:	4640      	mov	r0, r8
 8009904:	f7ff fc32 	bl	800916c <_malloc_r>
 8009908:	4605      	mov	r5, r0
 800990a:	2800      	cmp	r0, #0
 800990c:	d0ed      	beq.n	80098ea <_realloc_r+0x1e>
 800990e:	42bc      	cmp	r4, r7
 8009910:	4622      	mov	r2, r4
 8009912:	4631      	mov	r1, r6
 8009914:	bf28      	it	cs
 8009916:	463a      	movcs	r2, r7
 8009918:	f7ff fbb2 	bl	8009080 <memcpy>
 800991c:	4631      	mov	r1, r6
 800991e:	4640      	mov	r0, r8
 8009920:	f7ff fbbc 	bl	800909c <_free_r>
 8009924:	e7e1      	b.n	80098ea <_realloc_r+0x1e>
 8009926:	4635      	mov	r5, r6
 8009928:	e7df      	b.n	80098ea <_realloc_r+0x1e>

0800992a <_malloc_usable_size_r>:
 800992a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800992e:	1f18      	subs	r0, r3, #4
 8009930:	2b00      	cmp	r3, #0
 8009932:	bfbc      	itt	lt
 8009934:	580b      	ldrlt	r3, [r1, r0]
 8009936:	18c0      	addlt	r0, r0, r3
 8009938:	4770      	bx	lr
	...

0800993c <_init>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	bf00      	nop
 8009940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009942:	bc08      	pop	{r3}
 8009944:	469e      	mov	lr, r3
 8009946:	4770      	bx	lr

08009948 <_fini>:
 8009948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994a:	bf00      	nop
 800994c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994e:	bc08      	pop	{r3}
 8009950:	469e      	mov	lr, r3
 8009952:	4770      	bx	lr
